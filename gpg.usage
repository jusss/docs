emacs undo and redo:
 C-/ or C-x u will undo, and do any operate like C-f or C-g then C-/ or C-x u
 it will redo. not like vim
 vim undo and redo:
  u or U will undo, C-r will redo, and there're :undolist then :undo 178 can undo


veryfy:
 download the file and xxx.sign, then `gpg --verify xxx.sign file`

$ gpg --verify linux-4.7.3.tar.sign linux-4.7.3.tar.gz 
gpg: Signature made Wednesday, September 07, 2016 PM02:35:30 HKT using RSA key ID 6092693E
gpg: Can't check signature: public key not found

it's should be gpg --verify linux-4.7.3.tar.sign linux-4.7.3.tar, not linux-4.7.3.tar.gz
!!!the sign is for tar, not gz file

$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 6092693E

add keys to database of system:

$gpg --export --armor 6092693E|sudo apt-key add -

use public key to verify signature, and use private key to make signature of file

so if you want to verify files, you need "public key" "signature file" and "files"

1. generate a gpg key
$apt-get install gnupg
$gpg --gen-key

it will take some minutes, all you need to do is type somethings or move your mouse stuff and wait it, it need lots of random data generated by your action.
see flash through browser is a wonderful idea :)

when it's done, the key will save in ~/.gnupg

2. import others keys
get others keys, then
$ gpg --import others.public.key
when it's done, you will see a key ID like "EBA34B1C"

3. get fingerprint
$gpg --fingerprint EBA34B1C
or get all of them on your system
$gpg --fingerprint

4. make keys as trusted
$gpg --edit-key EBA34B1C
then input "trust" to gpg prompt like 'gpg> '
then give it a number and "sign" "save"

5. get the key list
$gpg --list-keys

6. verify the key and file
$gpg --verify xxx.asc xxx.tar

xxx.asc is signature file of xxx.tar, if it says "Good signature", that's true, otherwise it will says" Bad signature", that's fake.

7. give your public key to others
$gpg -a --output my.public.key --export your.name.or.email.address

8. set your public key to servers
$gpg --keyserver keys.gnupg.net --send-key ID
ID is your public key's ID

9. get keys from servers
$gpg --keyserver keys.gnupg.net --search-key others.name.or.email.address
or
$gpg --keyserver keys.gnupg.net --recv-key ID
ID like EBA34B1C, it's public ID

10. sign the key
$gpg --sign-key others.name.or.email.address

11. delete the key
$gpg --delete-keys others.name.or.email.address

12. encrypt file
$gpg --output file.after.encrypt -r your.name.or.email.address -e file
or others' public key I think

13. decrypt file
$gpg --output file.after.decrypt -d encrypt.file
gnupg will auto use my private key to decrypt the file

14. sign file
detached signatures:
gpg --output mytest.sig --detach-sig mytest
or
gpg -b file     it will auto generate file.asc

clearsigned documents:
 gpg --clearsign file

15. verify
$gpg --verify file.sign
or gpg --verify file.sign file
because you have got the public keys through gpg --keyserver so the second parameter is not necessary


