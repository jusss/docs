bind x y = if x/= None then y x else None 
bind dict.get("a",None) \x -> you can use x or don't use x
this avoid if xxx: if xxx: if xxx:
use object(x).bind(y).bind(z) implement infix expression
avoid bind(bind(x,y),z)
object(x) // y // z, python operator
toolz can do curry and compose

class Maybe:
    def __init__(self,x):
        self.x = x
    def __floordiv__(self,f):
        if (self.x == None):
            return Maybe(None)
        return Maybe(f(self.x))
    def fromMaybe(self):
        return self.x

maybe = Maybe(a_dict.get(key, None)) // (lambda v: use_v_or_not)
maybe.fromMaybe()

a < b     __lt__(a,b)
a <= b    __le__(a,b)
a == b   __eq__
!=      __ne__
>      __gt__
>=     __ge__
not    __not__
True   truth
is     is_
is not is_not
+  __add__
//     __floordiv__
~      __invert__
<<     __lshift__
%      __mod__
*      __mul__
@      __matmul__
-      __neg__
|      __or__
**     __pow__
>>     __rshift__
-      __sub__
/      __truediv__
^      __xor__
in     __contains__
&      __and__
