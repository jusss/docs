git clone xxx
然后git diff生成patch 
git apply应用patch

不想下整个repo,就找到那个文件直接替换，或者commit,
然后手动创建diff出来文件的头，把commit里的更改复制进去，然后patch
https://github.com/jwrdegoede/linux-sunxi/commit/556673a6b122b16e57b4fcbb607e120de3f71f90
复制内容
cp linux-4.11/drivers/rtc/
cp rtc-cmos.c rtc-cmos.new.c
vim rtc-cmos.new.c
diff -Nur rtc-cmos.c rtc-cmos.new.c > my.patch
得文件头
--- rtc-cmos.c  2017-05-03 00:22:10.463515461 +0000
+++ rtc-cmos.new.c      2017-05-03 00:22:05.780181925 +0000
@@ -1,3 +1,4 @@
+/* test */
 /*
  * RTC class driver for "CMOS RTC":  PCs, ACPI, etc
  *
my.patch (END)

vim irq8.volumn.button.patch
--- drivers/rtc/rtc-cmos.c 2017-05-03 00:22:10.463515461 +0000
+++ drivers/rtc/rtc-cmos.c  2017-05-03 00:22:05.780181925 +0000
@@ -41,6 +41,9 @@
  #include <linux/pm.h>
  #include <linux/of.h>
  #include <linux/of_platform.h>
 +#ifdef CONFIG_X86
 +#include <asm/i8259.h>
 +#endif
  
  /* this is for "generic access to PC-style RTC" using CMOS_READ/CMOS_WRITE */
  #include <linux/mc146818rtc.h>
 @@ -1193,17 +1196,23 @@ static int cmos_pnp_probe(struct pnp_dev *pnp, const struct pnp_device_id *id)
  {
    cmos_wake_setup(&pnp->dev);
  
 -  if (pnp_port_start(pnp, 0) == 0x70 && !pnp_irq_valid(pnp, 0))
 +  if (pnp_port_start(pnp, 0) == 0x70 && !pnp_irq_valid(pnp, 0)) {
 +      unsigned int irq = 0;
 +#ifdef CONFIG_X86
        /* Some machines contain a PNP entry for the RTC, but
         * don't define the IRQ. It should always be safe to
 -       * hardcode it in these cases
 +       * hardcode it on systems with a legacy PIC.
         */
 +      if (nr_legacy_irqs())
 +          irq = 8;
 +#endif
        return cmos_do_probe(&pnp->dev,
 -              pnp_get_resource(pnp, IORESOURCE_IO, 0), 8);
 -  else
 +              pnp_get_resource(pnp, IORESOURCE_IO, 0), irq);
 +  } else {
        return cmos_do_probe(&pnp->dev,
                pnp_get_resource(pnp, IORESOURCE_IO, 0),
                pnp_irq(pnp, 0));
 +  }
  }
  
  static void cmos_pnp_remove(struct pnp_dev *pnp)


把这个patch复制到内核编译目录
然后 patch -p0 < irq8.volumn.button.patch

或者直接复制rtc-cmos.c文件替换
找到那个rtc-cmos.c文件在github上，点raw,然后wget https://raw.githubusercontent.com/jwrdegoede/linux-sunxi/556673a6b122b16e57b4fcbb607e120de3f71f90/drivers/rtc/rtc-cmos.c  
diff -Nur drivers/rtc/rtc-cmos.c rtc-cmos.c > irq8.volumn.button.patch 
rm rtc-cmos.c 如果不删先文件，默认会打这当前这个新文件上
 patch -p0 < irq8.volumn.button.patch
---------------------------------
生成补丁 quilt diff git

1. git diff > my.patch 对比当前目录的两个工作区域里同名文件的修改生成补丁

2. diff -Nur original.file edited.file > my.patch 对比这两个文件生成补丁，
   original.file和edited.file不需要同名或同目录,但需要打补丁的文件需要和original.file同名
   patch匹配的是original.file的位置目录

3. 使用quilt和使用git有点像，在original.file所在的目录里
   quilt new my.patch 生成patches目录，并设置将要生成的补丁文件名为my.patch
   quilt add original.file  记录orginal.file的修改
   quilt edit original.file 修改original.file并保存
   quilt refresh	    修改完成后运行这个指令生成补丁my.patch
   此时original.file已修改，如果想恢复文件的原始状态用
   quilt pop -a	卸载补丁
   恢复原始状态后，如果想再打上补丁，用quilt push -a
   用quilt来打别人的补丁貌似有点麻烦，需要用quilt add关联别人的补丁，在这就不写了


打补丁 patch git

1. patch -pN < my.patch

   N可以为0 1 2 3...
   
   -pN就是去掉my.patch文件里第一行orginial.file的目录里的N个前缀目录，使其之后的目录和
   你当前所在目录下的目录匹配(同名),而不是my.patch文件当前所在的目录.
   如my.path在~/rtl8723bs/my.patch
   my.patch里的第一行为a/net/bla.c
   而你当前在的位置为~/linux-4.4.1/,里面有net driver目录
   ~/linux-4.4.1/$ patch -p1 < ../rtl8723bs/my.patch
   
   如my.patch里original.file的位置为tmp/hell.c
   而需要打补丁的文件为~/tmp/bla2/hell.c,则把my.patch复制到~/tmp/bla2下
   然后 patch -p1 < my.patch
   如果需要打补丁的文件为~/tmp/hell.c,则把my.patch复制到~/下
   然后 patch -p0 < my.patc 或者复制my.patch到~/tmp下用 patch -p1 < my.patch

   打完补丁后如果想卸载补丁用 patch -R -pN < my.patch即可

2. git的打补丁方法暂时不会。。。


   


   
   
   
   
