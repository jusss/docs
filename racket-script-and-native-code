I. racket脚本

   x.rkt
   #!/usr/bin/env racket
   #lang racket/base
   (define bla
     (lambda ()
       ...
       ))
   (bla)

   文件权限加x后,$./x.rkt或者$racket x.rtk执行

II. native code

    x.rkt
    #lang racket/base
    (define bla
      (lambda ()
        ...
	))
    (bla)

    raco exe -o x.exe x.rkt
    
    打包运行时库和可执行文件到指定目录以便可以在其它机器上运行
    raco distribute destination-direcotry x.exe

    这样这个destination-directory就包含了bin和lib
    复制这个文件夹到/tmp
    ldd /tmp/bin/x.exe可知依赖的文件
    然后mkdir /tmp/对应依赖文件的路径
    如 ldd /tmp/bin/x.exe显示
    linux-vdso.so.1
    /usr/lib/libpthread.so.0
    /usr/lib/libc.so.6
    /lib64/ld-linux-x86-64.so.2
    
    然后mkdir -p /tmp/usr/lib /lib64
    cp /usr/lib/libpthread.so.0 /tmp/usr/lib
    cp /usr/lib/libc.so.6 /tmp/usr/lib
    cp /lib64/libc.so.6 /tmp/lib64
    
    sudo chroot . /bin/x.exe
    创建完整的依赖文件后，可以用cpio打包方便移植
    find /tmp | cpio -o > ~/x.cpio
    cpio -i < x.cpio

    或者直接mkdir -p /tmp/usr/lib /tmp/lib64
    sudo mount -o rbind,ro /usr/lib /tmp/usr/lib  把/usr/lib以只读挂载到/tmp/usr/lib, /usr/lib可读写，/tmp/usr/lib只读
    sudo mount --make-rslave /tmp/usr/lib 再挂载到/tmp/usr/lib下面的目录，不会映射到/usr/lib, 但/usr/lib的会映射到/tmp/usr/lib
    sudo mount -o rbind,ro /lib64 /tmp/lib64
    sudo mount --make-rslave /tmp/lib64
    sudo chroot /tmp /bin/x.exe
    

III. 创建library和调用

     x.rkt
     #lang racket
     (provide (all-defined-out)) 也可单独(provide bla)这样单独provide一个函数而不是所有函数

     (define bla ...) 函数定义
     ...

     y.rkt
     #!/usr/bin/env racket
     #lang racket
     (require (file "~/lab/x.rkt")) 当y.rkt和x.rkt在同一目录时，可用相关路径(require "x.rkt")，require后面默认接的路径是相关路径
     如果x.rkt在y.rkt的上级目录，可以用(require "../x.rkt")

     (bla ...) 函数调用
     
from: http://docs.racket-lang.org/raco/exe-dist.html
      http://docs.racket-lang.org/raco/exe.html?q=raco
      http://docs.racket-lang.org/reference/require.html
      https://www.douban.com/group/topic/42119635/
      
