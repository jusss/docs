-D socks代理，如果不用socks代理，则需要指定具体地址，socks代理应该是在数据里加了个目的地址
proxychains可以配置用于socks代理，还有redsocks
----------------------------------------
stunnel /etc/stunnel/stunnel.conf
ssh -p 1990 -D 7070 -C -q -N john@moon -i ./.ssh/john@vps
chromium --proxy-server="socks5://127.0.0.1:7070"

moon is localhost, and I already run stunnel on localhost as client mode
via `stunnel /etc/stunnel/stunnel.conf`
[john@moon ~]$ cat /etc/stunnel/stunnel.conf
pid = /tmp/stunnel.pid
sslVersion = TLSv1
client = yes
[ssh]
accept=1990
connect=your-vps-ip:1991

ON SERVER:
stunnel /etc/stunnel/stunnel.conf

root@x:~# cat /etc/stunnel/stunnel.conf 
cert = /etc/stunnel/server.pem
sslVersion = TLSv1
chroot = /var/run/stunnel4
setuid = john
setgid = john
pid = /stunnel.pid
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1

[sshd]
accept = 1991
connect = 1990
TIMEOUTclose = 0

--------------------------------------------------------------
ssh -D 8123 -f -C -q -N sammy@example.com
Explanation of arguments

-D: Tells SSH that we want a SOCKS tunnel on the specified port number (you can choose a number between 1025-65536)
-f: Forks the process to the background
-C: Compresses the data before sending it
-q: Uses quiet mode
-N: Tells SSH that no command will be sent once the tunnel is up

ssh -p 1990 -D 7070 -C -q -N john@moon -i ./.ssh/john@vps
------------------------------------------------------
https://gist.github.com/bwann/82ed679e94972666808d97587d276677
How to tunnel SSH over SSL/TLS
laptop ssh -> laptop stunnel -> evil network -> internet -> your server -> your server ssh

Server (your shell server/home box/work box/whatever)
Sets up a stunnel process listening externally on port 2443/tcp, forwards to localhost 22/tcp

Install stunnel, e.g. yum install stunnel
Install server config snippet to /etc/stunnel/stunnel.conf
Create a TLS cert+key pair, save to /etc/stunnel/stunnel.pem
Quick and dirty self signed cert, if you don't care about repudiation: openssl req -new -x509 -days 365 -nodes -out stunnel.pem -keyout stunnel.pem

Create the chroot directory: mkdir /var/run/stunnel ; chown nobody.nobody /var/run/stunnel
Run the server: stunnel /etc/stunnel/stunnel.conf if there isn't an init script
Remember to open iptables to accept connections on 2443/tcp if you use it!
Client/laptop
Sets up a stunnel process listening on the laptop on port 2443

Install stunnel
Install client config to your homedir as stunnel-client.conf
Edit connect= line to change to the name/address of your server, e.g. connect=myserver.example.com:2443
Run the client: stunnel stunnel-client.conf
Testing/verification
From laptop, telnet to localhost port 2443. You should see the OpenSSH banner of your remote server

lapdance:~ bwann$ telnet localhost 2443
Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
SSH-2.0-OpenSSH_6.6.1
Testing ssh:

lapdance:~ bwann$ ssh -p 2443 localhost uname -n
my-server.wann.net
Usage
On your laptop, ssh to localhost port 443. This will connect you to the sshd running on your server. Done!

ssh -p 4443 localhost

Raw
 stunnel-client.conf
pid = /tmp/stunnel.pid
client=yes
[ssh]
accept=2443
connect=my-server.wann.net:2443
stunnel.conf
cert = /etc/stunnel/stunnel.pem
sslVersion = TLSv1
options = NO_SSLv2
options = NO_SSLv3
chroot = /var/run/stunnel
setuid = nobody
setgid = nobody
pid = /stunnel.pid
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1

[sshd]
accept = 2443
connect = 22
TIMEOUTclose = 0
