2017.07.17 发现tls-crypt也握手失败。。。还是用static keys吧。。。
openvpn tls握手包已被识别，用tls-crypt取代tls-auth，或用static keys（只能一对一，可开启多个实例）或obfsproxy混淆（只支持tcp）
openvpn v2.4之后有tls-crypt可以取代tls-auth
openvpn tls握手包被识别，obfsproxy混淆又不支持udp（只支持tcp），static keys又只能一对一（可以开多个实例）。。。
----------------------------------
<j> I'm using tls-crypt now, and I found there's only one client can
    connect to the server at the same time, why?
<o> j: tls-crypt does not prevent multiple client from connecting,
    therefore the issue is unrelated to tls-crypt  
<o> are you using client/server mode?
<j> o: yes
<o> with different certs per client?
<j> o: same certs
<o> j: this is not really recommandable...but if you really want that
<o> you must allow CN duplicates
<o> otherwise the server won't allow more than one client with the same CN
<o> j: check --duplicate-cn in the manpage
<j> o: ok
<j> o: I add "duplicate-cn" in server.conf and now I can use two
    clients at the same time, :)  
<o> j: however, unless you have a real reason, it is better to use
    multiple certificates  
<o> so you can block each single client in case of troubles
<j> o: yes, I'm kind of lazy
<o> :P

------------------------------------------------------
#################  tls-crypt 取代 tls-auth #######################
#grep -v '#' /etc/openvpn/server.conf |grep -v ';'
/etc/openvpn/server.conf
port your-server-port
proto udp
dev tun
ca /etc/openvpn/easy-rsa/keys/ca.crt
cert /etc/openvpn/easy-rsa/keys/server.crt
dh /etc/openvpn/dh2048.pem
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 10.8.0.1"
keepalive 10 120
tls-crypt static.key
cipher AES-256-CBC
auth SHA512
comp-lzo
user openvpn_server
group nogroup
persist-key
persist-tun
status openvpn-status.log
verb 3
duplicate-cn   #允许多个clients用同一个证书，默认一个client只能用一个证书，第二个client用相同的证书会中断第一个client的连接
-----------------------------------------------------
############### tls-crypt 取代 tls-auth #######################
grep -v '#' client.ovpn |grep -v ';'
~/openvpn/client.ovpn
client
dev tun
proto udp
remote your-server-ip your-server-port
resolv-retry infinite
nobind
user nobody
group nogroup
persist-key
persist-tun
ca ca.crt
cert client1.crt
key client1.key
remote-cert-tls server
tls-crypt static.key
cipher AES-256-CBC
auth SHA512
comp-lzo
verb 3
auth-nocache
-----------------------------------------------------------------------
使用tls-crypt取代tls-auth, openvpn v2.4之后才有, 
openvpn --genkey --secret static.key    生成key file时使用--secret参数把密钥写入文件
在server.conf和client.ovpn里"tls-crypt static.key" 取代tls-auth
https://github.com/jimmielin/ovpn-ipv6-setup
tls-crypt是针对xor混淆补丁创建出来的, 但仍可能被流量检测侦查到特征码
The tls-crypt option isn't safe from traffic analysis as it doesn't hide all elements of the control channel, notably the opcodes, session/packet IDs and timestamp.
http://svn.dd-wrt.com/ticket/3450
"tls-crypt can still be blocked because it is not obfuscation. just a different way of doing th handshake (encrypting the payload)"

debian jessie上还是v2.3。。。用jessie-backports更新v2.4
https://backports.debian.org/Instructions/
vim /etc/apt/sources.list
deb http://httpredir.debian.org/debian jessie-backports main contrib non-free

aptitude update
aptitude -t jessie-backports install "package"
或者apt-get install -t jessie-backports openvpn

2.4.0 首选使用ip v6,移除了tls-remote使用verify-x509-name取代
把tls-auth注释掉, tls-cipher是用于TLS-session可以和tls-crypt一起使用，也可以不使用
添加tls-crypt static.key
------------------------------------------------------------------------
使用static keys只能支持一对一，如果想要多个连续，需要创建多个openvpn 实例，
用不同的server.conf 里面tun和port需要不一样，比如"dev tun0" "dev tun1"  "port 23822" "port 21232"
然后用openvpn --config server1.conf 和server2.conf这种分别指定不同server.conf来启动多个openvpn instances
-----------------------------------------------------------------------------------
shadowsocks 全局代理需要用iptables重定向到tunnel 或者在openwrt路由器上， shadowsocks支持混淆obfuscation,shadowsocks的server和client都支持混淆
openvpn 全局代理，tls握手特征包以被检测到，
1. 使用static key取代tls握手,但是这种static key只能用于一对一，即同一时刻只能有一台机器使用openvpn连服务器
2. 使用tls,可同时多个机器使用Openvpn,tcp使用obfsproxy混淆tls握手包, 但是udp无法使用obfsproxy,或许可以尝试github上的udp-proxy
openvpn本身不支持混淆，只能用第三方工具实现，包括server和client都不支持，但可以给源码打补丁编译来支持，
openvpn tls握手包被识别，obfsproxy混淆又不支持udp（只支持tcp），static keys又只能一对一（可以开多个实例）。。。
android上并没有支持obfsproxy的openvpn客户端，所以在android上最好还是使用static key的openvpn，但此时别的设备无法使用openvpn
android上有支持static keys的openvpn for android 0.6.65, https://github.com/schwabe/ics-openvpn, 不要手动创建profile总提示ip v4 error
点+ 然后点import选中client.static.ovpn，这样导入创建static keys的profile,实际上只有TLS Auth File设为static.key,并且Type设为Static Keys但
Type下面的Certifcate Revoke List(optional)不选择任何数据
3. 使用tls-crypt取代tls-auth, v2.4版本以后才支持

https://openvpn.net/index.php/open-source/documentation/security-overview.html
openvpn有2种验证模式 static key使用预先分享的静态密钥  tls使用ssl/tls加证书验证和密钥交换
static keys这种应该经常更换，比如一周一换或一月一换
https://openvpn.net/index.php/open-source/documentation/miscellaneous/78-static-key-mini-howto.html
server 10.8.0.1    client 10.8.0.2  udp port 1194
i.generate a static key:  openvpn --genkey --secret static.key
    copy the key to server and client
ii. server config: /etc/openvpn/server.conf 注释掉 ca cert key server tls-cipher push redirect and dhcp
    dev tun
    port your-server-port
    proto udp
    ifconfig 10.8.0.1 10.8.0.2
    secret static.key
    comp-lzo
    keepalive 10 60
    ping-timer-rem
    persist-tun
    persist-key
    user nogroup #grep 'nogroup' /etc/group archlinux上有nogroup, debian上有nobody,它们同时是user和group, nobody和nogroup和其它non-root账户一样的权限
    group nogroup #或直接创建opengroup  useradd -r -s /bin/nologin opengroup  然后发现连接不上，这nogroup还是不能用，这user和group选项还是不能用!
    daemon
    status /etc/openvpn/openvpn.status.log
    log /etc/openvpn/openvpn.log
    verb 4
    push "redirect-gateway def1 bypass-dhcp"      
    ###user nogroup和group nogroup选项用了就无法连接，不知道是因为nogroup不存在还是因为nogroup权限太低无法添加路由,不用这选项就可以连接成功
----------------------------------------------------------
########################### static keys ##################################
dev tun
port your-server-port
proto udp
ifconfig 10.8.0.1 10.8.0.2
secret static.key
comp-lzo
keepalive 10 60
ping-timer-rem
persist-tun
persist-key
cipher AES-256-CBC
auth SHA512
status /etc/openvpn/openvpn.status.log
log /etc/openvpn/openvpn.log
verb 4
push "redirect-gateway def1 bypass-dhcp"
# success    from: https://www.zhukun.net/archives/7625
然后systemctl start openvpn 或者openvpn --config /etc/openvpn/server.conf
再运行包含规则的iptables.openvpn.sh
-----------------------------------------------------------

iii. client config: client.ovpn  注释掉 client ca cert key ns-cert-type tls-cipher
    remote server-domain-or-ip your-port
    dev tun
    proto udp
    port your-server-port
    ifconfig 10.8.0.2 10.8.0.1
    secret static.key
    comp-lzo
    keepalive 10 60
    ping-timer-rem
    persist-tun
    persist-key
    user nogroup
    group nogroup
    daemon
    redirect-gateway def1
    dhcp-option DNS 10.8.0.1

-----------------------------------------------------
#######################   static keys #############################
remote your-server-ip your-server-port
proto udp
dev tun
ifconfig 10.8.0.2 10.8.0.1
secret static.key
comp-lzo
keepalive 10 60
persist-tun
persist-key
cipher AES-256-CBC
auth SHA512
redirect-gateway def1
dhcp-option DNS 10.8.0.1
# success   然后把/etc/resolv.conf改为nameserver 10.8.0.1
运行sudo openvpn --config ./client.ovpn
--------------------------------------------------------

如果openvpn server在子网192.168.4.0/24里，而想让client访问这个子网的其它机器
就在client config里添加 route 192.168.4.0 255.255.255.0，在server上添加10.8.0.2到server的路由到server's LAN gateway，并在server上开启ip forwarding
https://community.openvpn.net/openvpn/wiki/GettingStartedwithOVPN
google 'openvpn tls static key' 'openvpn tls 握手 特征' 
---------------------------------------------------------
openvpn连接后，需要设置/etc/resolv.conf的dns服务器为内网地址10.8.0.1
---------------------
https://community.openvpn.net/openvpn/wiki/TrafficObfuscation
server: obfsproxy --log-file=obfsproxy.log --log-min-serverity=info obfs2 --dest=127.0.0.1:1194 --shared-secret=<some-random-key> server 0.0.0.:21194
       假设openvpn的为tcp 1194端口, obfsproxy监听tcp 21194, some-random-key是至少32个随机字符
        /etc/openvpn/server.conf添加port 1194以防没开
client: obfsproxy --log-file=obfsproxy.log --log-min-serverity=info obfs2 --shared-secret=<some-random-key> socks 127.0.0.1:10194
        openvpn.client.conf里添加
        socks-proxy-retry
        socks-proxy 127.0.0.1 10194
        remote <your-server> 21194

openvpn虽然支持tcp和udp两种方式，但是udp速度更快，所以我用的是udp模式，but obfsproxy只支持tcp，需要udp over tcp tunnel

google下发现有个 https://github.com/sagan/udp-proxy
server: udp-server.py -s server-ip -p openvpn-port -l listen-port -k "password"
vim /etc/openvpn/server.conf(错了，应该是客户端的client.ovpn)
注释掉redirect-gateway def1
添加mssfix 1422
route server-ip 255.255.255.255 net_gateway
route 0.0.0.0 128.0.0.0
route 128.0.0.0 128.0.0.0
client: udp_client.py -s server-ip -p server-listen-port -l local-listen-port -k "password"
vim client.openvpn.config  remote server-ip port change to remote 127.0.0.1 local-listen-port
然后openvpn --config ./client.ovpn 
BOOM! vps网络配置搞坏了，ping都没反应 ssh也是

用网页登录，重置root密码，进入网页版console
ifdown eth0
ifup eth0
iptables -F
iptables -L
重置了vps的eth0网络，然后网络正常工作了

mssfix 1422 route ...应该是在client.ovpn里设置而不是server的server.conf！
------------------------------------------------------------
server: obfsproxy obfs3 --dest 127.0.0.1:22  server 0.0.0.0:22222
client: obfsproxy obfs3 --dest 111.111.111.111:22222  client 127.0.0.1:12222
        ssh -p 12222 root@127.0.0.1
---------------------------------------------------------------------------
https://www.atgfw.org/2015/09/obfsproxy.html?m=1
obfsproxy是tor的流量混淆插件，这个插件不仅可以用在tor网桥上，还可以用在openvpn ssh等其它应用上
推荐用pip安装，从debian源安装的缺少scramblesuit特性
    pip install obfsproxy service_identity
直接运行obfsproxy查看支持的混淆方式，而archlinux源装的支持scramblesuit
一般使用obfs3或scramblesuit, scramblesuit是obfs3的加强版，使用密码加密，使gfw无法模拟obfs客户端来探测被混淆的是什么

scramblesuit的密码必须为base32字符 ABCDEFGHIJKLMNOPQRSTUVWXYZ234567 且必须为32位

server: obfsproxy  --data-dir ~/.obfs  scramblesuit --dest 127.0.0.1:22 --password ABCDEFGHIJKLMNOPQRSTUVWXYZ234567 server 0.0.0.0:12222
client: obfsproxy scramblesuit --dest 111.111.111.111:12222 --password ABCDEFGHIJKLMNOPQRSTUVWXYZ234567 client 127.0.0.1:22222
        ssh -p 22222 root@127.0.0.1

server上ssh端口是22,然后obfsproxy监听端口12222,  client上obfsproxy连接服务器的12222端口，并监听本地22222端口,然后ssh连接本地的22222端口

如果是用于翻墙的ssh, 就在client运行 ssh -N -D 7070 user@127.0.0.1 -p 22222
windows版本的obfsproxy.exe可以从Tor里面提取,如果无法运行就安装python

--------------------------------------------------------------------------------
1. obfsproxy from tor
2. obfuscated-openssh

握手时的static signatures会被识别为ssh or vpn


openvpn, ssh tunnel, tor, 使用deep packet inspection检查openvpn和tor连线handshake时包，然后中断连线

pptp无加密 l2tp/ipsec固定端口 openvpn握手封包被检测 ssh同


normal:  A用本地随机端口连接B的22端口 ssh
obfsproxy: A用本地随机端口连接本地obfsproxy监听端口，然后这个端口连B的obfsproxy监听端口，再由这个端口连接B的22端口  ssh

server: sudo obfsproxy --log-min-serverity=info --log-file=/tmp/ofs-log obfs3 --dest=127.0.0.1:22 server x.x.x.x:443
client: obfsproxy --log-min-serverity=info obfs3 socks 127.0.0.1:4321
        ssh -v -o "ProxyCommand /bin/nc.openbsd -x 127.0.0.1:4321 %h %p" -p 443 user@server.net

https://bbs.archlinux.org/viewtopic.php?id=209945
