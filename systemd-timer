启动就执行一次,用OnBootSec=
----------------------------------------------------
[Timer]
WakeSystem= yes
###当定时器到达触发的时间点时， 唤醒正在休眠的系统并阻止系统进入休眠状态。 注意， 此选项仅确保唤醒系统， 而不关心任务执行完成之后是否需要再次休眠系统。 默认值为 no
OnCalendar=
定义基于挂钟时间(wallclock)的日历定时器，值是一个日历事件表达式，这是与传统cron任务类似的定时器
OnActiveSec= 相对于该单元自身被启动的时间点；
OnBootSec= 相对于机器被启动的时间点， 也就是内核开始运行的时间点；
OnStartupSec= 相对于 systemd 被首次启动的时间点， 也就是内核启动init进程的时间点；
OnUnitActiveSec= 相对于匹配单元最后一次被启动的时间点；
OnUnitInactiveSec= 相对于匹配单元最后一次被停止的时间点；
us(微秒), ms(毫秒), s(秒), m(分), h(时), d(天), w(周)
------------------------------------------------------------------------
systemd timer需要有同名的service, 然后在service里调用程序ExecStart
但enable的却是timer, timer设定时间,service设定执行程序

systemd mount挂载后如果想运行别的指令,也需要同名service,然后在service里
Requires= .mount然后ExecStart执行想要执行的指令
enable的是service, mount设定挂载位置, service设定挂载后执行程序

type=  oneshot,执行一次就退出,  simple,正常执行

http://www.linuxidc.com/Linux/2014-10/107923.htm
假设你有一个脚本叫：/usr/local/bin/myscript ，你想要每隔一小时就运行一次。
myscript.service
[Unit]
Description=MyScript
[Service]
Type=simple
ExecStart=/usr/local/bin/myscript
注意，务必将Type变量的值设置为"simple"而不是"oneshot"。使用"oneshot"使得脚本只在第一次运行，之后系统会认为你不想再次运行它，从而关掉我们接下去创建的定时器(Timer)。jo
myscript.timer
[Unit]
Description=Runs myscript every hour
[Timer]
# 首次运行要在启动后10分钟后
OnBootSec=10min
# 每次运行间隔时间
OnUnitActiveSec=1h
Unit=myscript.service
[Install]
WantedBy=multi-user.target

授权并运行的是timer文件，而不是service文件。
systemctl start myscript.timer
systemctl enable myscript.timer
-----------------------------------------------------
在同一个Timer上运行多个脚本
现在我们假设你在相同时间想要运行多个脚本。这种情况，你需要在上面的文件中做适当的修改
Service 文件
像我之前说过的那样创建你的service文件来运行你的脚本，但是在每个service 文件最后都要包含下面的内容:
[Install]
WantedBy=mytimer.target
如果在你的service 文件中有一些依赖顺序，确保你使用Description字段中的值具体指定After=something.service和Before=whatever.service中的参数。

另外的一种选择是(或许更加简单)，创建一个包装脚本来使用正确的顺序来运行命令，并在你的service文件中使用这个脚本。
Timer 文件
你只需要一个timer文件，创建mytimer.timer，像我在上面指出的。
target 文件
你可以创建一个以上所有的脚本依赖的target文件。
mytimer.target
[Unit]
Description=Mytimer
# Lots more stuff could go here, but it's situational.
# Look at systemd.unit man page.
授权 / 启动
你需要将所有的service文件和timer文件授权。
systemctl enable script1.service
systemctl enable script2.service
...
systemctl enable mytimer.timer
systemctl start mytimer.service
