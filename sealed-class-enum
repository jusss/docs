
sealed class, union type, enum type,
they just all simulate for Sum type

sealed class vs enum
Sealed classes are used for representing restricted class hierarchies, 
when a value can have one of the types from a limited set, but cannot have any other type. 
They are, in a sense, an extension of enum classes

for example, an enum has Monady, Tuesday, ... Sunday value,
if you declare a value is an enum, then the value must be one of Monady, Tuesday ... Sunday,
it can't be others, so sealed classes too
if you define a sealed class A, and make subclass B and subclass C inherit A,
then when pass a value declared as A, this value only can be B or C 

https://kotlinlang.org/docs/reference/sealed-classes.html
sealed class Expr
data class Const(val number: Double) : Expr()
data class Sum(val e1: Expr, val e2: Expr) : Expr()
object NotANumber : Expr()

fun eval(expr: Expr): Double = when(expr) {
    is Const -> expr.number
    is Sum -> eval(expr.e1) + eval(expr.e2)
    NotANumber -> Double.NaN
    // the `else` clause is not required because we've covered all the cases
}

A sealed class is abstract by itself, it cannot be instantiated directly and can have abstract members.

Sealed classes are not allowed to have non-private constructors (their constructors are private by default).
