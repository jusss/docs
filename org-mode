http://blog.sina.com.cn/s/blog_818b48820101pmmu.html
http://www.cnblogs.com/qlwy/archive/2012/06/15/2551034.html
1 引子
Org只不过是一个工具，它的主要应用是：

做笔记
管理日程
作为文本标记语言
和其他所有工具一样，到底要不要使用，用哪个功能，这完全取决于个人的需求。别人吹得神乎其神的东西，对你来说它可能是多余的或者干脆就是垃圾。比如说，如果建议MS Office专家去用Org做笔记，他会觉得你很无聊；习惯用手机管理日程的人会觉得Org的日程管理纯属多余；HTML/XML高级用户可能会觉得Org作为一种标记语言使用实在太小儿科。

我很少做笔记，用文本标记语言的机会也很少，所以主要关心org的日程管理功能。学后有两个感想，一是Org功能虽强并不是神，二是学用Org其实也简单。学习方法是： 先看懂别人写的文本，然后模仿着写出类似的东西，有空再学一些快捷键改几个Emacs参数。

Emacs键盘命令的约定表示方法：

C 代表 Ctrl 键
M 代表 Alt 键
S 代表 Shift 键
以上三个按键单独按下没有意义，用 - 号表示它们搭配使用的按键
用空格连接的一系列符号表示顺序按下符号所代表的按键
其他符号： LEFT/RIGHT/UP/DOWN 分别代表的左右上下方向键， TAB 即 Tab 键， RET 代表 Enter 键
例如：

C-x 表示同时按下Ctrl和x字符键
C-S-TAB 表示同时按下Ctrl, Shift和Tab键
M-x org-mode 表示先同时按下Alt和x字符键，再键盘输入org-mode字符串
C-x C-s 表示先同时按Ctrl和x字符键，然后同时按下Ctrl和s字符键
C-c C-e hh 表示先同时按Ctrl和c字符键，然后同时按下Ctrl和e字符键，最后键盘输入hh
2 看懂Org文档
返回目录

婴儿学说话都是从模仿开始的，这个方法对所有学习应该都有效。学习org-mode不妨先看看别人写的东西。org-mode撰写的文档可以用任意文本编辑软件打开，最简单的org文档看起来是这样的：


* Introduction
** Summary
Org is a mode for keeping notes, maintaining TODO lists, and doing project planning with
a fast and effective plain-text system. 
....
** Installation
Org is part of recent distributions of GNU Emacs, so you normally don’t need to install it.
If, for one reason or another
** ...
* Document structure
Org is based on Outline mode and provides flexible commands to edit the structure of the
document.
** Outlines
...
这些文本只有两种元素：标题和普通段落。 以 * 符号开始的行表示该行为标题。

复杂一些的org文档可能看起来是下面这样的：


# -*- org -*-
#+TITLE: org-mode 备忘录
#+AUTHOR: ZGUANG@LZU
#+STARTUP: content
#+STARTUP: indent
#+TODO: TODO STARTED | DONE

<<目录位置>>
* 列表
  + 选项1
  + 选项2

* 表格
#+TBLNAME: 简单表格
| Name  | Value  | SD   |
|-------+--------+------|
| T1    | 1.2    | 0.14 |
|-------+--------+------|
| T2    | 2.3    | 0.11 |

* STARTED [80%] 超链接
** 网址链接
[[http://www.gnu.org/software/emacs/][Download and install Emacs]] 
** 文件链接
[[file:c:/windows/desktop.ini][桌面配置文件]]
** 内部链接
[[目录位置][返回目录]]
** TODO 其他链接

* 代码块              :@待续:
#+BEGIN_SRC Emacs-lisp
 (setq-default tab-width 4)  ;设置TAB宽度为4字符
#+END_SRC

* TODO COMMENT 其他内容
被注释的标题所包含的所有内容在文件导出时不会被显示
这些是普通文本，内容比飞机场还平坦，英文称为plain-text，比中文名称直观。但是这么平坦的内容如果粘贴和保存为文本文件，用Emacs打开，情况就不一样了：不仅有颜色，还有超链接。再用 C-c C-e hh 命令转成HTML文档然后打开，那就更不一样了（ 自己试试 ）。

上面的文本包含了些什么？虽然没有囊括org-mode的全部物件，但至少展示了几个方面的东西：

以 # 号后加一空格开始的行表示注释，文件导出时这些内容不被导出，上面第一行就是。
以 #+ 符号开始的行用于设置文档参数或内容属性，比如文档的标题、作者，org-mode打开时文档的呈现状态等。
用 [[]] 括起来的内容表示外部链接
用 <<>> 括起来的内容表示文档的内部链接
以 * 符号开始的行，表示该行为标题。
标题内容前的 TODO 标记是待办任务的标记符号。
标题行后面两个 : 符号间的内容表示标签（ TAG ）。
标题行如果标题文本前有 COMMENT 标记表示该标题下的所有内容为注释。
位于 #+BEGIN_XXX 和 #+END_XXX 之间的内容为特殊文档块，如代码块、例子、引用等。
虽然东西不少，但对某人来说不是所有的都要用到，所以建议用到了再去了解。

3 进入Org模式
返回目录

安装Emacs的步骤就不说了，到这地步相信都有了一定的基础。直入正题吧：

打开后缀名为org的文件自动进入org-mode模式
在init.el配置文件中设置某类文件的编辑模式为org，如txt类文件：

(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
用Emacs打开文件后使用主模式选择命令（ M-x org-mode ）
任意文件名，如果文件的第一个非空行包含： -*-org-*- ，用Emacs打开该文件后会自动使用org-mode模式。
后面这种方式对于使用Emacs编辑程序文件尤其方便，无需改变文件的后缀名。

4 标题和基于标题的编辑
标题是Org组织文档的基础，它在Org中的作用怎么强调都不过分。要用好Org-mode首先要学会标题的定制和使用，必须的，其他杂七杂八的东西都可以暂缓，有些内容甚至可以当它们不存在。
4.1 设定标题
返回目录

对于传统意义的标题，Org的设定非常简单：在行首加星号，星号与标题文字之间至少有一个空格，星号的数量表示标题的级别，方法简单明了。你不用为字体、行间距、缩进等设置而烦恼，专心做自己的事情。事实上标题是Org文档句法中唯一不需要通过上下文关系就能确定的内容：一行文本是不是标题只需要看行首字符。例如：


* 一级标题
** 二级标题
*** 三级标题
正文内容
* 其他一级标题
然而，为使标题适应更广泛的应用（不仅仅是表明文档的结构层次），Org对其进行了较复杂的定义。它的完整语法为：


STARS KEYWORD PRIORITY TITLE TAGS
其中：

STARS 即星号，这是一个标题唯一必要的内容，其他（包括标题名称）都可以省略。
KEYRORD 为TODO关键词，大小写敏感。
PRIORITY 为优先级选项，为#号加一个字符并用方括号括起来，如 [#A]
TITLE 即为实际的标题文本
TAGS 为标签。
下面是一个完整标题的例子：


** TODO [#2] 优先级为2的待办事项       :@家庭作业:
虽然TODO关键词、优先级和标签属于标题的成分，但由于设定较复杂而且功能重要，有关内容将在后面介绍。

4.2 基于标题的文档编辑
返回目录

Org基于标题的文档编辑方式允许用户在非常简洁的显示模式下对某个或多个标题下的所有内容进行复制、粘贴、移动等操作，相当方便，真正实现了标题在文档管理中的组织者作用。

4.2.1 术语约定
标题：仅指标题定义行
子标题：大标题下属的小标题
标题树：包括标题、子标题及其下属的所有文本
大纲：或文档轮廓，即全部标题，是一种显示模式
大纲折叠：隐藏子标题树
大纲展开：分级显示子标题树
4.2.2 在标题间移动光标
快捷键	动作
C-c C-p/n	移动到上/下一个标题
C-c C-b/f	移动到同级别的上/下一个标题
4.2.3 大纲的折叠与展开
手动操作：
快捷键	动作
TAB	局部命令，循环使用可以折叠/展开光标所在位置的标题树
S+TAB	全局命令，循环使用可以折叠/展开整个文档的标题树
设定文档属性：
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
4.2.4 标题编辑

快捷键	动作
M-LEFT/RIGHT	升级/降级当前标题，不允许有子标题的存在
M-S-LEFT/RIGHT	升级/降级标题树，即标题树内的各级标题相应升/降级
M-UP/DOWN	在同级标题间上/下移标题树，不能跨级别移动
M-RET	在当前标题后插入同级标题符号（即换行符和星号）
C-RET	在当前标题树后插入同级标题符号
M-S-RET	在当前标题后插入同级TODO标题
C-S-RET	在当前标题树后插入同级TODO标题
4.2.5 使用Tips
Org-mode很多编辑命令的使用与光标所处的位置有关，同一个键盘命令如果光标位于不同文本环境可能会有不同的作用，这些命令称为局部命令。例如 M-RET 命令，如果光标位于某个标题行内，它的作用就是“在当前标题后插入同级标题符号”，但如果光标位于普通文本行内，它的作用就是把当前文本行设为标题（标题级别和前一个标题一致）。

5 用Org管理待办任务
Org扩展了标题的定义，增加了关键词、优先级和标签等元素。这些元素不仅使标题在文档组织发挥更重要的作用，标题的功能也得到了扩展。Org对日程的管理就是基于标题进行的：只要会设定标题就可以用Org管理日程。虽然道理是这样，但要熟练使用Org的日程管理功能还掌握比较多的东西。

5.1 定制任务和状态
5.1.1 设置TODO关键词
返回目录

TODO关键词是用来表示任务状态或类型的词。Org默认的TODO关键词只有两个：TODO和DONE，但很容易自定义其他的关键词。TODO关键词分为两种。一种是状态关键词，比如“等待”、“开始”和“完成”等，事件处理的过程中其处理状态按关键词顺序从前往后转换。另一种是类型关键词，按事件的轻重缓急分为“紧急”、“优先”、“普通”和“完成”等类型，但事件只有未完成和完成两种状态，所以处理结束后将直接转到“完成”类型，而“紧急”、“优先”和“普通”这些类型之间不能相互转换。

5.1.1.1 在Org文件中定义TODO关键词
在Org文件中定义的TODO关键词仅适用于当前文件。状态关键词使用 #+SEQ_TODO: 定义，类型关键词使用#+TYP_TODO: 定义。可以定义多系列的TODO关键词，可以使用中文关键词。


#+TYP_TODO: 工作(w!) 学习(s!) 休闲(l!) |
#+SEQ_TODO: PENDING(p!) TODO(t!) | DONE(d!) ABORT(a@/!)
“|”用来分隔“未完成”和“完成”两种状态的关键词，前面为未完成项，后面为完成项。如果没有“|”符号，最后一个关键词将被设为完成项，其余为未完成项。
关键词后括号内的字母为快捷选择键，当使用 C-c C-t 设置或改变当前标题的TODO状态或类型时将出现选项菜单，此时可以用快捷键进行选择。
括号内的“!”表示时间戳，设置或改变到该状态时（直接输入关键词不算）将同时插入当前时间
括号内的“@”表示切换到该状态时需要输入文字说明，比如任务取消、流产或失败的原因。
输入后将光标置于该行内使用 C-c C-c 命令可使该定义立刻生效。
5.1.1.2 在Emacs配置文件中定义TODO关键词
如果经常使用Org进行日程管理，应该在Emacs配置文件中定义常用的TODO关键词，这些定义对所有文件都适用。方法是设置 org-todo-keywords ，如：


(setq org-todo-keywords
  '((type "工作(w!)" "学习(s!)" "休闲(l!)" "|")
    (sequence "PENDING(p!)" "TODO(t!)"  "|" "DONE(d!)" "ABORT(a@/!)")
))
5.1.1.3 改变TODO关键词的外观
仅通过文字对于事件进行分类总嫌苍白无力，能用不同颜色的标签对日程表的事件进行强化分类就会好得多。这一功能可以通过设置TODO关键词的外观变量 org-todo-keyword-faces 实现。如：


(setq org-todo-keyword-faces
  '(("工作" .      (:background "red" :foreground "white" :weight bold))
    ("学习" .      (:background "white" :foreground "red" :weight bold))
    ("休闲" .      (:foreground "MediumBlue" :weight bold)) 
    ("PENDING" .   (:background "LightGreen" :foreground "gray" :weight bold))
    ("TODO" .      (:background "DarkOrange" :foreground "black" :weight bold))
    ("DONE" .      (:background "azure" :foreground "Darkgreen" :weight bold)) 
    ("ABORT" .     (:background "gray" :foreground "black"))
))
5.1.2 标题型任务和子任务
返回目录

Org主要通过标题的 TODO 关键词对待办任务（下面称为任务）进行管理，由于标题是分级的，所以这种管理方式很自然地支持子任务：子标题即子任务。Org的任务定义跟标题定义一样简单，有三种方式：

直接在标题中的 KEYWORD 位置输入 TODO 关键词
使用 C-c C-t 快捷键呼出关键词选择菜单
使用 S-LEFT/RIGHT 快捷键快速设置 TODO 关键词
当然也可以在标题编辑时直接使用 M-S-RET 或 C-S-RET 插入 TODO 标题。

5.1.3 非标题型子任务
Org的任务主要由标题定制，但也提供了非标题型子任务的设置。对于以“[ ]”开头的列表， Org把它们当作复选框，复选框各选项的选择状态表示完成状态。例如：

研究内容 [2/4]：
[X] 研究内容1
[-] 研究内容2 [1/2]
[ ] 小内容1
[X] 小内容2
复选框有三种状态：未完成、完成和中间状态（如上），可以使用快捷键 C-c C-c 或 C-c C-x C-b 修改。

Org自动将复选框列表的完成状态纳入上一级任务的监控，具体使用说明参看任务进度监控。

5.2 任务优先级
返回目录

你可以设置足够的TODO关键词和外观用来区分待办任务的类型、状态和优先级，但是这不仅使任务设置复杂化，还会导致任务间的关系十分混乱。Org为任务优先级留有专门的位置，即标题的 PRIORITY 位置。 Org预定义了任务的三个优先级即 [#A], [#B] 和[#C] ，用于区分类型任务的优先级别。如果不设置任务优先级，默认为B级。

不同优先级的任务在产生日程表时按优先级别先后排列，而其他时候则没有任何差别。为了充分发挥任务优先级的作用，最好在Emacs配置文件中对优先级的范围和外观进行自定义，例如：


;; 优先级范围和默认任务的优先级
(setq org-highest-priority ?A)
(setq org-lowest-priority  ?E)
(setq org-default-priority ?E)
;; 优先级醒目外观
(setq org-priority-faces
  '((?A . (:background "red" :foreground "white" :weight bold))
    (?B . (:background "DarkOrange" :foreground "white" :weight bold))
    (?C . (:background "yellow" :foreground "DarkGreen" :weight bold))
    (?D . (:background "DodgerBlue" :foreground "black" :weight bold))
    (?E . (:background "SkyBlue" :foreground "black" :weight bold))
))
设置TODO关键词和优先级后标题的外观如下：
在标题上使用 S-UP/DOWN 可以选择和改变任务的优先级。


5.3 任务标签
对于Org老手来说，用TODO关键词和优先级区分任务就足够了。如果不能满足需要，还可以使用标签。在Org中，标签定义于标题行末端，位于两个或两个以上冒号之间，它为待办任务提供了进一步的分类方法。
5.3.1 标签命名规则
返回目录

位置：标签只能在各级标题的行末端定义，即只有标题文字可以拥有标签
命名：标签的名字可以是包含字母、数字、下划线 _ 或@符号的字
包含在一对“:”号之间，如：

* HEADLINE 1                 :label1:
一个标题可以有多个标签名称，定义方法如：

** HEADLINE 2                :label2:label3:
5.3.2 标签编辑命令
标签可以直接在标题后手工输入，Org也提供了快捷的编辑命令：

在文内使用 C-c C-q 命令，输入标签名称并回车，标签自动产生并放置到该文所属标题的标签列
如果光标在一个标题内，使用 C-c C-c 命令的作用和 C-c C-q 一样，但如果不在光标不在标题内则不起作用。
在合适的位置再次使用 C-c C-q 或 C-c C-c 即可对现有标签名称进行修改。
5.3.3 预定义标签
和TODO关键词一样，标签可以预定义并设置快捷选择键，在使用标签编辑命令时将弹出选择菜单：

在Emacs配置文件中定义的标签应用于所有文件。例如：

(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
在org文件中定义该文件使用的标签。例如：

#+TAGS: @work(w) @home(h) @tennisclub(t) laptop(l) pc(p)
5.3.4 标签的继承特性
设置了标签的任务能自动将所设标签属性传递给子任务，称为标签的继承性。这一特性使标签尤其适用于任务的分类。


* TODO 任务1           :紧急任务:
** TODO 子任务1        :特急:
** TODO 子任务2
子任务1和子任务2无需显式贴上 :紧急任务: 就自然拥有该标签，子任务1实际有两个标签 :紧急任务:特急: 。 
标签外观也可以修改，方法同 TODO 关键词的外观修改差不多，设置  org-tag-faces 变量。

5.4 任务间的依赖关系
返回目录

5.4.1 任务属性
标题不可能包罗万象，一些任务属性如任务ID不能通过任务标题设定。这些属性可以通过Org文档的内容属性设定.属性定义以PROPERTIES名称开头，以END结束，每项内容均使用两个冒号括起来，如：


* TODO 今日事物
   :PROPERTIES:
   :ID: today-todos
   :ORDERED: t
   :COOKIE_DATA: todo recursive
   :END:
5.4.2 简单任务关系
现版Org-mode实现了两种简单任务关系的设置：

如果子任务没有全部完成，主任务将不能设置为 DONE 状态
如果前面有其他任务没有完成，后面的任务将不能设置为 DONE 状态
要使用第一种依赖关系需要打开 org-enforce-todo-dependencies ，即在Emacs配置文件中设置：


(setq org-enforce-todo-dependencies t)
要使用第二种依赖关系则需要在主任务下打开任务的 ORDERED 属性，例如：


* TODO 请客吃饭
   :PROPERTIES:
   :ORDERED: t
   :END:
** TODO 确定客人时间
** TODO 订饭店
** TODO 点菜
** TODO 买单
请客吃饭下的各项工作得按顺序去做。

5.4.3 复杂依赖关系
对于大型项目，各项任务间的关系错综复杂，利用上面的简单任务关系根本无法进行有效项目进程规划。使用org-depend.el 程序（自己查找下载）对这类项目的日程安排很有帮助。该程序附带了应用例子，这里只介绍它的功能（由程序内的说明翻译而来）。

5.4.3.1 触发事件
一个任务如果具有 TRIGGER 属性，而且属性值为 chain-siblings(KEYWORD) 字串，当该任务的状态转到DONE 时将触发事件：该任务的下一个同级任务转为 KEYWORD 状态并获得相同的 TRIGGER 属性
一个任务如果具有 TRIGGER 属性，而且属性值为 chain-siblings-schedualed 字串，当该任务的状态转到DONE 时将触发事件：该任务的下一个同级任务获得相同的计划时间并获得相同的 TRIGGER 属性
一个任务如果具有 TRIGGER 属性，而且属性值为 chain-find-next(KEYWORD[,OPTIONS]) 字串，当该任务的状态转到 DONE 时将触发以下事件：
收集所有同级任务到一个临时列表，然后按照 OPTIONS 进行过滤和排序
列表中第一个任务的状态转为 KEYWORD 状态并获得相同的 TRIGGER 属性
OPTIONS 选项由逗号分隔，不能有空格，取值可以为： from-top, from-bottom, from-current, no-wrap, today-only, today-and-done-only, priority-up, priority-down, effort-up, effort-down
如果 TRIGGER 属性包含任何其他的字符串，这些字符串都被当成id处理，例如： XYZ(KEYWORD) ，org-mode将查找ID属性为 XYZ 的任务并将其状态该为 KEYWORD 状态。
5.4.3.2 阻止事件
如果一个任务具有 BLOCKER 属性，且属性值为 previous-sibling ，那么试图将该任务转到 DONE 状态时将检查上一个任务的状态。如果上一个任务的状态为 TODO ，当前任务的状态不能改变
如果一个任务具有 BLOCKER 属性，且属性值包含其他的字符串，这些字符串将被当成任务的ID。试图改变当前任务状态为 DONE 时org-mode将查找相应ID的任务，如果这些任务中有任何一个还不是 DONE 状态，当前任务的状态将不能改变
如果状态改变被阻止，该任务将被打上 :blocked: 标签，这样你可以使用 C-c & 找到阻止该事件的任务。
5.5 预约任务时间
5.5.1 Emacs日历
返回目录

Emacs提供了桌面日历，不仅附带有公共事件日志（节假日等），还可以帮助你管理预约事件和跟踪项目时间。Emacs日历使用独立的缓冲区和主模式（Calendar模式），执行 M-x calendar 命令即可打开并显示3个月的日历，当前月份居中。如果要打开特定时间的日历，用 C-u M-x calendar ，在提示符下输入年（数字）和月（名称）即可。鼠标键在日历模式下具有特殊意义：左键（Mouse-1）选定某天，中键（如果有，Mouse-2）弹出适用于整个日历的命令菜单，右键（Mouse-3）弹出适用于鼠标所指日期的菜单。键盘输入 q 直接退出日历（关闭日历窗口）。

下面只介绍和日程安排相关的日历操作，如果你觉得其他的一些用法如日出日落、月圆月缺、玛雅日历等也和你的日程安排有关，请查看 Emacs Manual 。

5.5.1.1 在日历中移动光标
移动标准时长:

命令	动作	变量
C-f	前移一天	calendar-forward-day
C-b	后移一天	calendar-backward-day
C-n	前移一周	calendar-forward-week
C-p	后移一周	calendar-backward-week
M-}	前移一月	calendar-forward-month
M-{	后移一月	calendar-backward-month
C-x ]	前移一年	calendar-forward-year
C-x [	后移一年	calendar-backward-year


转到周、月、年的开始或结束日期：

命令	动作	变量
C-a	到周的开始	calendar-beginning-of-week
C-e	到周的结束	calendar-end-of-week
M-a	到月的开始	calendar-beginning-of-month
M-e	到月的结束	calendar-end-of-month
M-<</td>	到年的开始	calendar-beginning-of-year
M->	到年的结束	calendar-end-of-year


转到指定日期：

命令	动作	变量
g d	到指定年月日	calendar-goto-date
g D	到某年的第几天	calendar-goto-day-of-year
g w	到某年的第几周	calendar-iso-goto-week
o	把某年某月居中	calendar-other-month
.	到今日(不居中）	calendar-goto-today
5.5.1.2 卷动日历
和移动鼠标有些差别。

命令	动作	变量
>	前卷一个月	calendar-scroll-left
<</td>	后卷一个月	calendar-scroll-right
C-v	前卷三个月（下一屏）	calendar-scroll-left-three-months
M-v	后卷三个月（上一屏）	calendar-scroll-right-three-months
5.5.1.3 使用农历
Emacs日历可以转换农历，不过现在你不需要自己去做了，下载使用cal-china-x 即可。下载后放到某个位置，如 .emacs.d/addons ，在Emacs配置文件中添加两行：


(add-to-list 'load-path "~/.emacs.d/addons")
(require 'cal-china-x)
5.5.1.4 节日和日志
为简单起见，凡在日历上标示的事件（节日、生日、纪念日或其他）下面都称为节日：

命令	动作
x	在日历窗口中标出节日
u	取消节日标记
h	显示当前日期的节日
a	列出当前日历（三个月）的所有节日
M-x holidays	在另一个窗口列出近3个月（以今天为中心）的所有节日
M-x list-holidays	在另一窗口列出设定的若干年内的所有节日


Emacs日历默认不标记节日，如果希望打开日历就能看到节日标记，设置一下：


(setq mark-holidays-in-calendar t)
公共“节日”很多，一些可能是你根本不care的，如果这些都出现在日历和日程表中，肯定很烦人。所以还得定制一下，只显示自己设定的日历事件，比如：


(setq my-holidays
    '(;;公历节日
      (holiday-fixed 2 14 "情人节")
      (holiday-fixed 9 10 "教师节")
      (holiday-float 6 0 3 "父亲节")
      ;; 农历节日
      (holiday-lunar 1 1 "春节" 0)
      (holiday-lunar 1 15 "元宵节" 0)
      (holiday-solar-term "清明" "清明节")
      (holiday-lunar 5 5 "端午节" 0)
      (holiday-lunar 7 7 "七夕情人节" 0)
      (holiday-lunar 8 15 "中秋节" 0)
      ;;纪念日
      (holiday-fixed 1 1 "儿子生日")
      (holiday-lunar 2 2 "老婆生日"  0)
      (holiday-lunar 3 3 "我的生日" 0)
))
(setq calendar-holidays my-holidays)  ;只显示我定制的节假日
其中：

holiday-fixed 用于设定公历事件
holiday-float 用于设定浮动公历事件
holiday-lunar 用于设定农历事件，各项的意义参考后面的 diary-float 说明。
holiday-solar-term 是一些预定义但还需要特殊计算的节日，如农历的24节气。
Emacs可以使用日志（Diary）方式管理日程，方法是设置 diary-file 。但用Org-mode就可以不用那种方式了，所以把它忽略。

5.5.2 Org-mode时间戳的组成
返回目录

时间戳由尖括号 <> 或方括号 [] 表示，前者为激活时间，后者为非激活时间（不加入日程表的时间）。括号内可以包括以下内容组成（按先后顺序）：

日期，如 2013-6-1
时间或时间范围，如 2:30pm 或 10:00-12:00
表示周期重复的字符串，如 +1w 表示每周重复
其他附加信息和特殊符号：
符号	意义
+0	今天
.	今天
+4d	今天算起，第4天
+4	同上
+2w	今天算起，第2周
++5	默认日期开始，5天后
+2tue	今天算起，第2个Tuesday


注意“今天”和“默认日期”所表示的意义是不同的，例如：

<2013-06-20 周四 .+1w> 表示这是一个周期性重复任务，每周四执行；但是如果某次任务的实际完成日期（ DONE 状态产生日期）是星期一，那么下一次任务就是一周后的星期一
<2013-06-20 周四 ++1w> 同样表示一个周期性重复任务，每周四执行；但不管任务实际完成日期是星期几，下一次任务的时间都固定为下个星期四
由两个断线“–”连接起来的两个时间戳表示时间段，如： <2013-06-25 周二>--<2013-06-26 周三>

除以上标准用法外，一些不规则时间戳可以使用Emacs日志风格的字符串表示，同样放在方括号或尖括号中。常用的有：

周年纪念，如毛泽东诞辰： %%(diary-anniversary 12 26 1893)
周期重复，如从6月1日开始每隔10天重复： %%(diary-cyclic 10 6 1 2013)
某些日期，用于组合不同的月、日、年，例如每年的3-5月的10号可以这么表示（t表示所有数值，这里表示所有年度）： %%(diary-date '(3 4 5) 10 t)
某月的第几个星期几，用浮动日期格式字符串 %%(diary-float month dayname index) 表示。其中 month为表示月份的整数（同样可以使用t表示所有月份）， dayname 表示星期几（0为Sunday）， index 为正数表示从前往后数，复数则相反。如5月的最后一个星期三表示为： %%(diary-float 5 3 -1)
5.5.3 产生时间戳
时间戳可以直接输入，但最好使用快捷命令（期间要调用Emacs日历）产生：

快捷命令	动作
C-c .	通过日历选择计划日期，如果在一个时间戳后面使用将产生一个日期段
C-c !	同上，但产生非激活日期
C-u C c .	产生计划时间或时间段
C-u C c !	同上，但产生非激活日期
C-c C-c	在时间戳上使用该命令将对该时间戳进行格式补全和校对
C-c <</code>	插入Emacs日历中光标所在处的日期（或当前日期）作为时间戳
C-c >	访问Emacs日历上当前日期；如果光标处有时间戳就访问该日期
C-c C-o	在日程表上访问光标时间戳表示的日期/时间
S-UP/DOWN/LEFT/RIGHT	前/后移日期或时间（小时/分），具体情况由光标所在位置而定
5.5.4 预约任务时间
5.5.4.1 安排开始时间（SCHEDUALED）
表示任务将在指定的时间开始。计划时间通过 C-c C-s 命令输入，例如


SCHEDULED: <2013-06-25 周二>
一个任务在计划时间到达时将在每天的日程表上出现，直到任务标记为 DONE 。也可以延迟计划任务在日程表上显示的时间，如延迟2天：


SCHEDULED: <2013-06-25 周二 -2d>
注意这里“计划时间”和通常所说的安排一个任务的时间不一样。如果要指定一个任务在确切的时间开始，直接输入时间戳就可以了。

5.5.4.2 设定截止时间（DEADLINE）
任务应该设置完成的截止时间。截止时间通过 C-c C-d 命令输入，例如：


DEADLINE: <2013-06-26 周三 -5d>
日期后面的 -5d 表示截止时间前5天开始在 today 日程表上提醒。如果不设置提醒开始时间则按照 org-deadline-warning-days 的设置进行提醒。日程提醒将一直持续（即使任务过期），直到任务标记为 DONE 状态。如果一个任务既安排了开始时间又设定了截止时间，日程表上的提醒将有重复，可以选择显示哪个。忽略截止时间提醒的设置为：


(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
忽略开始时间提醒的设置为：


(setq org-agenda-skip-scheduled-delay-if-deadline t)
5.5.4.3 安排周期重复任务的时间
和前面的重复任务时间戳没什么不同，只不过要注意表示重复和表示提醒安排的字符串的顺序，表示重复的在前，如：


DEADLINE: <2013-11-01 周五 +1m -3d>
5.6 任务进程监控与记录
返回目录

5.6.1 任务进度监控
5.6.1.1 显示进度
在标题或复选框列表（不一定是任务）的任何位置输入 [%] 或 [/] ，当使用 C-c C-t 或 S-LEFT/RIGHT 改变子任务的状态时Org就会计算完成百分比或分数，如 [1/5] 。通过输入改变TODO关键词状态的方式不触发计算，但可以在进度状态的位置上执行 C-c C-c 命令更新状态。

5.6.1.2 设置统计方式
默认情况下任务的进度监控仅计算下一级子任务，要统计所有级别的子任务应在合适的位置设置:COOKIE_DATA: todo recursive 属性，即：


:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
如果监控的是复选框任务，把 todo 改为 checkbox 。

5.6.2 状态更改记录
如果TODO关键词定义时设置了时间标签选项（!），任务状态发生改变时将在该任务的下方记录下状态改变的时间。这项功能很容易使用。如果不想记录某个任务及其子任务的状态更改，可以在任务下设置属性 LOGGING为 nil 。


* 本项任务无需记录状态改变
  :PROPERTIES:
  :LOGGING: nil
  :END:
5.6.3 关闭任务
如果觉得通过设置TODO关键词方式记录的状态更改时间很烦人（每次修改都记录，即使误操作了也要手工删除），那你应该用 org-log-done 变量：


(setq org-log-done 'time)
如上设置后每次将任务改变为 DONE 状态时在任务下添加一行内容 CLOSED: [timestamp] ，而再将 DONE 状态改为 TODO 时该行内容被自动删除。

如果项目结束时你还想对它写点评价子类的话，可以设置


(setq org-log-done 'note)
这样每次任务结束时Org就会提示你输入备注，并把它放到“Closing Note”标题下。

5.6.4 工作计时和癖好记录
我仅粗略看了一下工作计时这个功能的一些介绍。按我的理解，它主要用于写作上，允许你记录和计算你趴在某个标题下的时间。一般人可能不干这么无聊的事情。我对癖好记录（habits tracking）也没什么兴趣。自己看The Org Manual 吧。

5.7 使用日程表管理任务
返回目录

5.7.1 日程表视图（Agenda views）
Org-mode不要求所有的待办任务都整齐排列到一个文件中，更没有设立专门的诸如.todo类型的文件，因为它的作者们认为我们平时要处理的事情多数都是在记笔记中产生的。任务可以随时随地定制，它们会散落到各个角落（即文件），因此必需使用某些方式把它们收集起来并进行排序和显示。Org能够使用一些标准选择任务并显示在独立的缓冲区中。它提供了7种不同的显示模式：

日程表：用类似于日历的方法显示特定日期的任务
待办任务列表：列出所有未完成的任务
匹配视图：通过标签、属性或TODO关键词选择并显示匹配的标题
时间线视图：把所有任务放到一个Org文件中并按时间顺序排列
文本搜索视图：从多个文件中搜索匹配特定关键词的任务
静止项目视图：列出没有任何动静的项目（标题），即没有任何TODO关键词标记的标题
用户定制视图：可以定制特殊搜索条件或组合不同的视图
5.7.2 日程表文件
Org虽然没有定义专门的日程表类型的文件，但要产生特定的日程表总不能天南海北的胡乱查找任务，所以要先指定一些（org）文件为搜索范围。这可以通过设置 org-agenda-files 变量完成，如：


(setq org-agenda-files (list "D:/agenda"))
会把 D:/agenda 目录下（不包括子目录）的所有org文件都加入到日程表的搜索范围。也可以使用下面的快捷键逐个添加或删除：

C-c [ ：把当前文件加到 agenda-files 列表的最前面；如果文件已经在 agenda-files 中，就把移到最列表最前面或最后面。
C-c ] ：把当前文件从 agenda-files 列表移除
5.7.3 在日程表上查看任务
Org-mode产生日程表的快捷键默认不安装，得自己设置：


(global-set-key "\C-ca" 'org-agenda)
使用 C-c a 就会弹出日程表视图选择窗口，每个选项都有说明，其中包括前面所说的几种日程表视图，不再啰嗦。 日程表默认列出7天内的任务，如果要改变就设置 org-agenda-ndays 变量，如：


(setq org-agenda-ndays 21)
(setq org-agenda-include-diary t)
5.7.4 用Org文件定制特殊日程表事件
这是个很fancy的功能，类似于Emacs日历的日志文件管理方式，值得使用。比如：


* 纪念日
#+CATEGORY: Ann
%%(org-anniversary 1999 1 1) 结婚 %d 周年纪念
%%(org-anniversary 2000 2 2) 儿子 %d 岁生日
保存为一个独立的org文件，然后加入你的日程表文件列表，产生日程表时会这些事件。



原文地址：http://helloxxxxxx.blog.163.com/blog/static/216015095201352772820142/

----------------------------------------------------------------------

<?xml version="1.0" encoding="utf-8"?>
Table of Contents
1 本文参考
2 简介
3 安装及简单配置
4 简单操作
4.1 标题
4.2 段落
4.3 字体
4.4 列表
4.4.1 示例：
4.4.2 列表/标题快捷键
4.5 嵌入元数据
4.5.1 内容元数据
4.5.2 文档元数据
4.6 表格
4.6.1 建立和操作表格
4.6.2 快捷键
4.6.3 表格中的计算
4.7 连接
4.7.1 自动连接
4.7.2 手动连接
4.7.3 内部连接
4.7.4 其他常用的连接命令
4.8 注脚
4.9 分割线
4.10 标签tag
4.10.1 标记tags
4.10.2 预定义tags
4.10.3 tags查询
5 格式导出与发布
5.1 导出
5.2 发布
6 总结
7 附录-快捷键总列表（7.8版）
1 本文参考
yupeng的 Emacs的Org Mode
http://www.bimeichun.com/orgmode/begin.html
Emacs学习笔记(9):org-mode，最好的文档编辑利器，没有之一
http://i.linuxtoy.org/docs/guide/ch32.html
2 简介
Org-Mode：Your Life in Plain Text.

Org-模式（Org-mode）是文本编辑软件Emacs的一种支持内容分级显示的编辑模式。这种模式支持写 to-do 列表，日志管理，做笔记，做工程计划或者写网页。比如，todo 列表可以给每一件事分别赋上不同的优先级和最后完成期限，每一个 todo 项目又可以细分成次级 todo 列表或者核对表，而且每一个项目还都可以分别加标签或者属性。除此之外，org-模式还可以自动生成某一段时间以内的日程表。

我开使用主要的被所见所得，只专注与自己的思绪的神奇之处所吸引。至于高手们所说的种种其实都还没有概念，我相信通过不断深入的学习，我也会发出这样的惊叹：太TM的太神奇了。

3 安装及简单配置
Emacs23之后已经默认包含有org-mode模式了，但是网上都说新版的比较好，我于是就下了个目前最新的稳定版，解压到site-lisp目录下后，在.emacs中配置如下：

1:  ;;;;;配置org-mode
2:  (setq load-path (cons "E:/emacs-23.4/site-lisp/org-7.8.11/lisp"
3:                    load-path))
4:  (require 'org-install)
现在如果你新建一个.org格式的文件，如果在minibuffer中显示Org的字样，就意味着你已经成功了。

4 简单操作
4.1 标题
文章中的标题可以通过 #+TITTLE: 来设置标题。如：

#+TITLE: 神器中的神器org-mode之入门篇
正文中的标题可以通过*，后面要有空格，然后再输入想要的标题就可以了。一个*表示一级，两个*表示二级标题。（最多10个*）。

4.2 段落
这里与我们想象的很不一样，再win下只要你Enter，就换行成为新的一段了。但是这里要开始新的段落需要回车两次，当你回车一次，当你发布时，只相当于中间有个空格而已。还有一种方法就是在需要空格的地方输入\\。 

段落一

段落二\\
段落三
4.3 字体
*粗体*
/斜体/
+删除线+
_下划线_
下标： H_2 O(这里必须留一个空格要不然2和O都成为小标，目前还不知道怎么去掉空格)
上标： E=mc^2
等宽字：  =git=
效果为： 粗体 
斜体 
删除线 
下划线 
下标：H2 O 
上标：E=mc2 
等宽字： git 

4.4 列表
这里有有序和无序两种，还有一种描述列表。
无序列表以'-'、'+'或者'*'开头
有序列表以'1.'或者'1)'开头
描述列表用'::'
注意事项
列表符号后面都要有空格
同级别的列表缩进要相同
如果想要加入同级别的列表，可以 M-RET
空两行之后列表结束，如果空一行执行M-RET，实际上还是输入同级项
4.4.1 示例：
**** Lord of the Rings
   My favorite scenes are (in this order)
   1. The attack of the Rohirrim
   2. Eowyn's fight with the witch king
      + this was already my favorite scene in the book
      + I really like Miranda Otto.
   3. Peter Jackson being shot by Legolas
      - on DVD only
      He makes a really funny face when it happens.
ORG-LIST-END-MARKER
   But in the end, no individual scenes matter but the film as a whole.
   Important actors in this film are:
   - Elijah Wood :: He plays Frodo
   - Sean Austin :: He plays Sam, Frodo's friend.  I still remember
     him very well from his role as Mikey Walsh in The Goonies.
ORG-LIST-END-MARKER
Lord of the Rings 
My favorite scenes are (in this order)
The attack of the Rohirrim
Eowyn's fight with the witch king
this was already my favorite scene in the book
I really like Miranda Otto.
Peter Jackson being shot by Legolas
on DVD only
He makes a really funny face when it happens.

But in the end, no individual scenes matter but the film as a whole. Important actors in this film are:

Elijah Wood
He plays Frodo
Sean Austin
He plays Sam, Frodo's friend. I still remember him very well from his role as Mikey Walsh in The Goonies.
4.4.2 列表/标题快捷键
折叠
快捷键	说明
S-TAB	循环切换整个文档的大纲状态（折叠、打开下一级、打开全部）
TAB	循环切换光标所在的大纲状态
大纲或者列表之间移动
快捷键	说明
C-c C-n/p	移动到下上一个标题（不断标题是哪一级）
C-c C-f/b	移动到同一级别的下/上标题
C-c C-u	跳到上一级标题
C-c C-j	切换到大纲预览状态
基于大纲/标题的编辑
快捷键	说明
M-RET	插入一个同级别的标题
M-S-RET	插入一个同级别的TODO标题
M-LEFT/RIGHT	将当前标题升/降级
M-S-LEFT/RIGHT	将子树升/降级
M-S-UP/DOWN	将子树上/下移动
C-c *	将本行设为标题或者正文
C-c C-w	将子树或者区域移动到另一个标题处（跨缓冲区）
C-c C-x b	在新缓冲区显示当前分支
C-c /	只列出包含搜索结果的大纲，并高亮，支持多种搜索方式
4.5 嵌入元数据
4.5.1 内容元数据
org-mode中有以下几种

s    #+begin_src ... #+end_src 
e    #+begin_example ... #+end_example  : 单行的例子以冒号开头
q    #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进
v    #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行
c    #+begin_center ... #+end_center 
l    #+begin_latex ... #+end_latex 
L    #+latex: 
h    #+begin_html ... #+end_html 
H    #+html: 
a    #+begin_ascii ... #+end_ascii 
A    #+ascii: 
i    #+index: line 
I    #+include: line
代码 
上面的单字母为快捷键字母，如输入一个<s 然后TAB后就变为：
#+begin_src 

#+end_src
怎么样，这样是不是就很方便了。 
上面的代码我们还可以加入一些参数，如

#+begin_src c -n -t -h 7 -w 40

#+end_src
其中：
c为所添加的语言
-n 显示行号
-t 清除格式
-h 7 设置高度为7 -w 40设置宽度为40
注释 
以‘#‘开头的行被看作注释，不会被导出区块注释采用如下写法：
#+BEGIN_COMMENT
  块注释
  ...
 #+END_COMMENT
表格与图片 
对于表格和图片，可以在前面增加标题和标签的说明，以方便交叉引用。比如在表格的前面添加：
#+CAPTION: This is the caption for the next table (or link)
则在需要的地方可以通过

\ref{table1}
来引用该表格。

嵌入html 
对于导出html以及发布，嵌入html代码就很有用。比如下面的例子适用于格式化为cnblogs的代码块：
#+BEGIN_HTML
  <div class="cnblogs_Highlighter">
  <pre class="brush:cpp">
  int main()
  {
    return 0;
  }
  </pre>
  </div>
相当于在cnblogs的网页编辑器中插入"c++"代码。

包含文件 
当导出文档时，你可以包含其他文件中的内容。比如，想包含你的“.emacs”文件，你可以用：
#+INCLUDE: "~/.emacs" src emacs-lisp 
可选的第二个第三个参数是组织方式（例如，“quote”，“example”，或者“src”），如果是 “src”，语言用来格式化内容。组织方式是可选的，如果不给出，文本会被当作 Org 模式的正常处理。用 C-c ,可以访问包含的文件。

4.5.2 文档元数据
具体的内容可以到文档中查看：Export options 我们除了手动添加上面的元数据外，还可以用快捷键 C-c C-e t 插入选项，其中可能有些选项我们需要经常用到：

H:	标题层数
num:	章节(标题)是否自动编号
toc:	是否生成索引
creator:	是否生成 "creat by emacs…"
LINKUP:	UP: 链接
LINKHOME:	HEME: 链接
4.6 表格
org-mode里制作表格灰常灰常强大，其实我最初看了视频才开始动心学org-mode的。

4.6.1 建立和操作表格
在 org mode 中，你可以画表格。方法很简单，在某一行顶格的位置输入’|'，然后输入表格第一行第一列的内容，再输入’|'，然后输入表格的的一行第二列的内容，以此类推。当第一行输入完成后，按 TAB， org mode 会把当前行对齐，然后为你创造出表格的下一行，让你继续输入。用 TAB 和 S+TAB可以在表格中正向或反向的移动。 

比如下面的例子：
#+CAPTION: 表格的标题
| 1 | one |
| 2 | two |
| 3 | This is a long chunk of text |
| 4 | four |
有时候，表格的某一项特别的长，你可以在任意一个表格的空白项内输入数字来限制其所在列的长度。比如：
|   | <6>    |
| 1 | one    |
| 2 | two    |
| 3 | This=> |
| 4 | four   |
在上面的例子中，第二列的长度不会超过6，超过的部分会被隐藏起来。你可以把鼠标移动到’This=>’上面，会有浮动标签显示出该项的内容，或者输入’C-c `’可以编辑被隐藏的内容。如果你发现表格的某一项没有如你预期的那样被隐藏起来，你可以在表格中的任意位置按 ‘C-c C-c’。 

我们还可以把表格弄的更好看一些。在表格的某两行之间加入’|-’，然后按TAB，可以作出下面的效果：
|   | <6>    |
|---+--------|
| 1 | one    |
| 2 | two    |
| 3 | This=> |
| 4 | four   |
4.6.2 快捷键
整体区域
操作	说明
C-c 竖线	创建或者转化成表格
C-c C-c	调整表格，不移动光标
TAB	移动到下一区域，必要时新建一行
S-TAB	移动到上一区域
RET	移动到下一行，必要时新建一行
编辑行和列
快捷键	说明
M-LEFT/RIGHT	移动列
M-UP/DOWN	移动行
M-S-LEFT/RIGHT	删除/插入列
M-S-UP/DOWN	删除/插入行
C-c -	添加水平分割线
C-c RET	添加水平分割线并跳到下一行
C-c ^	根据当前列排序，可以选择排序方式
4.6.3 表格中的计算
例如一张价格表：

数量	单价	总额
2	3.45	 
4	4.34	 
5	3.44	 
5	5.6	 
在第二行第三列中输入'=$1*$2′。$1和$2表示第一列和第二列，在你自己的表格中，你会使用你希望的列数进行计算。
| 数量 | 单价 |  总额 |
|------+------+-------|
|    2 | 3.45 |   6.9 |
|    4 | 4.34 | 17.36 |
|    5 | 3.44 |  17.2 |
|    5 |  5.6 |   28. |
#+TBLFM: $3=$1*$2
你可以输入’C-u C-c C-c’强制org mode为整个表格进行计算。如果你不想让某一列都按照公式计算，只希望在某一特定项上进行计算，你可以这样输入：':=$1*$2′, 即在等号前再加一个冒号。

4.7 连接
在一个链接上按C-c C-o即可访问，至于调用什么程序访问，取决于链接的内容，emacs和org mode的配置了。

4.7.1 自动连接
对于符合链接规则的内容，org-mode会自动将其视为链接，包括括文件、网页、邮箱、新闻组、BBDB 数据库项、 IRC 会话和记录等。下面是一些例子：

http://www.astro.uva.nl/~dominik            on the web
file:/home/dominik/images/jupiter.jpg       file, absolute path
/home/dominik/images/jupiter.jpg            same as above
file:papers/last.pdf                        file, relative path
file:projects.org                           another Org file
docview:papers/last.pdf::NNN                open file in doc-view mode at page NNN
id:B7423F4D-2E8A-471B-8810-C40F074717E9     Link to heading by ID
news:comp.emacs                             Usenet link
mailto:adent@galaxy.net                     Mail link
vm:folder                                   VM folder link
vm:folder#id                                VM message link
wl:folder#id                                WANDERLUST message link
mhe:folder#id                               MH-E message link
rmail:folder#id                             RMAIL message link
gnus:group#id                               Gnus article link
bbdb:R.*Stallman                            BBDB link (with regexp)
irc:/irc.com/#emacs/bob                     IRC link
info:org:External%20links                   Info node link (with encoded space)
对于文件链接，可以用::后面增加定位符的方式链接到文件的特定位置。定位符可以是行号或搜索选项。如：

file:~/code/main.c::255                     进入到 255 行
file:~/xx.org::My Target                    找到目标‘<<My Target>>’
file:~/xx.org/::#my-custom-id               查找自定义 id 的项
4.7.2 手动连接
[[link][description]]
[[link]]
4.7.3 内部连接
内部链接就类似于HTML的锚点（实际上export成HTML文件后就变成了锚点），可以实现在一个文档内部的跳转。如下命令定义了一个名为target的跳转目标：

#<<target>> (这里我把锚点设置到*连接*这一部分开始处，大家可以点击下面效果中两个连接试试效果)
如下方式可以设置到target的链接：
[[target]] 或 [[target][猛击锚点]]
效果为： target 或 猛击锚点

4.7.4 其他常用的连接命令
C-c l 可以在光标所在处创建一个跳转目标点，在需要跳转至该目标的位置输入命令C-c C-l可以建立到目标的链接当输入C-c C-l命令，光标若处在已经存在的一个链接上的时候，可以编辑改链接。命令C-c %可以记录当前光标所在位置，当光标移到其他地方后，可以用C-c &跳转回来。这里的位置记录类似一个 kill-ring，重复输入C-c %可以记录多个位置，重复输入C-c &可以连续跳转到之前记录的对应位置上。

4.8 注脚
在 org mode 中，你可以为你的文章添加注脚（footnote）。注脚的格式有两种，一是方括号+数字，二是方括号+fn+名字。比如下面有两个例子：在 org mode 的正文中写下这两句话：

The Org homepage1 now looks a lot better than it used to. The Org homepage2 now looks a lot better than it used to.

插入脚注：C-c C-x f 接下俩你可以写一些其他东西，然后在文章的末尾写上下面两句话（注意：必须要顶格写）：

[1] The link is: http://orgmode.org
[fn:orghome] The link is: http://orgmode.org
把光标移动到正文的1处，按 C-c C-c，可以跳转到注脚1处，在注脚1处按 C-c C-c，可以跳转到正文的1 处。

4.9 分割线
五条短线或以上显示为分隔线。

-----
4.10 标签tag
对于信息的管理，有分类(category)和标签(tag)两种方式。这两种方式各有特点：

通常分类是固定的，很少变化，而tag随时可以增加。 分类通常表现为树状结构，比较清晰，但是树状结构过于简单，不能表达复杂的信息。比如，如果有多个分类树，处理起来就会比较麻烦。

所以，这两种方式通常结合起来使用。比如blog系统中，通常既支持文章的分类（树），又支持为每篇文章作tag标记。

org-mode作为最好的文档编辑利器 ，在支持文内大纲（也是树状结构）的同时，还方便的支持tag功能。tag可以在多篇文档中共用。

简单的说：分类就如同我博客分为c++、emacs、linux等一些列类别，但是我的每篇博文都会根据不同的内容设置 不同的标签。

4.10.1 标记tags
如果希望文档中的所有标题都具有某些标签，只需要定义文档元数据：

#+FILETAGS: :Peter:Boss:Secret:
更方便的做法是在正文部分用C-c C-q 或直接在标题上用C-c C-c创建标签，这种方式可以

4.10.2 预定义tags
上面提到，除了可以输入标签外，还可以从预定义的标签中进行选择。如果手工输入标签，在标题后设置标签，键入:后，M-Tab自动提供标签的补齐。预定义的方式有两种：

-1. 在当前文件头部定义这种方式预定义的标签只能在当前文件中使用。使用#+TAGS元数据进行标记，如：

#+TAGS: { 桌面(d) 服务器(s) }  编辑器(e) 浏览器(f) 多媒体(m) 压缩(z)    
每项之间必须用空格分隔，可以在括号中定义一个快捷键；花括号里的为标签组，只能选择一个

对标签定义进行修改后，要在标签定义的位置按 C-c C-c 刷新才能生效。

-2. 在配置文件中定义 上面的标签定义只能在当前文件生效，如果要在所有的.org 文件中生效，需要在 Emacs 配置文件 .emacs 中进行定义：

(setq org-tag-alist '((:startgroup . nil)
                      ("@work . ?w) ("@home" . ?h)
                      ("@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p)))
默认情况下，org会动态维护一个Tag列表，即当前输入的标签若不在列表中，则自动加入列表以供下次补齐使用。

为了使这几种情况（默认列表、文件预设tags，全局预设tags）同时生效，需要在文件中增加一个空的TAGS定义：

#+TAGS:

4.10.3 tags查询
设置标签的主要目的还是为了查询。org-mode 会为搜索结果建立一个视图

快捷键	说明
C-c \	可以用来查找某个tag下的所有项目
C-c / m	搜索并按树状结构显示
C-c a m	从所有agenda file里建立符合某tag的全局性列表
+   和      a+b   同时有这两个标签
-   排除    a-b   有 a 但没有 b
|   或      a|b   有 a 或者有 b
&   和      a&b   同时有 a 和 b，可以用“+”替代
在查询视图中 C-c C-c 退出(我用怎么不管用呢？)

5 格式导出与发布
5.1 导出
org-mode可以导出很多种格式 ,其中最常用的就是文本、网页和pdf格式的。

C-c C-e a 导出为文本文件。 C-c C-e h 导出为 HTML 文件

pdf有点麻烦需要什么latex，目前还不会。

5.2 发布
发布相关的命令：

命令	说明
C-c C-e C	提示指明一个项目，将所有的文件发布
C-c C-e P	发布包含当前文件的项目
C-c C-e F	只发布当前文件
C-c C-e E	发布所有项目
6 总结
终于写完了，虽说org-mode高效，也把我累了个够呛。不会通过实际操作，学会了很多，对org-mode也算有了入门的了解。至于org-mode其余的功能，正在学习中，以后会把用法和使用心得奉上。不行了，要休息休息了。

7 附录-快捷键总列表（7.8版）
Org-Mode Reference Card (for version 7.8.11)

Footnotes:
1 The link is: http://orgmode.org

2 The link is: http://orgmode.org

Date: 2012-06-15 17:54:22

Author: Crowning

Org version 7.8.11 with Emacs version 23

Validate XHTML 1.0
