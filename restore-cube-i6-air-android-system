after installed android-x86, and destored DnX and other android partition,
now it can restore the official android system that come with the factory
this will destore windows 10 system, after restore android, you may want to restore windows


1. first, in the windows 10, use os swith to android, so it can get into DnX mode,
    but it will boot failed since the android system is deleted, don't worry, press
    Power Volumn+ and Volumn- all three buttons together, it still can get into DnX mode

2. download the i6sg rom from https://pan.baidu.com/s/1ntvLcNn, or search it on https://www.51cube.com/firmware/?search=i6

3. I tried it in windows 10, and the intel tools doesn't work since fastboot can't recognize the device, so it won't flash the rom,
    so in archlinux, cat that flash.sh from rom, then run
    sudo fastboot flash fw_stage2 BYTC_IFWI_X64_R_MRDP1_7004_00_SecEnabled_EMMC.bin
    sudo fastboot flash osloader efilinux-userdebug.efi
    sudo fastboot boot droidboot.img
    sudo fastboot oem wipe ESP
    ./flash.sh
    when it's done, it will be power off, then power it on will be ok.

https://groups.google.com/g/android-x86/c/_7-giIRXZvE
There is another Fastboot implementation though, which is much earlier in the boot process. It's called "DNX mode" and it's supposed to be used for recovery if even the bootloader and Fastboot partition were destroyed. As far as I know, it's directly built into the BIOS of the device, because it boots even before the BIOS menu shows up when pressing F2. On my device I can enter DNX mode by pressing Volume Up + Volume Down + Power when turning on the tablet. It then only shows 3 lines "Fastboot starting...".
64bit android x86 can't shutdown the power because the acpi only support 32bit
https://bugzilla.kernel.org/show_bug.cgi?id=70931
Bay Trail-T tablet doesn't support ACPI poweroff, and has only
32bit EFI runtime service to support shutdown, which can't be
called from current 64bit linux kernel.

power volumn-, together, choose android icon, Volumn-, recovery, 

power Volumn-, is os swith, switch android and windows

adb root
adb remount
adb shell
get root privilege in adb 

[john@moon ~]$ adb shell
shell@i6-SG:/ $ su
/system/bin/sh: su: can't execute: Permission denied
126|shell@i6-SG:/ $ ^D
[john@moon ~]$ adb root
restarting adbd as root
[john@moon ~]$ adb remount
remount succeeded
[john@moon ~]$ adb shell
root@i6-SG:/ # 
root@i6-SG:/ # ls -l /system/bin/su                                            
-r-sr--r-- root     root       191389 2022-05-31 00:25 su
root@i6-SG:/ # chown
Usage: chown <USER>[:GROUP] <FILE1> [FILE2] ...
10|root@i6-SG:/ # chown root:shell /system/bin/su                              
root@i6-SG:/ # ls -l /system/bin/su                                            
-r-xr--r-- root     shell      191389 2022-05-31 00:25 su
root@i6-SG:/ # chmod 4755 /system/bin/su                                       
root@i6-SG:/ # ls -l /system/bin/su                                            
-rwsr-xr-x root     shell      191389 2022-05-31 00:25 su
root@i6-SG:/ # 

adb reboot
now you can 'adb shell' 'su'


[john@moon ~]$ sudo adb devices
List of devices attached
Baytrail01552010	no permissions; see [http://developer.android.com/tools/device.html]
[john@moon ~]$ adb kill-server
[john@moon ~]$ sudo adb kill-server
cannot connect to daemon at tcp:5037: Connection refused
[john@moon ~]$ adb adb start-server
adb: unknown command adb
[john@moon ~]$ sudo adb start-server
* daemon not running; starting now at tcp:5037
* daemon started successfully
[john@moon ~]$ adb devices
List of devices attached
Baytrail01552010	sideload

[john@moon ~]$ adb sideload /tmp/update.zip 
adb: sideload connection failed: closed
adb: trying pre-KitKat sideload method...
sending: '/tmp/update.zip'  100%    

------------------------------------------------------------------------
android 4.4.4, KitKat, with adb root enabled, android-x86 cpu
root this devices successfully!

[john@moon supersu]$ ls
default.prop  x64     mips    armv7  arm       SuperSU-v2.82-201705271822.zip
x86           mips64  common  arm64  META-INF
[john@moon supersu]$ adb root
restarting adbd as root
[john@moon supersu]$ adb remount
remount succeeded
[john@moon supersu]$ adb disable-verity
error: closed
[john@moon supersu]$ adb shell setenforce 0
[john@moon supersu]$ adb push x86/su /system/bin/su
x86/su: 1 file pushed, 0 skipped. 115.4 MB/s (99916 bytes in 0.001s)
[john@moon supersu]$ adb push x86/su /system/xbin/su
x86/su: 1 file pushed, 0 skipped. 126.8 MB/s (99916 bytes in 0.001s)
[john@moon supersu]$ adb shell chmod 06755 /system/bin/su
[john@moon supersu]$ adb shell chmod 06755 /system/xbin/su
[john@moon supersu]$ adb shell /system/bin/su --install
[john@moon supersu]$ adb shell /system/bin/su --daemon&
[1] 20628
[john@moon supersu]$ adb install common/Superuser.apk 
Performing Push Install
common/Superuser.apk: 1 file pushed, 0 skipped. 6.8 MB/s (6201401 bytes in 0.866s)
	pkg: /data/local/tmp/Superuser.apk
Success
[john@moon supersu]$ adb shell setenforce 0
[john@moon supersu]$ adb disable-verity
error: closed
[john@moon supersu]$ adb disable-verify
adb: unknown command disable-verify
[john@moon supersu]$ 

now open SuperSu app in the android, it ask you if update the su binary file, choose yes,
then it ask update with ordinary way or twrp, choose ordinary way, then it tells update succeeded,
ask if reboot, choose yes, after reboot, now open SuperSu app in android again, then open terminal app,
run 'su', SuperSu will pop up the ask root permission dialog, choose yes, bingo, you have root privilege 

ref
https://forum.xda-developers.com/t/how-to-manually-update-su-and-supersu-file-through-adb-root-shell.3238991/
https://github.com/spff/install-supersu-via-adb
http://selvaline.blogspot.com/2015/09/how-to-install-supersu-on-android-via.html
https://android.stackexchange.com/questions/224119/how-to-gain-root-on-bluestacks-android-emulator
https://android.stackexchange.com/questions/127230/android-adb-has-root-access-but-no-su-binary
you may need 'adb root;adb remount;adb shell;vi /system/build.prop; add ro.secure=0' then reboot

#1. Unzip SuperSU zip

cd /mnt/sdcard
mkdir supersu
cd supersu
unzip ../SuperSU-v2.82-201705271822.zip

#2. Extract su command and run its post-install

cp x64/su /system/xbin/su
chmod a+rwx /system/xbin/su
/system/xbin/su --install
/system/xbin/su --daemon # When su --daemon is running SuperSU Android UI should detect the root when started

#Continue with the next steps

Then run the SuperUser.apk you got from the internet from the step where says run SuperUser.apk from MediaCenter.

-----------------------------------------------------

adb shell
su
mknod /dev/loop0 b 7 0 # loop 1 will be b 7 1, and loop8 will be b 7 8, not on /dev/block/loop8
losetup -f # will show the free node to use when mount -o loop

cat /proc/filesystems will show what file system it support



adb install ru.meefik.linuxdeploy-1.apk
open this app, make path to /storage/sdcard1/linux.img, install it
it will create a linux.img which is mountable, since it may not install succeeded,
so 'adb pull /storage/sdcard1/linux.img ./' to pc,
then on pc 'sudo mount -o loop linux.img /mnt'
sudo debootstrap --no-check-gpg --variant=buildd --arch=i386 --foreign bullseye /mnt/  http://mirrors.aliyun.com/debian
sudo chroot /mnt/ /bin/bash
/debootstrap/debootstrap --second-stage
exit
sudo umount /mnt

android kitkat 4.4.4 with busybox mount only support ext2 file system on sdcard, exfat won't work,
also mount ext2 img file on vfat sdcard, failed

since that mount linux.img failed on android kitkat 4.4.4, so use sdcard partition instead of img file

on pc, using sdcard reader and that sdcard connect to pc
mkfs.ext2 /dev/sdb1
mount /dev/sdb1 /mnt
debootstrap --no-check-gpg --variant=buildd --arch=i386 --foreign bullseye /mnt/  http://mirrors.aliyun.com/debian
chroot /mnt/ /bin/bash
/debootstrap/debootstrap --second-stage
export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
apt update
apt install vim openssh-server inetutils-ping
vi /etc/group

inet:x:3003:
net_rw:x:3004:

exit
umount /mnt

on android
adb shell
su
busybox mount -t ext2 /dev/block/mmcblk1p1 /mnt/media_rw/sdcard1/
cd /mnt/media_rw/sdcard1
chroot . /bin/bash
export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

addgroup --gid 3003 android_inet
addgroup --gid 3003 inet
usermod -g inet _apt
apt update
# ref https://askubuntu.com/questions/910865/

echo 'export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin' > source.sh
exit

vi mount.sh

busybox mount -o bind /dev ./dev
busybox mount -t proc proc ./proc
busybox mount -t sysfs sysfs ./sys
busybox mount -t devpts devpts ./dev/pts

vi umount.sh
busybox umount ./dev/pts
busybox umount ./sys
busybox umount ./proc
busybox umount ./dev

busybox umount /dev/block/mmcblk1p1

-----------------------------------
adb shell
su
busybox mount /dev/block/mmcblk1p1 /mnt/media_rw/sdcard1
cd /mnt/media_rw/sdcard1
sh mount.sh
chroot . /bin/bash
source source.sh
vi .bashrc
#!/bin/bash
export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

#chroot will read .bashrc

useradd -m joe -s /bin/bash
# write that export PATH to joe's .bashrc, if it's sh not bash, run 'chsh -s /bin/bash joe'
# so u can run 'busybox chroot $MP /bin/su joe'
# also you can run "busybox chroot $MP /bin/bash -c 'command1;command2'" once and exit chroot 
# wite 'export PATH=/bin:/usr/bin:/usr/loca/sbin:/sbin:/usr/local/sbin:/usr/local/bin' in the first line of joe's .bashrc
# and 'cd ~;' in the last line of joe's bashrc

dpkg-reconfigure debconf

apt install python3 python3-pip ghc cabal-install screen man 
apt purge apt-utils # blocking systemd

---------------------------------------
[john@moon bash]$ cat mount-android.sh 
# run 'sh /sdcard/mount-android.sh' in android terminal
# and write '#!/bin/bash;export PATH=/usr/bin:/bin:/usr/local/bin' to chroot's root/.bashrc, chroot will read it
DP=/dev/block/mmcblk1p1
MP=/mnt/media_rw/sdcard1
busybox mount $DP $MP
busybox mount -o bind /dev $MP/dev
busybox mount -t proc proc $MP/proc
busybox mount -t sysfs sysfs $MP/sys
busybox mount -t devpts devpts $MP/dev/pts
busybox mount -t tmpfs tmpfs $MP/tmp
busybox mount -t tmpfs tmpfs $MP/dev/shm
# busybox chroot $MP /bin/bash
# use 'useradd -m joe -s /bin/bash' to create user joe, and write that export PATH to joe's .bashrc
# also u can run "busybox chroot $MP /bin/bash -c 'command1;command2'" once and exit chroot
busybox chroot $MP /bin/su joe

[john@moon bash]$ cat umount-android.sh 
# run 'sh /sdcard/umount-android.sh' in android terminal
DP=/dev/block/mmcblk1p1
MP=/mnt/media_rw/sdcard1
busybox umount $MP/dev/shm
busybox umount $MP/tmp
busybox umount $MP/dev/pts
busybox umount $MP/sys
busybox umount $MP/proc
busybox umount $MP/dev
busybox umount $DP

----------------------------------------

or try linux deploy, click download icon at right top corner,
installation type to partition, installation path to /dev/block/mmcblk1p1, user name to root
then click start





