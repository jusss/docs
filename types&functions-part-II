


[周一 8月 19 2019]
*** You have joined channel #haskell                                    [09:19]
*** Topic for #haskell: https://www.haskell.org |
    https://wiki.haskell.org/IRC_channel | Paste code/errors:
    https://gist.github.com/ | Logs:
    http://tunes.org/~nef/logs/haskell/?C=M;O=D |
    https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic:
    #haskell-offtopic | https://downloads.haskell.org                   [09:20]
*** #haskell: topic set by glguy, 2019-01-05 23:21:52
*** Users on #haskell: jusss MarcelineVQ cybai ___laika ktonga eiGHttt
    Gurkenglas nbloomf sora_h Kundry_Wag ericsagnes falafel gbowen
    jumpnbrownweasel freeman42y xplat Jeanne-Kamikaze bydo atk carlomagno
    poljar plutoniix jlamothe tromp_ mmfood rprije ziyourenxiang wroathe_
    heatsink guest278776 iphy captjakk Sgeo_ nous1024 Saulzar_ lambda-11235
    pera ltriant doublex Sk01 threewood aarvar nahra zaquest linduxed Amras
    phreedom Lord_of_Life noumenon laem revprez_stg arpl pfurla
*** Users on #haskell: hpc armyriad moldybits nullifidian_ rruizt wildlander
    subttle alicemaz infinisil abhixec acarrico _dga ilikeheaps nyuszika7h
    Sheilong tuxsoy tsaka_ PlasmaStar aoeu256 khisanth_ pyan sukbeom Axman6
    vicfred lucasb inkbottle nesqi dddddd jao typedrat machinedgod and_pete
    gabiruh Remy^ tombusby nil m0rphism Niamkik catsup justanotheruser
    xelxebar_ kuttifunk pingiun zariuq klntsky xff0x thunderrd yushyin S007
    obfusk__ Jaxan cynick ManiacTwister s4msung
*** Users on #haskell: dfeuer_ pavonia lastmanstanding jle` day otto_s_
    darjeeli1 lagothrix theDon pi_ dolio TMA UpstreamSalmon alx741 sagax
    a7250ag d34df00d Eduard_Munteanu iqubic noCheese Unhammerd jonatan
    cantstanya Surgeon[m] Boarders gienah_ Blkt jamestmartin chin-tastic Sose_
    kolontaev texasmynsted sw1nn tomboy64 jb55 Lears blankhart Stanley00
    henriksod dopplergange amosbird unlink2 datajerk phaul jrm pie_
    revprez_anzio notzmv null14[m] eacameron nisstyre s00pcan
*** Users on #haskell: aearnus[m] ephemera_ ctag_ hive-mind Foritus jorj
    aphprentice__ mjuad sghir_med[m] danielemarsella[ inflationova[m] cheers
    spion seliopou Digit tabaqui1 mountaingoat chirpsalot Chobbes marek kark
    equbit[m] oleks mnrmnaugh wonko7 thjread anohigisavay NinjaTrappeur recj
    monochrom DTZUZU tinwood Lowl3v3l _ashbreeze_ drewbarbs SCHAPiE
    ClaudiusMaximus leothrix mwelt Saulzar boj bbear shutdown_-h_now erikd
    drewr rembo10 johnw polman greymalkin CSP-SOFTWARE
*** Users on #haskell: ysangkok jix Tesseraction cpup yitz tabaqui sim590
    lihram giraffe cjwelborn Bish relrod PtxDK Anthaas seanparsons lemmih
    jchia andyo dave_uy ab9rf raek robogoat dTal MonkeyNOS cp kjak tv lassulus
    ziman andreas303 m4lvin javjarfer[m] NightA Tuplanolla zzz treehaqr
    Arahael acro Natch dmwit infandum ravenousmoose nicoulaj raatiniemi
    mimi_vx Ckat miseenplace[m] cgfbee mniip yahb maralorn sdx23 Guest4074
    markus1189 i7c tessier Vtec234 PragCypher xarian
*** Users on #haskell: unclechu vimto thaumavorio reggie_ Bergle_1 valdyn jdt
    delYsid ozychhi hiroaki aldum cyphase peel srnty oeblink telser bgamari
    pierreimmo wraithm jophish Taneb feuerbach_ Cthalupa bvad mccoyc kraem
    c_wraith jameekim yaroot hodlwave forell m1dnight_ crtschin copypasteque
    jwynn6 cheshircat theNeuron dibblego tumdedum rosalux RecursiveG rann
    glowcoil megaTherion sm[m] banjiewen saurik bwe ambrosia_ SegFaultAX
    intelux matheus mikeplus64 Forkk milli
*** Users on #haskell: arsdragonfly Hotbees amiri Enigmagic bspar lexi-lambda
    haroldwu Guest39039 cyjiao__ PoliticsII ajmcmiddlin xyggos mankyKitty
    verlet64 mujx[m4 potato44[m] d1mur4tdj[m] stepnem cepxuo imposs[m]
    eyenx[m] mmynsted[m] dongcarl tejok[m] sellout- nybble41[m] Lermex nlofaro
    bradparker georgew yrid[m] kumarbis[m] joenase[m] excel_gate[m] Nascha
    dxtr benwr_ akermu hifutakiko[m] nikivi scheming_around miklcct grumble
    tnks mkoenig mpickering net4all laniusfnv[m]
*** Users on #haskell: meck cods Nikotiini zmlww[m] rajivr___ Klumben
    gilbertw1 quarters xorpse Bigcheese alanz Pete[m] Guy[m]1 Lite[m]
    foxadee[m] GhostofaConsole[ yi[m] adaizen[m] alibabzo kerru[m]
    jesusvega[m] pqwy[m] hogarth[m] beatricejensen[m afontain[m] gmips[m]
    charliebucket[m] kylos[m] dustyp[m] matrixyz[m] JoGoSi[m] glowpelt
    alex[m]14 wrunt[m] jak[m] MerlinGttlinger[ pineapple[m] Grgoire[m]
    MartinKlimi[m] WeiTang[m] GNULambda[m] alexfmpe[m] bkl[m] jeeg[m]
*** Users on #haskell: MonsieurArcher[m dag[m] apurvapavaskar Majiir
    ad5twoknebor[m] spacekitteh[m] atopuzov[m] mobile_x[m] josiah_sama
    sergiotarxz[m] seventh__ buggeas40d[m] haskelllisp[m] glguy michaelpj
    angerman interruptinuse gluegadget TimWolla PyroLagus sarahzrf
    fiddeldibu[m] beaky Adluc zabracks nuxdie a3f Randy stux|RC edwel[m]
    ryzokuken feepo unsymbol morgib dukedave nbouscal duncan Jabbslad joel135
    mingc elvishjerricco sebhoss sgraf simony AfC billstclair DrDuck
*** Users on #haskell: ephemeron fingerzam rslima___ xnyhps heyj datapup_
    w1d3m0d3 steshaw[m] mycroftiv nckx jwaksbaum[m] dmiles clog Fubar^ Vq
    opqdonut sqrt2 noexcept hegge APic rzmt sicklorkin Rudd0 aesi
    irclogger_com devopsdeluxe cocreature Profpatsch sterni dminuoso bind
    lkurusa ahri vaibhavsagar xalek[m] vikraman tmallard[m] Tom[m]7
    reconmaster[m] ovigren[m] mattia[m] jochens[m] krhubert[m] jumzi[m]
    jwerner[m] jhgarner[m] Kenneth[m] vorbex[m] wildtrees[m]
*** Users on #haskell: sudorebootsudor4 midi[m] sayukimans[m] sriehl[m]
    ldesgoui[m] luisjira[m] nartir[m] josef[m] vkleen jibby[m]1
    intellection3to3 patonw[m] neat72[m] krowlan3[m] Vincent[m]2 Jonathan[m]2
    corin[m]1 somni[m] rowan[m] M|GNUisnotLinux[ lmolr[m] imp0s5ible
    contrun[m] jonreeve[m] ghastfilms[m] gandi[m] glothit7ok[m] PotatoRick[m]
    eckt[m] deikatsuo[m] dxml[m] pothyurf[m] godva[m] pschooom[m] dice[m]1
    arianvp[m] LasEspuelas asayers[m]1 adziahel[m] lapav[m] cbg[m]
*** Users on #haskell: abc123zzz[m] brandon123[m] cosson[m] corin[m]
    JoelMcCracken[m] fulgjon Ericson2314 sujeet siraben sielicki jonge[m]
    stan[m] macerbi[m] maigel[m] simbergm kadoban GregKNicholson[m
    iceychris[m] lierdakil[m] kaychaks[m] fgaz ClownMaster[m] EuAndreh[m]
    hdurer[m] domenkozar[m] giuseppe[m] gmind[m] aloiscochard[m] humanwire[m]
    M0ddba11[m] whoops dequbed Ewout teardown haasn RusAlex vk3wtf glamas
    Nik05 atraii abra0 winny dqd metalrain albel727 Chousuke sis7
*** Users on #haskell: ruffy_ dustinm- laxask dazage uberj divVerent mceier
    thonkpod riatre Twey jlpeters troydm higherorder cheater entel avn
    Firedancer raoulb kAworu kapilp raoul tdammers enragedjam enemeth79
    devurandom vin-ivar hiptobecubic theorbtwo sms bolverkr zmlww xcthulhu
    xstill ftop devalot mikolaj Ornedan maerwald tms_ abrar dixie_
    Robin_Jadoul amx phaazon clynamen_ kav sphalerite Ranhir rom1504 Tourist
    SquidDev aplainzetakind duairc moocow_ AWizzArd micro
*** Users on #haskell: betawaffle andreabedini shadowdaemon srid rizary_
    Konehaltia jokester dpn` rodlogic jonrh monad_cat hsiktas scav pent
    eruditass Shun131 coot alexknvl sebastianrkg alunduil NemesisD Neuromancer
    Folkol bartavelle Clint bbear_ jfredett hackage DDR UserOO7 tomku daissgr
    pcoutin niklasb_ tazjin spamlessj vqrs jzl casdr_ carter tsahyt_ sethetter
    EduardoBautista gonz_ caasih bjs alexelcu iravid spinda alextes jstolarek
    ixian rotty fionnan juri_ Remavas
*** Users on #haskell: joehillen defanor Geekingfrog obiwahn hvr Ferdirand
    Someguy123 strangeglyph nkaretnikov coius__ Paks mulk ZoFLo J_Arcane
    jrslepak milessabin malthe adadelta Ring0` Mon_Ouie yorick Entroacceptor
    _ht jonge Mo0O noko_ bollu mjlee scinawa fliife artem bendo arw remexre
    SrPx liquorice cemerick AndreasK d0liver ebutleriv reyu [exa] bandali
    fryguybo1 e2 michalisko pingu_ mjrosenb Jacoby6000 wadadli fantasti` Adeon
    violeta lowryder edwtjo rubik urdh sea-gull
*** Users on #haskell: dyl_ gspia dcoutts gregberns paf31_ edmundnoble leah2
    MatrixBot3 ap5 infinity0 dan64 systemfault natim87 earthy wagle hjozwiak
    sdrodge teej flebron reorder_ nurupo waskell styledash trebuh Deadhand
    bengt_ alp kaol Seich phlym beka lachenmayer otulp ByronJohnson Tene
    sandman13 Cale monokrome nibbling_ saidinwot1 xtsee abuss bsima hiredman
    mtjmullen jdevlieghere brisbin umachan wtw hc statusbot Hijiri vzdraz ion
    pdxleif dilinger dashkal charukiewicz w1gz
*** Users on #haskell: nivpgir_ theophil893 polux7 xacktm SolarAquarion mudri
    petermw totte mupf xante aveltras petercommand hongminhee int-e lambdabot
    habbah ft swalladge ycheng tomjaguarpaw christopher jackdk Moyst jesyspa
    tolt nshepperd1 Madars_ cjh` Unode ekleog Tristan-Speccy Jello_Raptor
    amuck tstat implementation aristid VSpike arkeet aib dsal kip srhb Drezil
    fiQ2 thebnq liff bjobjo stylewarning bitonic averell arianvp quaestor Ke
    spoonm DustyDingo fredcy- Ulrar mxf
*** Users on #haskell: TallerGhostWalt lispy a3Dman cjay- Kiruwa qzo topos
    stilgart lukelau twk- catern no-n jackhill raid lpsmith vjoki pierrot
    bananagram `slikts myme affinespaces mitchellsalad mstruebing nitrix
    dolanbatar sbrg sud0 rootnode Cathy Netwolf nshepperd2 pong azahi rotaerk
    kqr chindy Ankhers pdgwien madnight dysfigured atomi freeside jol TommyC
    andromeda-galaxy dexterfoo zerokarmaleft PierreM heath lugh jvanbure luite
    dstolfa swater Kamuela jsatk DigitalKiwi
*** Users on #haskell: comboy nekomune teehemkay Arguggi qz statusfailed oats
    Athas linoge Intensity Dykam dmj` wildsebastian amatecha thi newhoggy_ nh2
    integral edwardk dumptruckman ibloom roflik tsani asm89 Franciman sm
    codedmart agrif marble_visions yumh ski e bdw Philonous mikolaj_ thallada
    _janne daGrevis mrus h30 dxld vktec MindlessDrone zymurgy SlashLife
    Patternmaster Logio cyberlard nyaomi epta tristanC fr33domlover Meanirelli
    ent CindyLinz srk GGMethos canta digia
*** Users on #haskell: __4matter_ jtcs silverneedle Squarism tehidiot stiell
    griddle cpape @Sigyn Firedancer_ tA- Igloo bcmiller restrictedchoice
    bitemyapp noan tureba hsyl20 zenzike lemald evilmonads AkhILman phadej
    absence greeny__ deu krystianbajno shapr __name__ gothos klugez gargawel_
    aidecoe uwap_ terrorjack__ dgpratt koankeeper Flonk mrsbear loc kini wayne
    Annihitek ynyounuo rkrishnan vodkaInferno bs lyxia zxrf graingert adius
    @ChanServ ereu benl23 echoreply Heffalump
*** Users on #haskell: chivay travv0 simon elcaro stefan-__ koz_ sigmundv-
    Maxdamantus johnstein n3t pacak Batholith esph wrengr_away stvc
    bob_twinkles nemesit|znc steell_ Zemyla lavalike cross JSharp drdo
    kipras`away zv ullbeking jbetz d6e dh freusque apoc andjjj23 Jon rootmos
    Rembane lstdgtfp joeyh m-renaud sclv Nevoic Ekho dfordivam subfacto1
    newhoggy kyagrd__ ocharles Guillaum immae nopf kubrat adamse mmaruseacph2
    cbarrett lightandlight jetpack_joe pasukon nonzen Sparadox
*** Users on #haskell: energizer_ M2tias johs so suzu _guios exarkun orzo
    apeyeoux diginet bcoppens RoguePointer AJTJ noctux Phyx- haveo runawayfive
    MasseR dredozubov c-rog Tspoon__ michalrus gsingh93 ecx86 Peter_Storm jmsx
    abbe flogfr hodapp mrd scal PHO connrs_ Jonno_FTW scivola Eliel
    locallycompact ammar2 blackdog t36s gambpang hexagoxel deni connrs-
    lortabac Reisen exferenceBot lurkless [df] Aleksejs coldpress carbolymer
    exio4 puffnfresh fiddlerwoaroof sivs _flow_
*** Users on #haskell: Deewiant lieven tchakka kosmikus barrucadu rodgzilla
    koala_man eldritch geal luigy EvanR crooked d3lxa adarshaj eagleflo
    Xandaros wz1000 fiatjaf pharaun sssilver Kneiva avp _6a68 anderson
    djanatyn solarus jinblack markhuge idupree DwarfMaster davean iron_houzi
    kloeri joeytwiddle adamCS furnost
*** #haskell URL: http://www.haskell.org/
*** #haskell modes: +CLnt
*** #haskell was created on 2006-11-26 14:42:48
*** pera (~pera@unaffiliated/pera) has quit: Ping timeout: 268 seconds
*** pera (~pera@unaffiliated/pera) has joined channel #haskell          [09:21]
*** antsmartian (~antsmarti@27.57.62.33) has joined channel #haskell
<jusss> :t fmap                                                         [09:22]
<lambdabot> Functor f => (a -> b) -> f a -> f b
*** aphprentice__ (uid124612@gateway/web/irccloud.com/x-wrsfmmgvhszgnvcf) has
    quit: Quit: Connection closed for inactivity
*** captjakk (~captjakk@75-166-173-191.hlrn.qwest.net) has quit: Remote host
    closed the connection
<jusss> :t (>>=)
<lambdabot> Monad m => m a -> (a -> m b) -> m b
<jusss> how I can get >>= through fmap?                                 [09:23]
*** Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has quit: Ping timeout:
    245 seconds
*** davex32[m] (davex32mat@gateway/shell/matrix.org/x-lkmnbqkpndcoezgk) has
    joined channel #haskell
<jackdk> do you mean "define `(>>=)` in terms of `fmap`"? Not possible, in
         general                                                        [09:24]
*** Sgeo_ (~Sgeo@ool-18b98995.dyn.optonline.net) has quit: Ping timeout: 245
    seconds
*** fosterite (~fosterite@c-68-46-86-159.hsd1.mn.comcast.net) has joined
    channel #haskell                                                    [09:25]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell
*** Sgeo (~Sgeo@ool-18b98995.dyn.optonline.net) has joined channel #haskell
                                                                        [09:26]
*** kori (~kori@arrowheads/kori) has joined channel #haskell
<jusss> jackdk: I mean the equality betwen those two or three           [09:28]
<jusss> fmap x x x = >>= x x sort of
*** abhixec (~abhixec@73.92.49.6) has quit: Remote host closed the connection
                                                                        [09:29]
<jackdk> I have no idea what you just wrote
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Ping timeout: 245 seconds
<jusss> jackdk: like j <$> i = (pure j) <*> i                           [09:30]
*** m1dnight_ (~m1dnight@78-22-11-99.access.telenet.be) has quit: Ping
    timeout: 258 seconds
<jackdk> oh right yeah you can implement `fmap` using `(>>=)`           [09:31]
<jusss> I'm stucked with a-> m b
<jusss> 'cause there's no such thing in fmap::(a->b)->f a -> f b 
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Remote host closed the connection
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell                                                    [09:32]
*** m1dnight_ (~m1dnight@78-22-11-99.access.telenet.be) has joined channel
    #haskell
<jusss> :k (>=>)
<lambdabot> error:                                                      [09:33]
<lambdabot>     Not in scope: type constructor or class ‘>=>’
<Axman6> can you turn an a into an m a?
<jusss> Axman6: yeah, with return
<jusss> :t return
<lambdabot> Monad m => a -> m a
<Axman6> (or, can you turn a b into an m b?)
*** kori (~kori@arrowheads/kori) has quit: Ping timeout: 252 seconds
<Axman6> can you turn an a into a b?                                    [09:34]
*** teardown (~user@unaffiliated/mrush) has quit: Ping timeout: 244 seconds
<jusss> Axman6: I can't
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell
<Axman6> sure you can, you have a function a -> b
<jusss> "a into a b" ?                                                  [09:35]
*** Kundry_Wag (~Kundry_Wa@189-68-79-221.dsl.telesp.net.br) has quit: Remote
    host closed the connection
<Axman6> that's what a -> b means
<Axman6> take an a, give back a b                                       [09:36]
<jusss> wait a sec, even if there's a function a->b, how I suppose to turn an
        a into a->b?
<jusss> 'cause I already have got a->b                                  [09:37]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Remote host closed the connection
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell
<Axman6> no, turn one a into one b
<jusss> Axman6: then yes, f::a->b ,  f a :: b                           [09:38]
<jusss> a -> m b, is the part I don't know how to get
<Axman6> so you can turn an a into a b, and you can turn a b into an m b,
         correct?                                                       [09:39]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has quit: Ping timeout:
    264 seconds
<Axman6> you have f :: a -> b, and return :: b -> m b, right?
*** xplat (~james@c-73-215-61-14.hsd1.nj.comcast.net) has quit: Ping timeout:
    272 seconds
<Axman6> how can you make a -> m b from those two pieces?               [09:40]
<jusss> Axman6: yeah
<jusss> return (f a)
<jusss> no
<jusss> return (f a) :: m b,  not a -> m b
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Remote host closed the connection                                   [09:41]
<Axman6> this is true, but what if you don't give it the a
<Axman6> a small hint: (.)
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell
<jusss> return f :: (a->b) -> m (a -> b)                                [09:42]
<Axman6> :t (.)
<lambdabot> (b -> c) -> (a -> b) -> a -> c
<Axman6> what happens if c = m b?
*** anohigisavay (~kj@101.95.188.242) has quit: Quit: Konversation terminated!
                                                                        [09:43]
<jusss> Axman6: then how you know c should be m b?
<Axman6> I'm giving you a hind
<Axman6> hint*
<jusss> (b -> m b) -> (a -> b) -> (a -> m b)                            [09:44]
<Axman6> do you have a b -> m b? do you have an a -> b?
<Axman6> 9and isn't your goal to make an a -> m b?                      [09:45]
<jusss> return b :: b -> m b,  f :: a-> b, so return . f :: a-> m b
<Axman6> looks good to me
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Ping timeout: 264 seconds                                           [09:46]
<Axman6> thhough, return b :: m b, but return :: b -> m b
<jusss> Axman6: but the question is how you know that we should give m b to c,
        or that is possible to do that? or how you think about (.) ?
<jusss> this m b instead of c in b -> c is possible? or can I use m a = c?
                                                                        [09:47]
*** arpl (~ARPL@84-107-171-239.cable.dynamic.v4.ziggo.nl) has left channel
    #haskell: #haskell
<dmwit> I suspect first Axman6 solved your puzzle, then backported his
        solution to use (.), then stared at the type of (.) and lined it up
        with the solution in his head.
<jusss> (b -> m a) -> (a -> b) -> (a -> m a)
<dmwit> So the answer to "how should I mechanically go from this puzzle
        description to knowing that I should use (.) and pick c = m b" is "by
        solving the puzzle first".                                      [09:48]
<jusss> dmwit: so how and that is ok to use m b instead of c?           [09:49]
<jusss> . x f :: return, and how I get x through . and f ?              [09:50]
<Axman6> well no, it's looking at what I know, and what I need. I always know
         I have (.), and I know we have pieces like f :: a -> b, return :: a
         -> m b, and many other functions. Haskell is all about composing
         functions to make new functions, and (.) is one of the fundamental
         building blocks we use to do that
<jusss> base on (b -> m a) -> (a -> b) -> (a -> m a),  x . f = return
*** xplat (~james@c-73-215-61-14.hsd1.nj.comcast.net) has joined channel
    #haskell                                                            [09:51]
<dmwit> jusss: I don't understand any of your last three lines.
<Axman6> "so how and that is ok to use m b instead of c?" because any type
         variable can be specialised to any other type if we like       [09:52]
<dmwit> Why don't I understand "how and that is ok to use m b instead of c?"?
        The grammar is so bad I can't understand it.
<jusss> Axman6: dmwit use "c = m b" is ok?  what if "c = m a" ? and we get (.)
        :: (b-> m a) -> (a->b) -> (a -> m a), so x . f = return, so  x = ?
<dmwit> Why don't I understand ". x f :: return, and how I get x through . and
        f ?"? Because ". x f :: return" isn't sensible: return is a term, and
        the right-hand side of :: should be a type, not a term.         [09:53]
<jusss> Axman6: sorry, my Englis is not good
<dmwit> Why don't I understand "base on (b -> m a) -> (a -> b) -> (a -> m a),
        x . f = return"? Because "x . f = return" is not an equation that
        appeared anywhere else in the discussion.
<and_pete> It feels like jusss’s question is more about variable substitution
           in a more general sense. And why are we allowed to do it? And
           perhaps doesnt quite understand that the “a” “b” and “c”
           themselves are meaningless and could represent any type
*** marmalodak (~marmaloda@c-73-231-4-220.hsd1.ca.comcast.net) has joined
    channel #haskell                                                    [09:54]
*** sword865 (uid208942@gateway/web/irccloud.com/x-oswzndzuvndktuhm) has
    joined channel #haskell
<dmwit> jusss: You, the user of (.), get to choose any type you want for c. If
        you thought it would be useful to choose c = m a, that's allowed. It
        just isn't useful *here*, and the only way Axman6 knew that was by
        having chosen how the arguments he wanted before suggesting the hint
        that c = m b.
<monochrom> This is what's wrong with implicit forall.
<jusss> and_pete: yeah
<and_pete> Where if you choose to replace any of the “c”s that are in the
           type signature of (.) with a “m b”, that you must do it for all
           of them. Just like if you replaced an “a” with a concrete type
           like “Int”, you must then replace all of the “a”s with Int
           also. etc.                                                   [09:55]
<dmwit> jusss: I am okay with "my English is not good". I will mentally
        correct it for you as well as I can. I am also trying to stay in
        simple English in my responses. I will only complain when the bad
        English prevents me from understanding you.
<jusss> like in math, a + b = c, we can get a = c - b, 
<jusss> so I wonder if x . f = return, what x = ?                       [09:56]
<monochrom> + is invertible, . is not
<Axman6> jusss: are you happy with if I have f :: Int -> String, and g ::
         String -> Bool then I can use (.) :: (b -> c) -> (a -> b) -> (a -> c)
         by choosing a = Int, b = String and c = Bool, and then using g . f to
         get Int -> Bool
*** cyberlard (~cyberlard@unaffiliated/jludwig) has quit: Quit: Leaving
                                                                        [09:57]
<Axman6> "Are you happy with" = "do you understand and are comfortable with
         the fact that"* - probab;ly shouldn't use confusing English :)
<jusss> Axman6: ok                                                      [09:58]
<jusss> monochrom: is there inverse function stuff in hasekll?          [10:00]
<monochrom> No.
<and_pete> contramap? :p
<jusss> monochrom: why?                                                 [10:01]
<dmwit> ...is different from inverting a function.
<jusss> dmwit: not like in math?
<dmwit> What is not like in math?
<dmwit> It is also the case in math that contramap is not about inverting
        functions.
<monochrom> dmwit was answering and_pete.
<freeman42y> which is usually better for solving stack build package
             conflicts: "allow-newer" or "stack solver"? (⓿_⓿)
*** pi1 (~pi@dslb-088-076-067-216.088.076.pools.vodafone-ip.de) has joined
    channel #haskell                                                    [10:02]
<Axman6> functions in maths aren't invertable. f(x) = 1 isn't invertable
<jusss> ok
<monochrom> Do you really need to solve "x . f = return" for x?         [10:03]
<and_pete> What is it that enables `fmap` to be defined like `fmap f x = x >>=
           (pure . f)` (or using `return` instead of `pure`), given that the
           `Functor` instance has to be defined before the `Applicative`
           and`Monad` instances? That still kind of confuses me.
<jusss> is there possible to do this?
<monochrom> Or is it another case of "x . y = problem"?
*** yyy (~yyy@unaffiliated/tinnotl) has joined channel #haskell
*** captjakk (~captjakk@75-166-173-191.hlrn.qwest.net) has joined channel
    #haskell
<monochrom> and_pete: Your premise of "before" is wrong.                [10:04]
<dmwit> and_pete: Easy. Your claim that the `Functor` instance has to be
        defined before the `Applicative` and `Monad` instances is incorrect.
<and_pete> Ah that would explain it then.
<dmwit> and_pete: They can be mutually recursive, just like literally every
        other collection of definitions in Haskell.
<monochrom> You simply cannot bring the chronological definition mindset from
            C to Haskell.                                               [10:05]
<and_pete> Right. Mutually recursive is okay, but am I right in my
           understanding that the `Applicative` instance could not be defined
           in isolation without `Functor`?
<dmwit> Yes, that understanding is correct.
<monochrom> That is right.
<and_pete> (don’t worry, I don’t know any C :) )
*** pi_ (~pi@dslb-088-077-210-038.088.077.pools.vodafone-ip.de) has quit: Ping
    timeout: 258 seconds
*** kori (~kori@arrowheads/kori) has joined channel #haskell            [10:06]
<dmwit> hm
<and_pete> Thanks!
<monochrom> Mutual recursion = Permit forward references.
<dmwit> % data Foo a = Foo
<yahb> dmwit: 
<dmwit> % instance Functor Foo => Applicative Foo
<yahb> dmwit: ; <interactive>:8:10: error:; * The constraint `Functor Foo' is
       no smaller than the instance head `Applicative Foo'; (Use
       UndecidableInstances to permit this); * In the instance declaration for
       `Applicative Foo'
<dmwit> % :set -XUndecidableInstances
<yahb> dmwit: 
<dmwit> % instance Functor Foo => Applicative Foo
<yahb> dmwit: ; <interactive>:10:10: warning: [-Wmissing-methods]; * No
       explicit implementation for; `pure' and (either `<*>' or `liftA2'); *
       In the instance declaration for `Applicative Foo'
<dmwit> neat!
<dmwit> You *can* define an Applicative instance in isolation without
        Functor. Just can't use it until you set up that Functor instance. =)
                                                                        [10:07]
<monochrom> The most extreme example being: You can define "f MyCtor = 0" at
            line 3, and postpone the data type that introduces MyCtor until
            line 1000000.
<monochrom> Furthermore the type signature for f, "f :: MyType -> Int", can
            postpone until line 100000000000000000.
<dmwit> (Nevertheless, "you can't define an Applicative instance in isolation
        without Functor" is a good summary of the way people normally write
        Haskell.)                                                       [10:08]
<monochrom> Think strongly-connected component rather than chain.
<dmwit> monochrom: Might be tough to find a compiler fast enough to use your
        program if it has that many lines, though. ^_^
<monochrom> Oh I think the intervening lines are all VTs.               [10:09]
<monochrom> OK fine 100000000000000000 takes forever even at 1 line per
            nanosecond.
*** falafel (~falafel@static-176-185-149-136.ftth.abo.bbox.fr) has quit: Ping
    timeout: 258 seconds                                                [10:10]
<monochrom> 100000000000000000 lines of code is how I create a small black
            hole when I try to put it on my USB thumb drive.
*** xff0x (~fox@softbank126114183029.bbtec.net) has quit: Quit: xff0x   [10:11]
<dmwit> Perhaps we can design a v. clever sparse filesystem, and a compiler
        that understands it well enough. But it would be a pretty big
        engineering effort.
*** dqd (id@wikipedia/dqd) has quit: Ping timeout: 248 seconds
<monochrom> The "strongly-connected component" part is no joke.  It is
            specified in the Haskell Report.                            [10:12]
*** ravenous_
    (~ravenousm@ptr-cud5aqd04ex4g4jhdhi.18120a2.ip6.access.telenet.be) has
    joined channel #haskell                                             [10:14]
*** FreeBirdLjj (~freebirdl@180.172.138.136) has joined channel #haskell
                                                                        [10:15]
<jusss> >>= g (return . f) = fmap f g                                   [10:17]
<jusss> another question in that (.) :: (b-> m b) -> (a->b) -> (a-> m b), and
        return :: a -> m a, we change to return :: b -> m b, is that ok?
*** ravenous_
    (~ravenousm@ptr-cud5aqd04ex4g4jhdhi.18120a2.ip6.access.telenet.be) has
    quit: Ping timeout: 252 seconds                                     [10:18]
*** FreeBirdLjj (~freebirdl@180.172.138.136) has quit: Ping timeout: 244
    seconds                                                             [10:19]
<monochrom> Or you start with  (.) :: (a-> m a) -> (b->a) -> (b-> m a)  in the
            first place.                                                [10:20]
<jusss> monochrom: f :: b -> a,  return . f :: b -> m a                 [10:21]
*** theDon (~td@muedsl-82-207-238-108.citykom.de) has quit: Ping timeout: 244
    seconds
*** pera (~pera@unaffiliated/pera) has quit: Ping timeout: 246 seconds  [10:22]
<dmwit> Perhaps we should have both explicit foralls *and* explicit type
        lambdas.
<dmwit> fmap :: forall a b f. Functor f => (a -> b) -> f a -> f b       [10:23]
*** theDon (~td@94.134.91.50) has joined channel #haskell
<dmwit> fmap = /\a -> /\b -> /\f -> \f -> ...
*** pera (~pera@unaffiliated/pera) has joined channel #haskell          [10:24]
*** iphy (uid67735@gateway/web/irccloud.com/x-bxwbqjbtihrbzmdr) has quit:
    Quit: Connection closed for inactivity
<monochrom> OTOH implicit forall is pervasive in math.  If someone comes to
            you to say "commutative law for addition: y+x=x+y" you don't go
            "no no no in my book it's x+y=y+x".
<jusss> ...                                                             [10:25]
<dmwit> Then we can distinguish between `return :: forall a m. Monad m => a ->
        m a` and `return @b @f :: b -> f b` in the body of `fmap`.
*** argent0 (~argent0@191.81.201.52) has joined channel #haskell
<jusss> I just don't know the rules what I can do or I can't 
<dmwit> (N.B. no forall's in the second one! That's on purpose.)
*** mmfood (~mmfood@178.73.202.94) has quit: Read error: Connection reset by
    peer
<jusss> like I don't know we can change c with m b before,              [10:26]
*** zeroxprime (~smuxi@2601:4a:4080:2bc:d9d5:7def:34a4:fb86) has joined
    channel #haskell
<monochrom> http://www.vex.net/~trebla/haskell/prerequisite.xhtml#substitution
                                                                        [10:27]
<jusss> I don't when f :: a->b and return :: a -> m a in (.)::...  we can
        chage to return :: b -> m b
*** dqd (id@bruta.dqd.cz) has joined channel #haskell
<and_pete> @jusss: you could also have `f :: something -> else` and `return ::
           stuff -> somemonad stuff` and `return . f :: something -> somemonad
           else`. You don’t have to use one letter type variables. You can
           use longer lower-case words if they’re more descriptive and
           helpful to you than `a`, `b`, `c`, and `m`.
<lambdabot> Unknown command, try @list
<dmwit> jusss: In the absence of fancy language extensions, I believe the
        following holds: if you can write `foo :: ... a ... a ... a ...` where
        the `...`s do not mention `a`, and `a` is literally a lower-case `a`,
        then you may pick any type (including one with other type variables in
        it) and replace all the occurrences of `a` with that type.
<dmwit> jusss: This is true of any type variable, not just `a`.         [10:28]
<dmwit> jusss: There is a kinding restriction, of course.
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell
<dmwit> jusss: Saying that the type you pick and the type variable you replace
        must have the same kind (which is a sort of summary of "how
        parameterized" the type is).                                    [10:29]
<dmwit> I was wondering when monochrom would link his substitution
        writeup. ^_^
<monochrom> haha                                                        [10:30]
<monochrom> substitution is the easy part. there is also unification.
*** yyy (~yyy@unaffiliated/tinnotl) has quit: Remote host closed the
    connection
*** nbloomf (~nbloomf@2600:1700:83e0:1f40:eda3:b6f2:7a:fbbb) has quit: Quit:
    My MacBook has gone to sleep. ZZZzzz…                              [10:31]
<jusss> dmwit: ok
<jusss> :t (>=>)                                                        [10:32]
<lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
<jusss> :t (>>=)
<lambdabot> Monad m => m a -> (a -> m b) -> m b
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has quit: Ping timeout:
    252 seconds                                                         [10:33]
*** nbloomf (~nbloomf@104-183-67-6.lightspeed.fyvlar.sbcglobal.net) has joined
    channel #haskell                                                    [10:34]
<and_pete> this bot does’t handle -XTypeApplications, right?
<jusss> fmap <*> and >>= all the last value have f b, but >=> have (a-> m c),
        how to do that >>= with (>=>) ?
<jusss> or can?
<dmwit> You know those fancy apps that help you find where you've used a lot
        of space on your disk? They show a pie chart or similar, with each
        slice being a directory, and you can click on a slice to get a new pie
        chart that's just for that directory, again with slices being
        directory entries.                                              [10:35]
<MarcelineVQ> and_pete: lambdabot doesn't but yahb can, you can use % to talk
              to it
<dmwit> Is there something like that for exploring the output of GHC's
        profiling time statistics?
*** armyriad (armyriad@gateway/vpn/privateinternetaccess/armyriad) has quit:
    Quit: Leaving                                                       [10:36]
<jusss> dmwit: ncdu?
<dmwit> I don't want something for finding disk usage. I want something for
        GHC's profiling output.
<MarcelineVQ> hmm...does sound like something someone would have made with
              diagrams already                                          [10:37]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell
*** nfd9001 (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has joined channel
    #haskell                                                            [10:38]
<MarcelineVQ> since all you'd need is a parse and to set the depth to display
*** zeroxprime (~smuxi@2601:4a:4080:2bc:d9d5:7def:34a4:fb86) has quit: Read
    error: Connection reset by peer                                     [10:39]
*** gbowen (~gregb@101.164.163.88) has left channel #haskell: #haskell  [10:41]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell                                             [10:42]
*** fphilipe_ (~phil@81.6.34.65) has joined channel #haskell
*** dale_ (~dale@unaffiliated/dale) has joined channel #haskell         [10:44]
*** dale_ (~dale@unaffiliated/dale) is now known as dale
*** antsmartian (~antsmarti@27.57.62.33) has quit: Remote host closed the
    connection                                                          [10:46]
*** dddddd (~dddddd@unaffiliated/dddddd) has quit: Remote host closed the
    connection
*** lagothrix (~lagothrix@unaffiliated/lagothrix) is now known as Guest3761
                                                                        [10:47]
*** Guest3761 (~lagothrix@unaffiliated/lagothrix) has quit: Killed
    (weber.freenode.net (Nickname regained by services))
*** lagothrix (~lagothrix@unaffiliated/lagothrix) has joined channel #haskell
<dmwit> Have you ever had that feeling where you need a thing to go 100x
        faster and you can only think of a way to make it 2x faster?
*** cur8or (~cur8or@62.254.118.93) has joined channel #haskell          [10:49]
<Axman6> :'(
<Axman6> that's the feeling
<monochrom> Yes. I need to mark my assignments 100x faster.
<monochrom> I also need to write shell scripts 100x faster. (I am already 100x
            faster with Haskell.)                                       [10:50]
<Axman6> monochrom: hire more tutors
<monochrom> Cannot afford.
<Axman6> :'(
<dmwit> Can confirm: 100xmonochrom is v. expensive
<dmwit> And no guarantees you get linear speedup, either.
<Axman6> nah, just 100x second year's
<monochrom> Our second year students are clueless.                      [10:51]
<Axman6> Didn't you teach them? :thinking_face:
<jackdk> even with all the warnings about "due diligence" and lucidity? =|
<monochrom> On the C programming exam, I put a question "I give you this
            binary search tree node struct definition. Part (a): print the
            keys in decreasing order."                                  [10:52]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has quit:
    Ping timeout: 246 seconds
<monochrom> All my colleagues (the profs) and my TAs looked at it and said
            "dude, monochrom, why are you giving out free marks"        [10:53]
*** cur8or (~cur8or@62.254.118.93) has quit: Ping timeout: 244 seconds
<monochrom> But no, the students had to write 10 lines of code and make sure
            it's wrong.
<jusss> >=> (return . f) return x = (>>=) (return x) (return . f)       [10:54]
<jusss> can we remove that (return . f) at both side?
<jackdk> why not try it and see?                                        [10:55]
<dmwit> The equation isn't even right to begin with.                    [10:56]
<dmwit> Even after fixing `>=>` -> `(>=>)`.
<jusss> :t (>=>)                                                        [10:57]
<lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
<jusss> or my fault
<jusss> I thought it was >=> :: (a-> m b) -> (b->m c) -> (a-> m c)      [10:58]
* dmwit squints                                                         [10:59]
<dmwit> It... is.
*** pi_ (~pi@dslb-178-006-080-218.178.006.pools.vodafone-ip.de) has joined
    channel #haskell
*** sora_h (~sora_h@185.103.96.147) has quit:                           [11:00]
<jusss> >=> :: (a->m b) -> (b->m c)->(a->m c) can I use b to instead of c
        here?
<jusss> >=> ::(a->m b)->(b-> m b) -> (a-> m b) is ok?
<jusss> sorry, remove the last ()...                                    [11:01]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Remote host closed the connection
*** lucasb (uid333435@gateway/web/irccloud.com/x-mfznuwihaamzaqkz) has quit:
    Quit: Connection closed for inactivity                              [11:02]
*** nineonine (~nineonine@con08-vpn.calabrio.com) has joined channel #haskell
*** m0rphism (~m0rphism@149.172.82.115) has quit: Ping timeout: 248 seconds
                                                                        [11:03]
*** pi1 (~pi@dslb-088-076-067-216.088.076.pools.vodafone-ip.de) has quit: Ping
    timeout: 268 seconds
<jusss> >=> end with m c, and >>= end with m b, how to make those two
        connection?
<jusss> connect
<dmwit> Yes, your proposed substitution is okay.                        [11:04]
<dmwit> Including the last () or not is both fine. The function arrow is right
        associative.
<jusss> return . f :: a->m b                                            [11:05]
<dmwit> So `S -> T -> U` means exactly the same thing as `S -> (T -> U)`.
*** isovector1 (~isovector@108.60.170.66) has joined channel #haskell
<jusss> >=> (return . f) return :: a -> m b, right?                     [11:06]
<jusss> f :: a->b                                                       [11:07]
<dmwit> Looks right to me.                                              [11:09]
<dmwit> Why not ask GHC?                                                [11:10]
<dmwit> :t \f -> (>=>) (return . f) return
*** cur8or (~cur8or@62.254.118.93) has joined channel #haskell
<lambdabot> Monad m => (a -> c) -> a -> m c
*** captjakk (~captjakk@75-166-173-191.hlrn.qwest.net) has quit: Remote host
    closed the connection
<dmwit> So you were close. You just missed a Monad constraint.
<dmwit> (I missed it, too!)
<jusss> x :: a                                                          [11:11]
<jusss> >=> (return . f) return x :: m b :: >>= (return x) (return . f)
                                                                        [11:12]
<jusss> except that "Monad m =>" where were wrong/
*** cur8or (~cur8or@62.254.118.93) has quit: Ping timeout: 272 seconds  [11:14]
*** fphilipe_ (~phil@81.6.34.65) has quit: Ping timeout: 245 seconds    [11:17]
<jusss> :t \x -> (>>=) (return x)
<lambdabot> Monad m => a -> (a -> m b) -> m b
*** nineonine (~nineonine@con08-vpn.calabrio.com) has quit: Read error:
    Connection reset by peer
*** Guest4074 (~Aftermath@94.1.24.194) has quit: Quit: Connection error?!
                                                                        [11:18]
*** kispocok (~Aftermath@94.1.24.194) has joined channel #haskell
*** otto_s (~user@p4FF27D08.dip0.t-ipconnect.de) has joined channel #haskell
                                                                        [11:20]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell                                                            [11:22]
<jusss> dmwit: I don't now how to check this is right or wrong in ghci...
                                                                        [11:23]
*** otto_s_ (~user@p5DE2FAB0.dip0.t-ipconnect.de) has quit: Ping timeout: 268
    seconds                                                             [11:24]
<dmwit> What does "this" refer to in that sentence?
<jusss> >=> (return  . (+1)) 2 first it tells me >=> is not defined, so I
        import Control.Monad, then it tells me it needs FlexibleContexts, then
        I :set -XFlexibleContexts,
<jusss> now it tells me no instance for (Show (Integer ->  m0 c0))...   [11:25]
*** Saukk (~Saukk@2001:998:e4:4a03:1c59:9bb5:b94c:3) has joined channel
    #haskell
<dmwit> jusss: Try giving 2 a type signature. (You will find it hard, and then
        you will know what your problem is. I hope.)
<dmwit> (>=>) (return . (+1)) (2 :: {- you fill this in -})
<jusss> dmwit: wait, ghci doesn't now 2 is Int?
<dmwit> Certainly not!
<dmwit> :t 2
<lambdabot> Num p => p
<jusss> or Integer something
<dmwit> > 2 :: Complex Rational                                         [11:26]
<lambdabot>  error:
<lambdabot>      • No instance for (RealFloat (Ratio Integer))
<lambdabot>          arising from the literal ‘2’
<dmwit> > 2 :: CReal
<lambdabot>  2.0
*** xff0x (~fox@210.57.57.162) has joined channel #haskell              [11:27]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has quit: Ping timeout:
    252 seconds
<jusss> (>=>) (return . (+1)) (2 :: {- Int -})  parse error on input ')'
<jusss> ...
<jusss> what a repl!
<dmwit> (...ah, RealFloat is needed for Complex's abs. Gross.)          [11:28]
<dmwit> jusss: {- -} is for comments
<dmwit> you want (2 :: Int)...
<jusss>  ? Couldn't match expected type ‘b -> m c’ with actual type ‘Int’
<dmwit> Correct. Do you now see what your problem is?
<dmwit> (I am not telling you how to fix things. I am trying to teach you how
        to fix them yourself. Declaring what type you think things should have
        to get better error messages is one frequently-used trick for that.)
                                                                        [11:29]
<jusss> dmwit: I shouldn't use f::a->b = (+1) ?                         [11:30]
*** freeman42y (~freeman42@2a02:8084:e80:9580:29a9:fe76:62f7:90c1) has quit:
    Quit: Leaving
*** ktonga (~quassel@203.40.0.189) has quit: Ping timeout: 246 seconds  [11:31]
<dmwit> Are you guessing? If so, can you think of a way to test your guess?
*** machinedgod (~machinedg@134.41.46.111) has quit: Ping timeout: 272 seconds
                                                                        [11:32]
*** kodein1 (~kodein@139.28.218.198) has joined channel #haskell
<rajivr___> Would it be correct to think of the definition of Monoid `class
            Monoid m where` to be equivalent to `class Monoid (m :: *) where`
            or is there a subtlety that I might be missing?             [11:33]
*** codeism (bloodwire@gateway/vpn/privateinternetaccess/bloodwire) has joined
    channel #haskell
*** slack1256 (~slack1256@179.9.137.108) has joined channel #haskell
*** slack1256 (~slack1256@179.9.137.108) has quit: Remote host closed the
    connection
*** guest278776 (~u@cpc103056-sgyl39-2-0-cust1952.18-2.cable.virginm.net) has
    quit: Ping timeout: 258 seconds                                     [11:34]
*** pavonia (~user@unaffiliated/siracusa) has quit: Quit: Bye!
*** ilikeheaps (~sushi@176.120.120.135.telemedia.pl) has quit: Ping timeout:
    268 seconds
*** ilikeheaps (~sushi@176.120.120.135.telemedia.pl) has joined channel
    #haskell                                                            [11:35]
*** fosterite (~fosterite@c-68-46-86-159.hsd1.mn.comcast.net) has quit: Remote
    host closed the connection
<jusss> dmwit: actually I don't understand this " ? Couldn't match expected
        type ‘b -> m c’ with actual type ‘Int’" means... it means I should
        give it a Int, which it except b -> m c?
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell
*** nous1024 (~nous1024@2405:6586:4040:800:9155:23e:ec0e:81d6) has quit: Quit:
    Leaving                                                             [11:36]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Remote host closed the connection
<jusss> >=> (return . f) return x :: m b 
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Remote host closed the connection                                   [11:37]
<monochrom> rajivr___: Yes it's (m :: *)
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell
<rajivr___> Thanks @monochrom  :-)
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Remote host closed the connection
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell                                                    [11:38]
<jusss> if f::a->b = (+1) and x ::Int = 2, it suppose that m b should be a
        function
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Remote host closed the connection
*** subttle (~anonymous@unaffiliated/subttle) has quit: Quit: leaving   [11:39]
<jusss> wait, you mean there's no m here?
*** bondie (~eugenius@110.11.253.155) has joined channel #haskell       [11:42]
*** nullifidian__ (~nullifidi@unaffiliated/nullifidian) has joined channel
    #haskell                                                            [11:44]
*** UpstreamSalmon (uid12077@gateway/web/irccloud.com/x-dsufkyzjdhtwtuzu) has
    quit: Quit: Connection closed for inactivity
*** pyx (~pyx@unaffiliated/pyx) has joined channel #haskell             [11:45]
*** pyx (~pyx@unaffiliated/pyx) has quit: Client Quit                   [11:46]
*** nullifidian_ (~nullifidi@unaffiliated/nullifidian) has quit: Ping timeout:
    245 seconds                                                         [11:47]
*** bondie (~eugenius@110.11.253.155) has left channel #haskell: #haskell
                                                                        [11:48]
*** fjellfras (~fjellfras@49.248.13.74) has joined channel #haskell
*** fjellfras (~fjellfras@49.248.13.74) has quit: Max SendQ exceeded    [11:49]
*** fjellfras (~fjellfras@49.248.13.74) has joined channel #haskell
* hackage Persistence 2.0.2 - A versatile library for topological data
  analysis.  https://hackage.haskell.org/package/Persistence-2.0.2 (Ebanflo)
                                                                        [11:52]
*** guest278776 (~u@cpc103056-sgyl39-2-0-cust1952.18-2.cable.virginm.net) has
    joined channel #haskell
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell
<ysangkok> what does "too many pending signals" mean?                   [11:54]
<ysangkok> if i remove my FFI call, i don't get the error...
<ysangkok> i read that it is might mean you did a segfault              [11:55]
<ysangkok> can anyone confirm that?
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Ping timeout: 245 seconds
                                                                        [11:56]
*** reorder_ (~username@b2eed622.ttnk.hu) has quit: Quit: Reconnecting
*** reorder_ (~username@178.238.214.34) has joined channel #haskell     [11:57]
*** Saukk (~Saukk@2001:998:e4:4a03:1c59:9bb5:b94c:3) has quit: Remote host
    closed the connection                                               [11:59]
*** keepLearning512 (~keepLearn@106.51.235.188) has joined channel #haskell
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [12:00]
*** Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit: Ping
    timeout: 245 seconds                                                [12:03]
*** codeism (bloodwire@gateway/vpn/privateinternetaccess/bloodwire) has quit:
    Remote host closed the connection                                   [12:07]
*** Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined
    channel #haskell                                                    [12:09]
*** Amras (~Amras@unaffiliated/amras0000) has quit: Read error: Connection
    reset by peer                                                       [12:11]
*** kolontaev (~kolontaev@slow.wreckage.volia.net) has quit: Quit: leaving
*** lastmanstanding (~arjoonn@111.92.49.15) has quit: Ping timeout: 248
    seconds                                                             [12:13]
*** dima__ (~dima14@ppp-124-122-37-34.revip2.asianet.co.th) has joined channel
    #haskell
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell                                                    [12:16]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell                                                            [12:17]
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has quit: Ping
    timeout: 245 seconds                                                [12:20]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has quit: Ping timeout:
    250 seconds                                                         [12:21]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Ping timeout: 250 seconds
*** guest278776 (~u@cpc103056-sgyl39-2-0-cust1952.18-2.cable.virginm.net) has
    quit: Ping timeout: 268 seconds
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has joined channel
    #haskell                                                            [12:22]
*** Jeanne-Kamikaze (~Jeanne-Ka@205.234.124.69) has quit: Quit: Leaving
                                                                        [12:23]
*** chirpsalot (~Chirps@unaffiliated/chirpsalot) has quit: Ping timeout: 245
    seconds
*** Chobbes (~Chobbes@unaffiliated/chobbes) has quit: Ping timeout: 258
    seconds
*** d34df00d (~d34df00d@pool-74-101-199-63.nycmny.fios.verizon.net) has left
    channel #haskell: #haskell                                          [12:25]
* hackage Persistence 2.0.3 - A versatile library for topological data
  analysis.  https://hackage.haskell.org/package/Persistence-2.0.3 (Ebanflo)
                                                                        [12:29]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
*** threewood (~threewood@cpe-24-55-6-224.austin.res.rr.com) has quit: Ping
    timeout: 245 seconds                                                [12:30]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [12:32]
*** lastmanstanding (~arjoonn@103.79.223.74) has joined channel #haskell
                                                                        [12:34]
*** Saulzar (~Saulzar@132.181.15.24) has quit: Quit: Leaving
*** ht_ (~Thunderbi@ip-213-127-90-162.ip.prioritytelecom.net) has joined
    channel #haskell                                                    [12:35]
*** wroathe_ (~msgnickse@172.56.13.171) has quit: Read error: Connection reset
    by peer                                                             [12:36]
*** wroathe (~msgnickse@c-68-54-25-135.hsd1.mn.comcast.net) has joined channel
    #haskell                                                            [12:39]
*** dfeuer (~dfeuer@wikimedia/Dfeuer) has joined channel #haskell
*** dfeuer_ (~dfeuer@wikimedia/Dfeuer) has quit: Ping timeout: 244 seconds
                                                                        [12:42]
*** threewood (~threewood@cpe-24-55-6-224.austin.res.rr.com) has joined
    channel #haskell                                                    [12:43]
*** threewood (~threewood@cpe-24-55-6-224.austin.res.rr.com) has quit: Client
    Quit
*** threewood (~threewood@cpe-24-55-6-224.austin.res.rr.com) has joined
    channel #haskell                                                    [12:44]
*** nbloomf (~nbloomf@104-183-67-6.lightspeed.fyvlar.sbcglobal.net) has quit:
    Quit: My MacBook has gone to sleep. ZZZzzz…                        [12:47]
<isovector1> anyone know what the ghc flag for adding linker flags is?
*** day__ (~Unknown@unaffiliated/day) has joined channel #haskell       [12:48]
<Axman6> -optl                                                          [12:49]
<Axman6>
         https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/flags.html#forcing-options-to-particular-phases
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has quit: Read
    error: Connection reset by peer                                     [12:51]
*** day (~Unknown@unaffiliated/day) has quit: Ping timeout: 245 seconds
*** day__ (~Unknown@unaffiliated/day) is now known as day
*** zaquest (~notzaques@gw-mig-service.ll-nsk.zsttk.ru) has quit: Ping
    timeout: 244 seconds
<dmwit> jusss: No, the other way: you gave it (>=>) an Int, and it expected a
        b -> m c.
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has joined channel
    #haskell
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has quit: Read
    error: Connection reset by peer
<dmwit> Delete "it" from that sentence, please.                         [12:52]
<dmwit> The first one.
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell                                                    [12:56]
*** curtisf (478b7d75@71.139.125.117) has joined channel #haskell       [13:00]
* hackage postgresql-simple-interpolate 0.1 - Interpolated SQL queries via
  quasiquotation
  https://hackage.haskell.org/package/postgresql-simple-interpolate-0.1
  (3noch)                                                               [13:03]
*** fphilipe_ (~phil@81.6.34.65) has joined channel #haskell
*** MoarSpaceFi (~Forgot_my@65.155.84.20) has joined channel #haskell   [13:04]
*** howdoi (uid224@gateway/web/irccloud.com/x-udlrgbnsgweetqfg) has joined
    channel #haskell                                                    [13:05]
*** jedws (~jedws@101.180.86.173) has joined channel #haskell           [13:06]
*** fphilipe_ (~phil@81.6.34.65) has quit: Ping timeout: 258 seconds    [13:08]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell                                                            [13:11]
*** zaquest (~notzaques@gw-mig-service.ll-nsk.zsttk.ru) has joined channel
    #haskell
*** Sk01 (~sky3@212.253.74.246) has quit: Ping timeout: 268 seconds     [13:13]
*** fphilipe_ (~phil@81.6.34.65) has joined channel #haskell
*** ht_ (~Thunderbi@ip-213-127-90-162.ip.prioritytelecom.net) has quit: Quit:
    ht_                                                                 [13:14]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has quit: Ping timeout:
    252 seconds                                                         [13:15]
*** nshepperd (~nshepperd@185.212.170.227) has joined channel #haskell
*** wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined channel
    #haskell
*** Ariakenom (~Ariakenom@h-158-174-187-143.NA.cust.bahnhof.se) has joined
    channel #haskell                                                    [13:18]
*** curtisf (478b7d75@71.139.125.117) has quit: Remote host closed the
    connection
*** wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit: Ping
    timeout: 245 seconds                                                [13:20]
<isovector1> Axman6: thanks
*** fphilipe_ (~phil@81.6.34.65) has quit: Ping timeout: 244 seconds    [13:21]
*** laem (~laem@unaffiliated/laem) has quit: Ping timeout: 258 seconds
<Axman6> No worries                                                     [13:22]
*** alx741 (~alx741@181.196.68.105) has quit: Ping timeout: 244 seconds
                                                                        [13:24]
*** laem (~laem@unaffiliated/laem) has joined channel #haskell
*** Axman6 (~Axman6@pdpc/supporter/student/Axman6) has quit: Remote host
    closed the connection                                               [13:25]
*** Axman6 (~Axman6@pdpc/supporter/student/Axman6) has joined channel #haskell
*** osa1 (~omer@haskell/developer/osa1) has joined channel #haskell     [13:26]
*** amiri (~amiri@cpe-45-48-101-136.socal.res.rr.com) has quit: Quit: Lost
    terminal
*** amiri (~amiri@cpe-45-48-101-136.socal.res.rr.com) has joined channel
    #haskell                                                            [13:27]
*** fphilipe_ (~phil@81.6.34.65) has joined channel #haskell            [13:28]
*** drbean (~drbean@TC210-63-209-36.static.apol.com.tw) has joined channel
    #haskell
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection                                                          [13:29]
*** Ariakenom (~Ariakenom@h-158-174-187-143.NA.cust.bahnhof.se) has quit:
    Quit: Leaving
*** DwarfMaster (~luc@2001:41d0:8:109c::1) has quit: Ping timeout: 250 seconds
                                                                        [13:30]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Ping timeout: 252 seconds                                           [13:31]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell
*** dale (~dale@unaffiliated/dale) has quit: Quit: My computer has gone to
    sleep                                                               [13:33]
*** rsoeldner (~rsoeldner@195.145.101.20) has joined channel #haskell   [13:38]
*** alx741 (~alx741@186.178.110.203) has joined channel #haskell
*** DwarfMaster (~luc@ns388825.ip-176-31-255.eu) has joined channel #haskell
                                                                        [13:41]
*** argent0 (~argent0@191.81.201.52) has quit: Ping timeout: 246 seconds
*** dima__ (~dima14@ppp-124-122-37-34.revip2.asianet.co.th) has quit: Quit:
    This computer has gone to sleep                                     [13:43]
*** zacts (~zacts@dragora/developer/zacts) has joined channel #haskell  [13:49]
*** errst (~errst@188.58.217.100) has joined channel #haskell           [13:53]
*** aoeu256 (~aoeu256@97.103.70.182) has quit: Read error: Connection reset by
    peer                                                                [13:57]
*** kodein1 (~kodein@139.28.218.198) has quit:                          [14:00]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [14:02]
*** Stanley00 (~Stanley00@unaffiliated/stanley00) has quit: Ping timeout: 272
    seconds                                                             [14:04]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell                                                            [14:05]
*** vlatkoB (~IRC_clien@unaffiliated/vlatkob) has joined channel #haskell
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Ping timeout: 244 seconds
                                                                        [14:07]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Ping timeout: 264 seconds                                           [14:09]
*** Stanley00 (~Stanley00@unaffiliated/stanley00) has joined channel #haskell
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has quit: Ping timeout:
    252 seconds
*** nfd9001 (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has quit: Ping
    timeout: 272 seconds                                                [14:11]
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has joined channel #haskell
                                                                        [14:15]
*** pera (~pera@unaffiliated/pera) has quit: Quit: leaving
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell
*** MichealH-iPod (~MichealH-@184.75.223.219) has joined channel #haskell
                                                                        [14:17]
*** sQVe (~sQVe@unaffiliated/sqve) has joined channel #haskell          [14:18]
<jusss> dmwit: sorry, I really don't understand where I'm wrong, >=> ::(a->m
        b) -> (b-> m b)->(a->m b) , f::a->b=(+1) , return . f :: a-> m b,
        return :: b -> m b,  >=> (return . (+1)) return :: Int-> Int-> Int is
        ok?                                                             [14:19]
*** nfd9001 (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has joined channel
    #haskell
*** mariatsji (~mariatsji@2a02:a18:894a:401:406:a6e3:2580:2b55) has joined
    channel #haskell
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout: 272
    seconds
*** qwertytest (~fig314@37.120.84.235) has joined channel #haskell      [14:20]
<dminuoso> jusss: Perhaps this modification helpsÖ                      [14:22]
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout:
    245 seconds                                                         [14:23]
<dminuoso> jusss: The type checker has to unify the type of the expression you
           are giving it, with its type signature.                      [14:24]
<dminuoso> jusss: "Couldn't match expected type 'someTy' with actual type
           'anotherTy'" means you supplied an expression in some spot that GHC
           expected, for some reason or another, to have type 'someTy', but it
           was actually of type 'anotherTy'                             [14:25]
<dminuoso> % f :: Int; f = "foo"
<yahb> dminuoso: ; <interactive>:12:15: error:; * Couldn't match expected type
       `Int' with actual type `[Char]'; * In the expression: "foo"; In an
       equation for `f': f = "foo"
<dminuoso> It expected something of type 'Int' (because of the type
           signature), but I gave it something of type String/[Char].   [14:26]
*** fnurglewitz (uid263868@gateway/web/irccloud.com/x-zdccauostdbwzjyf) has
    joined channel #haskell
<dminuoso> jusss: Does this make sense?
<jusss> dminuoso: yeah
<jusss> dminuoso: (>=>) (return . f) return x = (>>=) (return x) (return . f),
        is this right?                                                  [14:27]
<jusss> :t (>=>)                                                        [14:28]
*** nfd9001 (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has quit: Ping
    timeout: 244 seconds
<lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
<jusss> we have already know that return . f :: a-> m b
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has joined channel #haskell
<jusss> so >=> (return . f) return :: a-> m b                           [14:29]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
<jusss> x :: a
<jusss> >=> (return . f) return x :: m b
<jusss> :t (>>=)
<lambdabot> Monad m => m a -> (a -> m b) -> m b
<dminuoso> jusss: Please try to use >=> and >>= in infix notation, its much
           easier to read                                               [14:30]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell
<dminuoso> jusss: return is an identity for (>=>). By that I mean ⌜f >=>
           return = f⌝ for any choice of f.
<jusss> (return x) >>= (return . f) :: m b
<dminuoso> jusss: Did you implement ⌜fmap⌝ in term of ⌜>>=⌝ and ⌜return⌝ by
           the way?                                                     [14:32]
<jusss> dminuoso: yeah, f <$> x = x >>= (return . f)
<jusss> dminuoso: the hard part is (.) return f :: a-> m b              [14:33]
*** therisen (~therisen@165.225.72.105) has joined channel #haskell
<dminuoso> jusss: You can, always, start with writing an explicit lambda
           function. That might be easier to start with. ;)
<jusss> so now, I get j <$> i = (pure j) <*> i  and  f <$> x = x >>= (return
        . f)
*** dennisb (~dennis@89-160-106-195.cust.bredband2.com) has joined channel
    #haskell                                                            [14:34]
*** wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined channel
    #haskell
<dminuoso> jusss: Okay. Did you notice that you didn't pick any
           functor/applicative/monad there? You wrote it generically to work
           with any choice of them.                                     [14:35]
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout: 272
    seconds
<jusss> dminuoso: yeah
<dminuoso> jusss: So for the final task, lets flip it around. Do the same
           thing you've done for "implement fmap in terms of pure/<*>" and
           "implement fmap in terms of >>=/return"                      [14:36]
*** ilikeheaps (~sushi@176.120.120.135.telemedia.pl) has quit: Quit:
    Konversation terminated!
<dminuoso> jusss: Except the task is: implement (>=>) in terms of (>>=)
<dminuoso> jusss: This might be easier than the other way around. We can do
           what you have been trying to do as the last task, perhaps.   [14:37]
<dminuoso> jusss: Note, no ⌜return⌝ is needed.
<dminuoso> % :t (>=>)                                                   [14:38]
<yahb> dminuoso: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
*** wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit: Ping
    timeout: 245 seconds
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell                                                    [14:39]
<dminuoso> jusss: So start by writing ⌜kcomp :: Monad m => (a -> m b) -> (b ->
           m c) -> a -> m c; kcomp kf kg x = undefined⌝, keep telling yourself
           what the type of your 3 arguments are, and think about how you
           could reasonably construct something of type ⌜m c⌝ given what you
           have, and given (>>=)
<jusss> dminuoso: I don't understand, make m concret?                   [14:42]
<dminuoso> jusss: Nope? 
<dminuoso> jusss: Its no different than the first two tasks involving fmap
<dminuoso> jusss: Given that type signature, what's the type of kf inside the
           definition?
<jusss> dminuoso: kf:: a->m b                                           [14:43]
<jusss> dminuoso: kg:: b-> m c
<jusss> x:: a
<jusss> kcomp kf kg x::m c                                              [14:44]
*** keepLearning512 (~keepLearn@106.51.235.188) has quit: Remote host closed
    the connection
*** linarcx (~linarcx@151.242.187.239) has joined channel #haskell      [14:46]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Ping timeout: 250 seconds
*** errst (~errst@188.58.217.100) has quit: Read error: Connection reset by
    peer                                                                [14:47]
*** ravenous_
    (~ravenousm@ptr-cud5aqeamtkcll8iji7.18120a2.ip6.access.telenet.be) has
    joined channel #haskell                                             [14:48]
<jusss> :t (>=>)                                                        [14:49]
<lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has joined
    channel #haskell                                                    [14:50]
<jusss> let b instead of c,  >=> :: (a->m b)->(b->m b) -> a -> m b
<jusss> :t (>>=)
<lambdabot> Monad m => m a -> (a -> m b) -> m b
*** ggVGc (~ggVGc@unaffiliated/walt) has joined channel #haskell
<jusss> >=> kf kg x :: m b :: >>= (m a) kf                              [14:51]
<jusss> dminuoso: kf (>=>) kg = \x -> (return x) >>= kf ?
*** encod3 (~encod3@89.20.162.146.static.ef-service.nl) has joined channel
    #haskell                                                            [14:52]
*** slomo (~slomo@unaffiliated/slomo) has joined channel #haskell
<jusss> dminuoso: sorry, I don't know how to get that m a if there's no return 
                                                                        [14:53]
*** ltriant (~ltriant@210-10-238-100.cust.static-ipl.aapt.com.au) has quit:
    Quit: leaving                                                       [14:55]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has quit:
    Ping timeout: 258 seconds                                           [14:56]
*** encod3 (~encod3@89.20.162.146.static.ef-service.nl) has quit: Remote host
    closed the connection                                               [14:57]
*** qwertytest (~fig314@37.120.84.235) has quit: Ping timeout: 245 seconds
                                                                        [14:59]
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell
*** encod3 (~encod3@144.178.76.42.static.ef-service.nl) has joined channel
    #haskell
*** qbeek (~qbeek@2a01:e0a:2e:a5e0:b11e:238f:fd51:851f) has joined channel
    #haskell                                                            [15:00]
*** Mrbuck (~Mrbuck@ec2-34-198-197-122.compute-1.amazonaws.com) has joined
    channel #haskell                                                    [15:03]
*** MoarSpaceFi (~Forgot_my@65.155.84.20) has quit: Ping timeout: 258 seconds
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has quit: Ping timeout:
    252 seconds
*** MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has quit: Ping
    timeout: 272 seconds                                                [15:04]
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has joined channel #haskell
*** MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has joined channel
    #haskell                                                            [15:07]
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell                                                            [15:08]
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout: 268
    seconds                                                             [15:09]
*** therisen (~therisen@165.225.72.105) has quit: Quit: WeeChat 2.4     [15:10]
*** Sgeo_ (~Sgeo@ool-18b98995.dyn.optonline.net) has joined channel #haskell
                                                                        [15:11]
*** mariatsji (~mariatsji@2a02:a18:894a:401:406:a6e3:2580:2b55) has quit:
    Remote host closed the connection                                   [15:12]
<dminuoso> jusss: Don't use ⌜return⌝                                    [15:14]
<jusss> dminuoso: then how I suppose to get m a?
*** Sgeo (~Sgeo@ool-18b98995.dyn.optonline.net) has quit: Ping timeout: 272
    seconds
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout:
    245 seconds                                                         [15:15]
<dminuoso> jusss: Read the type signature as follows:
*** i7heaven (~i7heaven@106.11.41.195) has joined channel #haskell
<dminuoso> (>>=) :: Monad m => m k -> (k -> m t) -> m t
*** i7heaven (~i7heaven@106.11.41.195) has left channel #haskell: #haskell
*** raichoo (~raichoo@office02.saltation.de) has joined channel #haskell
*** encod3 (~encod3@144.178.76.42.static.ef-service.nl) has quit: Remote host
    closed the connection                                               [15:17]
*** thc202 (~thc202@unaffiliated/thc202) has joined channel #haskell
*** encod3 (~encod3@144.178.76.42.static.ef-service.nl) has joined channel
    #haskell                                                            [15:19]
<jusss> dminuoso: and?                                                  [15:20]
*** sphalerite_ (~sphalerit@NixOS/user/lheckemann) has joined channel #haskell
                                                                        [15:24]
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has joined channel
    #haskell
*** cyalc (~textual@90-145-134-195.bbserv.nl) has joined channel #haskell
*** zacts (~zacts@dragora/developer/zacts) has quit: Quit: WeeChat 2.4  [15:26]
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has joined channel
    #haskell
<jusss> :t (>=> (return . id))                                          [15:27]
<lambdabot> Monad m => (a -> m c) -> a -> m c
*** slomo (~slomo@unaffiliated/slomo) has quit: Quit: Leaving
<dminuoso> jusss: So I think the confusion comes from not understanding type
           variables correctly.
<AfC> For a long time *trifecta*, although "slow" was the goto because it had
      "good error messages".                                            [15:28]
<AfC> Lately *megaparsec* seems to be getting a lot of attention.
<AfC> Does anyone have a view about one vs the other?
<jusss> dminuoso: yeah
<dminuoso> jusss: So type variables can be picked by one party.
*** drbean (~drbean@TC210-63-209-36.static.apol.com.tw) has quit: Ping
    timeout: 248 seconds                                                [15:29]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Remote host closed the connection
<dminuoso> jusss: Remember how we talked about "the consumer of a polymorphic
           function can decide what the type variables are going to be"?
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell
<jusss> dminuoso: a few days ago?
<dminuoso> Yes.
*** doublex (~doublex@2601:542:c480:6ee0:3d0a:84ac:6b69:b9ed) has quit: Remote
    host closed the connection
*** acidjnk (~acid@i577BCA0F.versanet.de) has joined channel #haskell   [15:30]
*** acidjnk (~acid@i577BCA0F.versanet.de) has left channel #haskell: #haskell
<dminuoso> jusss: If we take: 
*** acidjnk (~acid@i577BCA0F.versanet.de) has joined channel #haskell
<dminuoso> % :t ($)
<yahb> dminuoso: (a -> b) -> a -> b
*** doublex (~doublex@2601:542:c480:6ee0:3d0a:84ac:6b69:b9ed) has joined
    channel #haskell
*** asheshambasta
    (~user@ptr-e1lysaxtoafxrhyztxz.18120a2.ip6.access.telenet.be) has joined
    channel #haskell
<dminuoso> jusss: There's two type variables, ⌜a⌝ and ⌜b⌝. They merely serve
           as placeholders. A more verbose way to write the same thing would
           be: ⌜($) :: forall a b. (a -> b) -> a -> b⌝ which means "forall
           choices of some types a and b, ($) has the type ⌜(a -> b) -> a ->
           b⌝                                                           [15:31]
<dminuoso> jusss: In this case, the consumer/caller/user of ($) must (!) what
           a and b are going to be.
<dminuoso> *must pick
<jusss> and ?                                                           [15:32]
*** vicfred (~vicfred@189.216.85.255) has quit: Quit: Leaving
<dminuoso> jusss: Now lets take the perspective of the implementor. Now from
           their perspective, the first argument has some concrete, but
           unknown (!) type. You merely know that the consumer ends up picking
           some type for it, let's call it ⌜_k0⌝
*** dansho (~dansho4@71-84-161-204.dhcp.astr.or.charter.com) has joined
    channel #haskell                                                    [15:33]
<dminuoso> So from the perspective of the implementor ⌜f $ x = ...⌝, the
           argument f has type ⌜_k0⌝ - we dont know what the type is, we just
           give it some anonymous looking name.
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Ping timeout: 250 seconds
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell         [15:34]
*** lambda-11235 (~lambda-11@207.183.239.54) has quit: Quit: Bye
*** cur8or (~cur8or@212.31.152.132) has quit: Client Quit
<dminuoso> jusss: The important thing to note, type variables from different
           functions are, in general, unrelated.                        [15:35]
<dminuoso> % :t (>>=)
<yahb> dminuoso: Monad m => m a -> (a -> m b) -> m b
<dminuoso> % :t (>=>)
<yahb> dminuoso: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
<dminuoso> The ⌜m⌝, ⌜a⌝ and ⌜b⌝ are unrelated.
<jusss> dminuoso: ok
<dminuoso> jusss: If you put yourself into the implementor position of ⌜(>=>)
           :: (a -> m b) -> (b -> m c) -> a -> m c; kf >=> kg = \x ->
           undefined⌝, then the type of ⌜kf⌝ could be called ⌜_t0⌝ (or any
           other random name, just make one up that looks harmless)     [15:36]
<dminuoso> Equivalently the type of ⌜kg⌝ could be called ⌜_t1⌝, it's some
           other unknown type                                           [15:37]
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has quit: Read error:
    Connection reset by peer
*** mariatsj_ (~mariatsji@vpn-managed.schibsted.no) has joined channel
    #haskell
*** 18VAA26UU (~dima14@ppp-124-122-37-34.revip2.asianet.co.th) has joined
    channel #haskell
*** xff0x (~fox@210.57.57.162) has quit: Ping timeout: 245 seconds
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection                                                          [15:38]
*** cfricke (~cfricke@unaffiliated/cfricke) has joined channel #haskell
<dminuoso> jusss: I started that wrong. Mmm.
<jusss> dminuoso: ...
<dminuoso> jusss: Im writing it down in a gist for readability.         [15:40]
*** threewood (~threewood@cpe-24-55-6-224.austin.res.rr.com) has quit: Ping
    timeout: 246 seconds
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [15:41]
*** gxt (~gxt@gateway/tor-sasl/gxt) has joined channel #haskell         [15:43]
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell         [15:44]
*** cyalc (~textual@90-145-134-195.bbserv.nl) has quit: Quit: My MacBook has
    gone to sleep. ZZZzzz…
*** danvet (~Daniel@2a02:168:569e:0:3106:d637:d723:e855) has joined channel
    #haskell                                                            [15:45]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Ping timeout: 245 seconds
*** drbean (~drbean@TC210-63-209-170.static.apol.com.tw) has joined channel
    #haskell                                                            [15:46]
*** isovector1 (~isovector@108.60.170.66) has quit: Ping timeout: 272 seconds
<dminuoso> jusss:
           https://gist.github.com/dminuoso/4d6888c0dbd27b78236f00bb519234af
                                                                        [15:47]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell                                                    [15:48]
*** ravenous_
    (~ravenousm@ptr-cud5aqeamtkcll8iji7.18120a2.ip6.access.telenet.be) has
    quit: Ping timeout: 252 seconds
<dminuoso> jusss: Type variables act like parameters. So it's sort of the
           difference between "being outside and having control over what you
           pass in" and "being inside, having no control over what you get,
           and being ready to take anything"
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has joined channel
    #haskell
*** jgt (~jgt@2a02:a31b:8542:b480:ed34:8856:88e3:97cc) has joined channel
    #haskell                                                            [15:49]
*** nullifidian_ (~nullifidi@unaffiliated/nullifidian) has joined channel
    #haskell                                                            [15:50]
*** xff0x (~fox@210.57.57.162) has joined channel #haskell              [15:52]
<jusss> >>= (kf x) kg :: _m0 _t0                                        [15:53]
<dminuoso> jusss: Note that in that gist, types that start with an underscore
           are not type variables (in the sense that you know them)
<jusss> dminuoso: >>= (kf x) kg :: _m0 _t0                              [15:54]
<dminuoso> jusss: Great! 
<dminuoso> jusss: So the full solution is?
*** nullifidian__ (~nullifidi@unaffiliated/nullifidian) has quit: Ping
    timeout: 272 seconds
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Ping timeout: 264 seconds                                           [15:55]
<jusss> dminuoso: (>=>) kf kg x  =  (>>=) (kf x) kg                     [15:56]
<dminuoso> jusss: Great, and with infix notation?                       [15:57]
*** cyalc (~textual@90-145-134-195.bbserv.nl) has joined channel #haskell
<jusss> dminuoso: kf >=> kg = \x -> (kf x) >>= kg
<dminuoso> Very good.
<dminuoso> jusss: Now just implement (>>=) in terms of (>=>), its no different
           than how I outlined it in the gist. :)
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has quit: Remote
    host closed the connection                                          [15:58]
<dminuoso> jusss: It's no more complicated.
*** keepLearning512 (~keepLearn@49.204.75.26) has joined channel #haskell
<jusss> dminuoso: I'm really got  used to use the sugar syntax about move x
        from the left side to right and give it a lambda form
*** fendor_ (~fendor@91.141.0.164.wireless.dyn.drei.com) has joined channel
    #haskell
<jusss> really not
<dminuoso> jusss: That's fine. Just accept that they are (mostly) the same. :)
                                                                        [15:59]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has joined
    channel #haskell
<jusss> dminuoso: aha, mostly, what's the except?
<jusss> exception                                                       [16:00]
<dminuoso> jusss: It's a really minor detail that only surfaces when pattern
           mattching. 
<dminuoso> jusss: It's not relevant, I shouldn't have mentioned it. :)
*** xff0x (~fox@210.57.57.162) has quit: Ping timeout: 244 seconds      [16:01]
<dminuoso> You can safely assume that they are fully equivalent.
*** Mrbuck (~Mrbuck@ec2-34-198-197-122.compute-1.amazonaws.com) has quit: Ping
    timeout: 246 seconds
<jusss> dminuoso: wait, kf :: _r0 -> _m0 _s0 :: a->m b,   >>=:: _m0 _s0 :: m
        a,   you replace a with b here                                  [16:04]
<dminuoso> jusss: I dont understand, you seem to have garbled that message a
           bit.                                                         [16:05]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [16:07]
<jusss> :t (>=>)
<lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell
<dminuoso> jusss: Ah there was a typo in the original type signature. I
           incorroectly wrote ⌜(>=>) :: Monad m => (a -> m a) -> ...⌝ when it
           should have read ⌜(>=>) :: Monad m => (a -> m b) -> ...⌝     [16:08]
<jusss> dminuoso: it's a-> m b in >=>, not a->m a
<dminuoso> jusss: Yes, good catch.
*** libertyprime (~libertypr@101.98.42.91) has joined channel #haskell
*** cur8or (~cur8or@212.31.152.132) has quit: Ping timeout: 258 seconds
                                                                        [16:09]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell
*** sphalerite (~sphalerit@NixOS/user/lheckemann) has quit: Quit: WeeChat 2.4
                                                                        [16:10]
*** cyalc (~textual@90-145-134-195.bbserv.nl) has quit: Quit: My MacBook has
    gone to sleep. ZZZzzz…
*** sphalerite_ (~sphalerit@NixOS/user/lheckemann) is now known as sphalerite
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has joined channel
    #haskell
*** zacts (~zacts@dragora/developer/zacts) has joined channel #haskell  [16:12]
*** cyalc (~textual@90-145-134-195.bbserv.nl) has joined channel #haskell
*** zacts (~zacts@dragora/developer/zacts) has quit: Client Quit
<jusss> dminuoso: then your (>>=) :: _m0 _s0 -> (_s0 -> _m0 _t0) -> _m0 _t0 is
        >>= m b -> (b -> m c) -> m c
*** kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has joined
    channel #haskell
<jusss> dminuoso:  >>= :: m b -> (b-> m c) -> m c                       [16:13]
<dminuoso> jusss: No/
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell
<dminuoso> jusss: Let me give you an unrelated, but spiritual similar,
           example:
<dminuoso> f x = 123 + x
<dminuoso> g x = "foo" ++ x
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has joined
    channel #haskell
<dminuoso> jusss: Do you agree that these two occurences of "x" are completely
           unrelated?
*** Eduard_Munteanu (~Eduard_Mu@188.27.185.84) has quit: Remote host closed
    the connection
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout:
    248 seconds                                                         [16:14]
<dminuoso> They just happen to have the same name. The reason is: convenience.
<dminuoso> Similarly:
<dminuoso> % :t (>=>)
<yahb> dminuoso: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
<dminuoso> % :t (>>=)
<yahb> dminuoso: Monad m => m a -> (a -> m b) -> m b
*** xff0x (~fox@210.57.57.162) has joined channel #haskell              [16:15]
<dminuoso> Just happen to reuse the same type variables. The reason is merely:
           convenience.
<dminuoso> jusss: Read this as: "For some choices of four types... let's call
           them a, b, c and m in the following..."                      [16:16]
*** cur8or (~cur8or@212.31.152.132) has quit: Read error: Connection reset by
    peer
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell
*** kuribas (~user@ptr-25vy0i7o3qt2a1bncq8.18120a2.ip6.access.telenet.be) has
    joined channel #haskell
<dminuoso> jusss: Inside the definition they have these concrete but known
           types (the ones with underscores!)                           [16:17]
<dminuoso> So the transformation you tried:
<dminuoso> 10:12:38       jusss | dminuoso: then your (>>=) :: _m0 _s0 -> (_s0
           -> _m0 _t0) -> _m0 _t0 is >>= m b -> (b -> m c) -> m c
<dminuoso> Doesnt work that way.
<dminuoso> It works the other way. 
*** darjeeli1 (~darjeelin@123.123.248.117) has quit: Ping timeout: 246 seconds
<jusss> dminuoso: wait
<jusss> dminuoso: >>= :: _m0 _s0 -> (_s0 -> _m0 _t0) -> _m0 _t0,  this last
        _m0 is same with the first _m0 right? also the _t0              [16:18]
<dminuoso> jusss: Right!                                                [16:19]
<dminuoso> jusss: These are not normal type variables. They are just names for
           concrete types we are being given.
<jusss> dminuoso: so what's >>= :: m b-> (b-> m c) -> m c wrong?
<jusss> dminuoso: this last c is same with the previous c               [16:20]
*** 18VAA26UU (~dima14@ppp-124-122-37-34.revip2.asianet.co.th) has quit: Quit:
    This computer has gone to sleep
*** cur8or (~cur8or@212.31.152.132) has quit: Remote host closed the
    connection                                                          [16:21]
*** keepLearning512 (~keepLearn@49.204.75.26) has quit: Remote host closed the
    connection
<jusss> dminuoso:  >>= :: m b -> (b-> m c) -> m c is totally fine to me
                                                                        [16:22]
<jusss> >>= :: m a -> (a -> m b) -> m b
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell
<jusss> >>= :: m c -> (c -> m b) -> m b
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has quit: Remote
    host closed the connection
<jusss> >>= :: m a -> (a -> c) -> m c                                   [16:23]
<jusss> a -> m c
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has joined channel
    #haskell
*** keepLearning512 (~keepLearn@49.204.75.26) has joined channel #haskell
                                                                        [16:24]
*** Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit: Ping
    timeout: 245 seconds                                                [16:25]
*** kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has quit:
    Quit: Leaving
*** kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has joined
    channel #haskell
*** Sgeo__ (~Sgeo@ool-18b98995.dyn.optonline.net) has joined channel #haskell
                                                                        [16:26]
*** cur8or (~cur8or@212.31.152.132) has quit: Read error: Connection reset by
    peer
*** asxx (~Mutter@port-87-193-132-138.static.qsc.de) has joined channel
    #haskell
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell
*** Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined
    channel #haskell                                                    [16:27]
*** ilikeheaps (~sushi@176.120.120.135.telemedia.pl) has joined channel
    #haskell
*** jao (~jao@pdpc/supporter/professional/jao) has quit: Ping timeout: 258
    seconds                                                             [16:28]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
*** cur8or (~cur8or@212.31.152.132) has quit: Remote host closed the
    connection                                                          [16:29]
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell
*** Sgeo_ (~Sgeo@ool-18b98995.dyn.optonline.net) has quit: Ping timeout: 268
    seconds
*** asxx (~Mutter@port-87-193-132-138.static.qsc.de) has quit: Client Quit
                                                                        [16:30]
*** theophil893 (~theophil@83.222.142.231) has quit: Quit: The Lounge -
    https://thelounge.chat
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell                                                    [16:31]
*** theophil893 (~theophil@83.222.142.231) has joined channel #haskell
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has quit:
    Quit: My MacBook has gone to sleep. ZZZzzz…
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [16:32]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has quit:
    Ping timeout: 258 seconds                                           [16:34]
*** qbeek_ (~qbeek@91-160-186-151.subs.proxad.net) has joined channel #haskell
<jusss> dminuoso: this is what you express
        https://paste.ubuntu.com/p/CRnb85TVGb/
*** ggVGc (~ggVGc@unaffiliated/walt) has quit: Ping timeout: 258 seconds
*** darjeeli1 (~darjeelin@123.123.248.117) has joined channel #haskell
*** ralejs (~ralejs@port-87-193-132-138.static.qsc.de) has joined channel
    #haskell                                                            [16:35]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Ping timeout: 250 seconds
*** ggVGc (~ggVGc@unaffiliated/walt) has joined channel #haskell        [16:36]
*** cfricke (~cfricke@unaffiliated/cfricke) has quit: Quit: WeeChat 2.5
*** qbeek (~qbeek@2a01:e0a:2e:a5e0:b11e:238f:fd51:851f) has quit: Ping
    timeout: 252 seconds                                                [16:37]
*** cfricke (~cfricke@unaffiliated/cfricke) has joined channel #haskell
*** reactormonk (~tass@ip5f5bd635.dynamic.kabel-deutschland.de) has joined
    channel #haskell                                                    [16:38]
*** The time at livingstone.freenode.net is Monday August 19 2019 -- 08:40:15
    +00:00                                                              [16:40]
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has quit: Remote
    host closed the connection
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has joined
    channel #haskell
*** cyalc (~textual@90-145-134-195.bbserv.nl) has quit: Quit: My MacBook has
    gone to sleep. ZZZzzz…                                             [16:41]
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has joined channel
    #haskell
<kuribas> @hoogle (Applicative f, Monoid m) => [f m] -> f m             [16:42]
<lambdabot> Text.Pretty.Simple.Internal.OutputPrinter sequenceFold :: (Monad
            f, Monoid a, Traversable t) => t (f a) -> f a
<lambdabot> Linear.Vector sumV :: (Foldable f, Additive v, Num a) => f (v a)
            -> v a
<kuribas> :t traverse (<>)
<lambdabot> (Traversable t, Semigroup b) => t b -> b -> t b
<kuribas> :t fmap fold . sequence                                       [16:43]
<lambdabot> (Monoid b, Traversable t, Monad f) => t (f b) -> f b
<ski> @type foldr (liftA2 mappend) (pure mempty)                        [16:44]
<lambdabot> (Foldable t, Applicative f, Monoid c) => t (f c) -> f c
*** cyalc (~textual@90-145-134-195.bbserv.nl) has joined channel #haskell
*** cyalc (~textual@90-145-134-195.bbserv.nl) has quit: Client Quit     [16:45]
<dminuoso> jusss: The type unification really works out the way I outlined it
           in the gist.
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell                                                            [16:46]
*** supercoven (~quassel@dsl-hkibng32-54fb5e-67.dhcp.inet.fi) has joined
    channel #haskell                                                    [16:47]
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has quit: Ping
    timeout: 244 seconds
*** cur8or (~cur8or@212.31.152.132) has quit: Read error: Connection reset by
    peer
<jusss> dminuoso: if you wrote >>= :: m b -> (b-> m c) -> m c , that I may
        understand early :)                                             [16:50]
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout:
    245 seconds
<jusss> dminuoso: is there the next task for me ?                       [16:52]
*** qbeek_ (~qbeek@91-160-186-151.subs.proxad.net) has quit: Remote host
    closed the connection
<dminuoso> jusss: So things get easier if we adopt the explicit forall
           notation.                                                    [16:53]
<dminuoso> (>>=) :: forall m a b. Monad m => m a -> (a -> m b) -> m b   [16:54]
*** __monty__ (~toonn@unaffiliated/toonn) has joined channel #haskell   [16:55]
*** Wuzzy (~Wuzzy@p5790EDDD.dip0.t-ipconnect.de) has joined channel #haskell
<dminuoso> The "forall m a b" merely means "for every choice of m, a, b ... ",
           which indicates that the occurance of "m", "a", and "b" in the
           right side is actually introduced through "forall"
*** qbeek (~qbeek@2a01:e0a:2e:a5e0:b00c:e22c:e8bd:9558) has joined channel
    #haskell
*** cosimone (~cosimone@2001:b07:ae5:db26:73a:8101:bd0:2ff9) has joined
    channel #haskell
*** fosterite (~fosterite@c-68-46-86-159.hsd1.mn.comcast.net) has joined
    channel #haskell                                                    [16:56]
<dminuoso> jusss: There's another fancy task I could give you indeed.   [16:58]
<jusss> dminuoso: ok
*** oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has joined
    channel #haskell
*** cosimone (~cosimone@2001:b07:ae5:db26:73a:8101:bd0:2ff9) has quit: Client
    Quit                                                                [16:59]
*** MichealH-iPod (~MichealH-@184.75.223.219) has quit:                 [17:00]
<dminuoso> jusss:
           https://gist.github.com/dminuoso/636ecd03d035e7dcb0bf238454d4b126
           these two typeclasses are equivalent. 
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell         [17:01]
<dminuoso> jusss: Write an ⌜instance Applicative f => ApplicativeAlt f⌝ and an
           ⌜instance ApplicativeAlt f => Applicative f⌝ - such that
           Applicative is implemented in terms of ApplicativeAlt and vice
           versa.
<dminuoso> jusss: These are two separate tasks of course. 
*** fosterite (~fosterite@c-68-46-86-159.hsd1.mn.comcast.net) has quit: Ping
    timeout: 268 seconds
*** conal (~conal@185.217.69.164) has joined channel #haskell           [17:03]
<jusss> dminuoso: what is ( ) ?                                         [17:04]
<dminuoso> jusss: the unit type
<dminuoso> () :: ()                                                     [17:05]
<dminuoso> () is a type that has just a single value, also called ()
<dminuoso> It's semantically equivalent to say "void" from C.
<dminuoso> It's what you use when you have to use a type but dont want to
           convey any information.
<dminuoso> ⌜IO ()⌝ for example is an action that, as the result of its
           execution, returns no information                            [17:06]
<dminuoso> It strictly returns a value of type (), which can only be (). But
           we understand that it contains no information, so it's the minimal
           thing to describe "there's no information here"
*** ravenous_
    (~ravenousm@ptr-cud5aqd2ruwi81vik5b.18120a2.ip6.access.telenet.be) has
    joined channel #haskell                                             [17:07]
*** cosimone (~cosimone@2001:b07:ae5:db26:9520:741c:a5e9:2223) has joined
    channel #haskell                                                    [17:08]
*** TrueBoxGuy (bcde1c7c@bcde1c7c.skybroadband.com) has joined channel
    #haskell
<TrueBoxGuy> Hi!                                                        [17:09]
<TrueBoxGuy> abal.config
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell
<TrueBoxGuy> Hi :)
*** cur8or (~cur8or@212.31.152.132) has quit: Ping timeout: 268 seconds
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has quit:
    Quit: My MacBook has gone to sleep. ZZZzzz…                        [17:10]
*** conal (~conal@185.217.69.164) has quit: Quit: Computer has gone to sleep.
*** dfeuer (~dfeuer@wikimedia/Dfeuer) has quit: Ping timeout: 244 seconds
                                                                        [17:11]
*** conal (~conal@185.217.69.164) has joined channel #haskell
*** dfeuer (~dfeuer@wikimedia/Dfeuer) has joined channel #haskell
*** conal (~conal@185.217.69.164) has quit: Client Quit
*** cosimone (~cosimone@2001:b07:ae5:db26:9520:741c:a5e9:2223) has quit:
    Client Quit
<ski> (if a type can have `n' different values (say `n = 2^m'), then it can
      (at least approximatively) be coded into `log_2 n' bits (that would be
      `m' bits). since the type `()' has one value, and `log_2 1 = 0', one
      could argue that, at least conceptually, one requires zero bits to store
      a value (which can only be the value, also written `()' in Haskell) of
      type `()')
*** ravenous_
    (~ravenousm@ptr-cud5aqd2ruwi81vik5b.18120a2.ip6.access.telenet.be) has
    quit: Ping timeout: 252 seconds
*** conal (~conal@185.217.69.164) has joined channel #haskell
*** conal (~conal@185.217.69.164) has quit: Client Quit                 [17:12]
<ski> (this ignores considerations about Haskell values possibly being
      nonterminating, though)
*** conal (~conal@185.217.69.164) has joined channel #haskell
<TrueBoxGuy> Well
<TrueBoxGuy> Haskell doesn't work like low level languages
*** conal (~conal@185.217.69.164) has quit: Client Quit
<TrueBoxGuy> **thunk**
*** mreh (~matthew@82-163-238-164.g3ns.net) has joined channel #haskell
                                                                        [17:13]
<TrueBoxGuy> I'm not sure about 1 needing 0 bits to store tho
<TrueBoxGuy> Cus you're treating that as the special value
<ski> (i suppose an unboxed array with elements of type `()' could actually
      use zero bits to store the values, hmm)
<TrueBoxGuy> Not some number like 0
<ski> (s/store the values/store the elements/)                          [17:14]
*** ktonga (~quassel@2001:8003:300c:aa00:70f1:a7f1:ac5b:b74c) has joined
    channel #haskell
<TrueBoxGuy> Yeah sure 
<TrueBoxGuy> But why would it be 1 
*** conal (~conal@185.217.69.164) has joined channel #haskell
*** conal (~conal@185.217.69.164) has quit: Client Quit
* ski isn't sure what TrueBoxGuy is asking
<TrueBoxGuy> And I doubt unboxed types still work like that
<TrueBoxGuy> * TrueBoxGuy is sad                                        [17:15]
*** conal (~conal@185.217.69.164) has joined channel #haskell
<TrueBoxGuy> Lol
<TrueBoxGuy> So 
*** cosimone (~cosimone@2001:b07:ae5:db26:9520:741c:a5e9:2223) has joined
    channel #haskell
*** conal (~conal@185.217.69.164) has quit: Client Quit
<TrueBoxGuy> What I'm saying is that you need some way to store 0
<TrueBoxGuy> Are you doing natural numbers with or without 0?
*** AugustusV (~AugustusV@unaffiliated/augustusv) has joined channel #haskell
                                                                        [17:16]
*** conal (~conal@185.217.69.164) has joined channel #haskell
*** conal (~conal@185.217.69.164) has quit: Client Quit
<ski> i wasn't talking about natural numbers at all really (apart from
      counting the number of inhabitants/values in a type)
<ski> (i certainly wasn't talking about storing numbers of any kind)
<TrueBoxGuy> Were you talking about storing numbers?
<TrueBoxGuy> mmlul
<TrueBoxGuy> Are you saying if you have a type that only has one value  [17:17]
<TrueBoxGuy> You don't have to represent the value or use no storage to
             represent it?
<ski> yes
<ski> because the logarithm of `1' is `0'
*** therisen (~therisen@165.225.72.105) has joined channel #haskell     [17:18]
<ski> (by that logic, the number of bits required to store values of type
      `Void' (by which i mean a type with no values/inhabitants at all), would
      be `log 0 = -inf', so negative infinity, huh !? .. reasoning seems to
      break down, here)                                                 [17:19]
*** cur8or (~cur8or@212.31.152.132) has joined channel #haskell
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout:
    246 seconds
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    joined channel #haskell                                             [17:20]
* hackage ginger 0.9.1.0 - An implementation of the Jinja2 template language
  in Haskell  https://hackage.haskell.org/package/ginger-0.9.1.0
  (TobiasDammers)                                                       [17:21]
*** oish_ (~charlie@85.159.94.30) has joined channel #haskell           [17:22]
<dminuoso> 11:13:51         ski | (i suppose an unboxed array with elements of
           type `()' could actually use zero bits to store the values, hmm)
                                                                        [17:23]
*** fendor_ (~fendor@91.141.0.164.wireless.dyn.drei.com) has quit: Ping
    timeout: 246 seconds                                                [17:24]
<dminuoso> ⌜State# RealWorld⌝ is an unlifted unit with no storage overhead.
<TrueBoxGuy> Yeah                                                       [17:25]
<TrueBoxGuy> Anyone have any idea about my question
<dminuoso> ski: And indeed ⌜(State# RealWorld -> (# State# RealWorld, a #))⌝
           is, in its representation, just an ⌜a⌝,                      [17:26]
<mniip> :thonk:
<TrueBoxGuy> Mnoop hi
<TrueBoxGuy> Pogey
<ski> yea, but i don't consider `State# RealWorld' conceptually as being a
      singleton type
<mniip> I do                                                            [17:27]
<ski> TrueBoxGuy : i'm sorry, what was your question ?
*** smakarov (~user@217.12.249.74) has joined channel #haskell
<tdammers> RealWorld is essentially unit
<mniip> the singleton is the baton that you pass around to ensure that IO
        actions are evaluated in sequence
<TrueBoxGuy>
             https://cdn.discordapp.com/attachments/269153257023209473/612731547568701495/unknown.png
<TrueBoxGuy>  wrong context
*** pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit: Ping timeout: 252
    seconds
<ski> (at least, one ought to include all the memory storage of the mutable
      objects allocated, like `IORef's and `IOArrays'. and probably also the
      entire state (at least as far as can be discerned from the program) of
      the external world. but this ties back into the inadequacies of `State
      (State# RealWorld)' as a model of `IO')                           [17:28]
<ski> (even taking the "moral" uniqueness of it into account)           [17:29]
*** aleator (~aleator@dyn-130-234-230-130.dynamic.jyu.fi) has joined channel
    #haskell                                                            [17:30]
<mniip> State (State# RealWorld) isn't supposed to be a mathematical model,
        but it's a good engineering approximation given the operational
        semantics of GHC
<dminuoso> I mean if ⌜State# RealWorld⌝ is not an unlifted unit, then I dont
           know what is.
<aleator> Hi! I want to convert a string (plugin argument) into Type in
          GHC-typechecker plugin. Does anyone know if this is even reasonable
          thing to ask for?
<mniip> it's efficient and various code transformations preserve correctness
        of the encoding                                                 [17:31]
<ski> (descriptions of the semantics of assembler instructions commonly treat
      memory as another "register" that's accessed and mutated by
      instructions)
*** nfd9001 (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has joined channel
    #haskell                                                            [17:33]
*** zacts (~zacts@dragora/developer/zacts) has joined channel #haskell  [17:34]
<mniip> it's an array register though, meaning mutation happens at a computed
        address                                                         [17:37]
<mniip> which is different from most registers because otherwise a register
        name is usually hardcoded into an instruction
*** philipp (3e9d67c4@62.157.103.196) has joined channel #haskell       [17:41]
*** jose_zap (~jose_zap@office.expressional.com) has joined channel #haskell
* ski nods                                                              [17:42]
*** cfricke (~cfricke@unaffiliated/cfricke) has quit: Ping timeout: 246
    seconds                                                             [17:44]
*** stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined channel
    #haskell                                                            [17:45]
<TrueBoxGuy> :(                                                         [17:46]
*** ilikeheaps (~sushi@176.120.120.135.telemedia.pl) has quit: Ping timeout:
    245 seconds                                                         [17:47]
<philipp> hope you're all doing good. diggin into "haskell programing from
          first principles" and there's a excercise in which you have to
          figure out the type results from applying some or all of the
          arguments. And there's one excercise which I don't get:  If the type
          of kessel is (Ord a, Num b) => a -> b -> a, then the type of kessel
          1 (2 :: Integer). It's s                                      [17:48]
<philipp> upposed to be (Num a, Ord a) => a. But I thought it's Integer. Any
          explanation would be much appreciated, thx
*** AugustusV (~AugustusV@unaffiliated/augustusv) has quit: Quit: Leaving
*** doublex (~doublex@2601:542:c480:6ee0:3d0a:84ac:6b69:b9ed) has quit: Ping
    timeout: 250 seconds                                                [17:50]
<mniip> philipp, what's the type of 1
<dminuoso> philipp: I dont fully follow, could you try rephrasing the problem
           you have?
<TrueBoxGuy> It goes to a 
<TrueBoxGuy> Yep                                                        [17:51]
<TrueBoxGuy> It's the type of 1 not of 2
<TrueBoxGuy> And both what you give and the type of the function influence the
             answer
<dminuoso> ski: Do you know of any decent resources teaching type unification,
           and - not necessarily using those words - covers universal
           quantified type variables, skolem type variables, etc?
*** piyush-kurur (~user@14.139.174.50) has joined channel #haskell      [17:52]
<TrueBoxGuy> Anyone hab any clue about my questionb
<TrueBoxGuy> soz for repeat
<dminuoso> ski: Earlier the discussion with jusss I realized, that I haven't
           stumbled over any resource that appropriately teaches what type
           variables really mean and how they work.
<dminuoso> It seems that type variables are always introduced with so much
           handwaving, that things dont make much sense.
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell
<mniip> dminuoso, TaPL but in fairness me myself I figured out how it all
        works from example before actually reading the formal definitions
        there
*** catsup (d@ps38852.dreamhostps.com) has quit: Read error: Connection reset
    by peer                                                             [17:53]
<dminuoso> mniip: Mmm, TaPL is a bit heavy for someone just learning Haskell
           though.
<mniip> right
*** cur8or (~cur8or@212.31.152.132) has quit: Ping timeout: 244 seconds
<mniip> if they have a maths background just explain everything with
        ExplicitForAll                                                  [17:54]
<mniip> :P
<TrueBoxGuy> :P
<philipp> thanks, TrueBoxGuy, but I'm passing both arguments by passing kessel
          1 (::Integer) 
<TrueBoxGuy> ?
<mniip> philipp, can you tell me what are the types of the arguments?
*** catsup (d@ps38852.dreamhostps.com) has joined channel #haskell
<TrueBoxGuy> Show me your code lul
<TrueBoxGuy> You're only doing the second one 
<mniip> TrueBoxGuy: shoo
<TrueBoxGuy> ;(                                                         [17:55]
<TrueBoxGuy> will u give me good cat points later if I shush
<philipp> TrueBoxGuy see here
          https://github.com/mvaldesdeleon/haskell-book/blob/master/ch05/exerises.md
          question 8                                                    [17:56]
<TrueBoxGuy> Yes
<TrueBoxGuy> 1 isn't made to be an integer
<TrueBoxGuy> 2 is
<TrueBoxGuy> The annotation is around 2
*** tombusby (~tombusby@gateway/tor-sasl/tombusby) has quit: Ping timeout: 260
    seconds                                                             [17:57]
*** ericsagnes (~ericsagne@i223-216-229-177.s42.a013.ap.plala.or.jp) has quit:
    Ping timeout: 244 seconds
<lortabac> philipp: by passing 1 as the first argument, you add a 'Num a'
           constraint. The type of the second argument does not influence the
           return type                                                  [17:58]
<TrueBoxGuy> philipp: Look at the next example in those exercises to see what
             I mean                                                     [17:59]
*** fendor (~fendor@078132094066.public.t-mobile.at) has joined channel
    #haskell
<ski> dminuoso : hm, maybe, to some extent                              [18:00]
<philipp> ah, thx a lot lortabac & TrueBoxGuy ! 
<ski> @where polymorphic-type-inference
<lambdabot> "Polymorphic Type Inference" by Michael I. Schwartzbach in 1995-03
            at
            <https://cs.au.dk/~mis/typeinf.p(s|df)>,<http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.57.1493>
*** fendor (~fendor@078132094066.public.t-mobile.at) has quit: Remote host
    closed the connection
<ski> (i remember it helped me, when i found it)
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has quit: Quit: My MacBook
    has gone to sleep. ZZZzzz…
*** fphilipe_ (~phil@81.6.34.65) has quit: Ping timeout: 246 seconds    [18:01]
<ski> (i suppose, if someone already has experience with Prolog, that may also
      help)
*** tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit: Remote host
    closed the connection
*** o1lo01ol1o (~o1lo01ol1@a109-49-167-181.cpe.netcabo.pt) has joined channel
    #haskell                                                            [18:02]
*** tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined channel #haskell
<lortabac> ski: btw thanks for your suggestion to learn Prolog, it's a
           fascinating language                                         [18:03]
<ski> it is
*** eiGHttt (~eiGHttt@115.231.100.106) has quit: Ping timeout: 245 seconds
<lortabac> ski: I managed to implemented a Hindley-Milner inference algorithm
           by simply copying the rules, it's magic :)                   [18:04]
<TrueBoxGuy> Anyone have any idea about my cabal q                      [18:05]
<ski> well, the `let'-rule is a bit tricky
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has quit: Ping
    timeout: 248 seconds
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has joined
    channel #haskell                                                    [18:06]
<kuribas> ugh, non-empty should have a foldl1 function
*** tombusby (~tombusby@gateway/tor-sasl/tombusby) has joined channel #haskell
                                                                        [18:07]
<mniip> :t foldl1 @(NonEmpty _)
<lambdabot> error:
<lambdabot>     Pattern syntax in expression context: foldl1@(NonEmpty _)
<lambdabot>     Did you mean to enable TypeApplications?
<mniip> % :t foldl1 @(NonEmpty _)
<yahb> mniip: ; <interactive>:1:10: error:; Not in scope: type constructor or
       class `NonEmpty'; Perhaps you meant `NonEmptyF' (imported from
       Data.Functor.Base)
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has joined channel
    #haskell
<mniip> % :t foldl1 @(NE.NonEmpty _)
<yahb> mniip: ; <interactive>:1:10: error:; Not in scope: type constructor or
       class `NE.NonEmpty'; No module named `NE' is imported.
<mniip> % :t foldl1 @(Data.List.NonEmpty.NonEmpty _)                    [18:08]
<yahb> mniip: ; <interactive>:1:10: error:; * Expected kind `* -> *', but
       `GHC.Base.NonEmpty _' has kind `*'; * In the type `(GHC.Base.NonEmpty
       _)'; In the expression: foldl1 @(GHC.Base.NonEmpty _)
<mniip> % :t foldl1 @(Data.List.NonEmpty.NonEmpty)
<yahb> mniip: (a -> a -> a) -> GHC.Base.NonEmpty a -> a
<TrueBoxGuy> yahbad
*** xff0x (~fox@210.57.57.162) has quit: Quit: xff0x                    [18:09]
<lortabac> ski: I don't want to hijack this channel to talk about Prolog, but
           the most naive translation seems to work correctly (maybe I need to
           test more complex cases)
*** eday1 (~eday@185.5.172.148) has joined channel #haskell             [18:10]
*** fosterite (~fosterite@2601:445:447f:dd14:a9e2:e6f:77c2:2097) has quit:
    Ping timeout: 264 seconds                                           [18:11]
<__monty__> Heh, was also gonna suggest prolog.
<dminuoso> ski: The paper is suitable for people who have done some undergrad
           work on formal semantics of languages or people with a good formal
           background. For others, Im not so sure.                      [18:13]
* ski nods                                                              [18:15]
*** cybai (~cybai@240d:1b:42:7800:6814:520d:297c:1758) has quit: Remote host
    closed the connection
<ski> (i just found it on my own, and dived in)
<TrueBoxGuy> Ok so I think I understood the cabal docs 
*** cybai (~cybai@240d:1b:42:7800:6814:520d:297c:1758) has joined channel
    #haskell                                                            [18:16]
<TrueBoxGuy> but can someone tell me if my understanding is right
*** keepLearning512 (~keepLearn@49.204.75.26) has quit: Read error: Connection
    reset by peer
<TrueBoxGuy>
             https://cdn.discordapp.com/attachments/269153257023209473/612731547568701495/unknown.png
             in this section here
<TrueBoxGuy> Are they describing putting it in the cabal.project file   [18:17]
<TrueBoxGuy> Or actually running it on the command line
<TrueBoxGuy> And if so why isn't there a -- and the use of =
*** jeltsch (~wolfgang@6558-df23-fa74-c9da-3e80-82b2-07d0-2001.dyn.estpak.ee)
    has joined channel #haskell
* hackage hpdft 0.1.0.5 - A tool for looking through PDF file using Haskell
  https://hackage.haskell.org/package/hpdft-0.1.0.5 (keiichiroShikano)  [18:18]
<TrueBoxGuy> I doubt that's why tho
<TrueBoxGuy> I just don't understand why they use quotes
<TrueBoxGuy> When if I use quotes
<TrueBoxGuy> It puts them in the directory
<TrueBoxGuy> And on GH I don't see any files using quotes
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has joined channel #haskell
                                                                        [18:19]
*** cybai (~cybai@240d:1b:42:7800:6814:520d:297c:1758) has quit: Ping timeout:
    250 seconds                                                         [18:20]
*** dmitri (~dima14@ppp-124-122-37-34.revip2.asianet.co.th) has joined channel
    #haskell
*** ggVGc (~ggVGc@unaffiliated/walt) has quit: Ping timeout: 244 seconds
*** jusss (~user@unaffiliated/jusss) has quit: Quit: ERC (IRC client for Emacs
    26.1)                                                               [18:21]

[周二 8月 20 2019]
*** You have joined channel #haskell                                    [09:28]
*** Topic for #haskell: https://www.haskell.org |
    https://wiki.haskell.org/IRC_channel | Paste code/errors:
    https://gist.github.com/ | Logs:
    http://tunes.org/~nef/logs/haskell/?C=M;O=D |
    https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic:
    #haskell-offtopic | https://downloads.haskell.org
*** #haskell: topic set by glguy, 2019-01-05 23:21:52
*** Users on #haskell: jusss nineonine fphilipe cybai_ pfurla drbean fosterite
    freeman[w]__ doublex nowhereman jluttine MoarSpaceFi theDon shafox eiGHttt
    nbloomf wroathe libertyprime gbowen threewood MonkeyNOS Gurkenglas |Kin|
    klntsky dansho falafel jedws Kundry_Wag ktonga poljar1 ziyourenxiang rubik
    plutoniix keep_learning M2en[m] ddellacosta Foritus chalkmonster mreh
    CSP-SOFTWARE renzhi nous1024 m1dnight_ nullifidian_ laem ltriant petersen
    DTZUZO davr0s__ sektor dbmikus__
*** Users on #haskell: vicfred khisanth_ mmfood s00pcan cchalmers gentauro
    inkbottle dyl Lord_of_Life Thra11 chirpsalot Chobbes remexre cheers Sgeo_
    phanimahesh[m] darjeeli1 tabaqui Wizek KeyJoo albertus1 texasmynsted
    Anthaas epicallan alicemaz nahra gienah dale rruizt ohko henriksod
    pierreimmo jeltsch t7 carlomagno subttle sudden Lowl3v3l Kaivo ndesai
    pavonia lastmanstanding ahri jao xplat wonko7 pie_ ystael saml xlogan[m]
    tombusby mimi_vx spew Putonlalla xff0x ravenousmoose
*** Users on #haskell: ericsagnes dddddd cyberlard tomboy64 catsup smakarov
    Wuzzy theophil893 jgt MarcelineVQ sphalerite MindlessDrone dennisb
    Stanley00 DwarfMaster alx741 rsoeldner amiri Axman6 nshepperd zaquest
    howdoi day reorder_ otto_s kispocok pi_ lagothrix dqd kori davex32[m] bydo
    atk jlamothe linduxed phreedom noumenon revprez_stg hpc moldybits
    wildlander infinisil acarrico _dga nyuszika7h Sheilong tuxsoy tsaka_
    PlasmaStar pyan sukbeom nesqi typedrat and_pete gabiruh Remy^
*** Users on #haskell: nil Niamkik justanotheruser xelxebar_ kuttifunk pingiun
    thunderrd yushyin S007 obfusk__ Jaxan cynick ManiacTwister s4msung jle`
    dolio TMA sagax a7250ag noCheese Unhammer jonatan cantstanya Surgeon[m]
    Boarders Blkt jamestmartin chin-tastic Sose_ sw1nn jb55 Lears blankhart
    dopplergange amosbird unlink2 datajerk phaul jrm revprez_anzio notzmv
    null14[m] eacameron nisstyre aearnus[m] ephemera_ ctag_ hive-mind jorj
    mjuad sghir_med[m] danielemarsella[
*** Users on #haskell: inflationova[m] spion seliopou Digit tabaqui1
    mountaingoat marek kark equbit[m] oleks mnrmnaugh thjread NinjaTrappeur
    recj monochrom tinwood _ashbreeze_ drewbarbs SCHAPiE ClaudiusMaximus
    leothrix mwelt boj bbear shutdown_-h_now erikd drewr rembo10 johnw polman
    greymalkin ysangkok jix Tesseraction yitz sim590 lihram giraffe cjwelborn
    Bish relrod PtxDK seanparsons jchia andyo dave_uy ab9rf raek robogoat dTal
    cp kjak tv lassulus ziman andreas303 m4lvin
*** Users on #haskell: javjarfer[m] NightA Tuplanolla zzz treehaqr Arahael
    acro Natch dmwit infandum nicoulaj raatiniemi Ckat miseenplace[m] cgfbee
    mniip yahb maralorn sdx23 markus1189 i7c tessier Vtec234 PragCypher xarian
    unclechu vimto thaumavorio reggie_ Bergle_1 valdyn jdt delYsid ozychhi
    aldum cyphase peel srnty oeblink telser bgamari wraithm jophish Taneb
    feuerbach_ Cthalupa bvad mccoyc kraem c_wraith jameekim yaroot hodlwave
    forell crtschin copypasteque jwynn6 cheshircat
*** Users on #haskell: theNeuron dibblego tumdedum rosalux RecursiveG rann
    glowcoil megaTherion sm[m] banjiewen saurik bwe ambrosia_ SegFaultAX
    intelux matheus mikeplus64 Forkk milli arsdragonfly Hotbees Enigmagic
    bspar lexi-lambda haroldwu Guest39039 cyjiao__ PoliticsII ajmcmiddlin
    xyggos mankyKitty verlet64 mujx[m4 potato44[m] d1mur4tdj[m] stepnem cepxuo
    imposs[m] eyenx[m] mmynsted[m] dongcarl tejok[m] sellout- nybble41[m]
    Lermex nlofaro bradparker georgew yrid[m] kumarbis[m]
*** Users on #haskell: joenase[m] excel_gate[m] Nascha dxtr benwr_ akermu
    hifutakiko[m] nikivi scheming_around miklcct grumble tnks mkoenig
    mpickering net4all laniusfnv[m] meck cods Nikotiini zmlww[m] rajivr___
    Klumben gilbertw1 quarters xorpse Bigcheese alanz Pete[m] Guy[m]1 Lite[m]
    foxadee[m] GhostofaConsole[ yi[m] adaizen[m] alibabzo kerru[m]
    jesusvega[m] pqwy[m] hogarth[m] beatricejensen[m afontain[m] gmips[m]
    charliebucket[m] kylos[m] dustyp[m] matrixyz[m] JoGoSi[m] glowpelt
*** Users on #haskell: alex[m]14 wrunt[m] jak[m] MerlinGttlinger[ pineapple[m]
    Grgoire[m] MartinKlimi[m] WeiTang[m] GNULambda[m] alexfmpe[m] bkl[m]
    jeeg[m] MonsieurArcher[m dag[m] apurvapavaskar Majiir ad5twoknebor[m]
    spacekitteh[m] atopuzov[m] mobile_x[m] josiah_sama sergiotarxz[m]
    seventh__ buggeas40d[m] haskelllisp[m] glguy michaelpj angerman
    interruptinuse gluegadget TimWolla PyroLagus sarahzrf fiddeldibu[m] beaky
    Adluc zabracks nuxdie a3f Randy stux|RC edwel[m] ryzokuken
*** Users on #haskell: feepo unsymbol morgib dukedave nbouscal duncan Jabbslad
    joel135 mingc elvishjerricco sebhoss sgraf simony AfC billstclair DrDuck
    ephemeron fingerzam rslima___ xnyhps heyj datapup_ w1d3m0d3 steshaw[m]
    mycroftiv nckx jwaksbaum[m] dmiles clog Fubar^ Vq opqdonut sqrt2 noexcept
    hegge APic rzmt sicklorkin Rudd0 aesi irclogger_com devopsdeluxe
    cocreature Profpatsch sterni dminuoso bind lkurusa vaibhavsagar xalek[m]
    vikraman tmallard[m] Tom[m]7 reconmaster[m]
*** Users on #haskell: ovigren[m] mattia[m] jochens[m] krhubert[m] jumzi[m]
    jwerner[m] jhgarner[m] Kenneth[m] vorbex[m] wildtrees[m] sudorebootsudor4
    midi[m] sayukimans[m] sriehl[m] ldesgoui[m] luisjira[m] nartir[m] josef[m]
    vkleen jibby[m]1 intellection3to3 patonw[m] neat72[m] krowlan3[m]
    Vincent[m]2 Jonathan[m]2 corin[m]1 somni[m] rowan[m] M|GNUisnotLinux[
    lmolr[m] imp0s5ible contrun[m] jonreeve[m] ghastfilms[m] gandi[m]
    glothit7ok[m] PotatoRick[m] eckt[m] deikatsuo[m] dxml[m]
*** Users on #haskell: pothyurf[m] godva[m] pschooom[m] dice[m]1 arianvp[m]
    LasEspuelas asayers[m]1 adziahel[m] lapav[m] cbg[m] abc123zzz[m]
    brandon123[m] cosson[m] corin[m] JoelMcCracken[m] fulgjon Ericson2314
    sujeet siraben sielicki jonge[m] stan[m] macerbi[m] maigel[m] simbergm
    kadoban GregKNicholson[m iceychris[m] lierdakil[m] kaychaks[m] fgaz
    ClownMaster[m] EuAndreh[m] hdurer[m] domenkozar[m] giuseppe[m] gmind[m]
    aloiscochard[m] humanwire[m] M0ddba11[m] whoops dequbed Ewout
*** Users on #haskell: haasn RusAlex vk3wtf glamas Nik05 atraii abra0 winny
    metalrain albel727 Chousuke sis7 ruffy_ dustinm- dazage uberj divVerent
    mceier thonkpod riatre Twey jlpeters troydm higherorder cheater entel avn
    Firedancer raoulb kAworu kapilp raoul tdammers enragedjam enemeth79
    devurandom vin-ivar hiptobecubic theorbtwo sms bolverkr zmlww xcthulhu
    xstill ftop devalot mikolaj Ornedan maerwald tms_ abrar dixie_
    Robin_Jadoul amx phaazon clynamen_ kav Ranhir rom1504 Tourist
*** Users on #haskell: SquidDev aplainzetakind duairc moocow_ AWizzArd micro
    betawaffle andreabedini shadowdaemon srid rizary_ Konehaltia dpn` rodlogic
    jonrh monad_cat hsiktas scav pent eruditass Shun131 coot alexknvl
    sebastianrkg alunduil NemesisD Neuromancer Folkol bartavelle Clint bbear_
    jfredett hackage DDR UserOO7 tomku daissgr pcoutin niklasb_ tazjin
    spamlessj vqrs jzl casdr_ carter tsahyt_ sethetter EduardoBautista gonz_
    caasih bjs alexelcu iravid spinda alextes jstolarek
*** Users on #haskell: ixian rotty fionnan juri_ Remavas joehillen defanor
    Geekingfrog obiwahn hvr Ferdirand Someguy123 strangeglyph nkaretnikov
    coius__ Paks mulk ZoFLo J_Arcane jrslepak milessabin malthe adadelta
    Ring0` Mon_Ouie yorick Entroacceptor _ht jonge Mo0O noko_ bollu mjlee
    scinawa fliife artem bendo arw SrPx liquorice cemerick AndreasK d0liver
    ebutleriv reyu [exa] bandali fryguybo1 e2 michalisko pingu_ mjrosenb
    Jacoby6000 wadadli fantasti` Adeon violeta lowryder edwtjo
*** Users on #haskell: urdh sea-gull dyl_ gspia dcoutts gregberns paf31_
    edmundnoble leah2 MatrixBot3 ap5 infinity0 dan64 systemfault natim87
    earthy wagle hjozwiak sdrodge teej flebron nurupo waskell styledash trebuh
    Deadhand bengt_ alp kaol Seich phlym beka lachenmayer otulp ByronJohnson
    Tene sandman13 Cale monokrome nibbling_ saidinwot1 xtsee abuss bsima
    hiredman mtjmullen jdevlieghere brisbin umachan wtw hc statusbot Hijiri
    vzdraz ion pdxleif dilinger dashkal charukiewicz w1gz
*** Users on #haskell: nivpgir_ polux7 xacktm SolarAquarion mudri petermw
    totte mupf xante aveltras petercommand hongminhee int-e lambdabot habbah
    ft swalladge ycheng tomjaguarpaw christopher jackdk Moyst jesyspa tolt
    nshepperd1 Madars_ cjh` Unode ekleog Tristan-Speccy Jello_Raptor amuck
    tstat implementation aristid VSpike arkeet aib dsal kip srhb Drezil fiQ2
    thebnq liff bjobjo stylewarning bitonic averell arianvp quaestor Ke spoonm
    DustyDingo fredcy- Ulrar mxf TallerGhostWalt
*** Users on #haskell: lispy a3Dman cjay- Kiruwa qzo topos stilgart lukelau
    twk- catern no-n jackhill raid lpsmith vjoki pierrot bananagram `slikts
    myme affinespaces mitchellsalad mstruebing nitrix dolanbatar sbrg sud0
    rootnode Cathy Netwolf nshepperd2 pong azahi rotaerk kqr chindy Ankhers
    pdgwien madnight dysfigured atomi freeside jol TommyC andromeda-galaxy
    dexterfoo zerokarmaleft PierreM heath lugh jvanbure luite dstolfa swater
    Kamuela jsatk DigitalKiwi comboy nekomune
*** Users on #haskell: teehemkay Arguggi qz statusfailed oats Athas linoge
    Intensity Dykam dmj` wildsebastian amatecha thi newhoggy_ nh2 integral
    edwardk dumptruckman ibloom roflik tsani asm89 Franciman sm codedmart
    agrif marble_visions yumh ski e bdw Philonous mikolaj_ thallada _janne
    daGrevis mrus h30 dxld vktec zymurgy SlashLife Patternmaster Logio nyaomi
    epta tristanC fr33domlover Meanirelli ent CindyLinz srk GGMethos canta
    digia __4matter_ jtcs silverneedle Squarism tehidiot
*** Users on #haskell: stiell griddle cpape @Sigyn Firedancer_ tA- Igloo
    bcmiller restrictedchoice bitemyapp noan tureba hsyl20 zenzike lemald
    evilmonads AkhILman phadej absence greeny__ deu krystianbajno @shapr
    __name__ gothos klugez gargawel_ aidecoe uwap_ terrorjack__ dgpratt
    koankeeper Flonk mrsbear loc kini wayne Annihitek ynyounuo rkrishnan
    vodkaInferno bs lyxia zxrf graingert adius @ChanServ ereu benl23 echoreply
    Heffalump chivay travv0 simon elcaro stefan-__ koz_ sigmundv-
*** Users on #haskell: Maxdamantus johnstein n3t pacak Batholith esph
    wrengr_away stvc bob_twinkles nemesit|znc steell_ Zemyla lavalike cross
    JSharp drdo kipras`away zv ullbeking jbetz d6e dh freusque apoc andjjj23
    Jon rootmos Rembane lstdgtfp joeyh m-renaud sclv Nevoic Ekho dfordivam
    subfacto1 newhoggy kyagrd__ ocharles Guillaum immae nopf kubrat adamse
    mmaruseacph2 cbarrett lightandlight jetpack_joe pasukon nonzen Sparadox
    energizer_ M2tias johs so furnost adamCS joeytwiddle
*** Users on #haskell: kloeri iron_houzi davean idupree markhuge jinblack
    solarus djanatyn anderson _6a68 avp Kneiva sssilver pharaun fiatjaf wz1000
    Xandaros eagleflo adarshaj d3lxa crooked EvanR luigy geal eldritch
    koala_man rodgzilla barrucadu kosmikus tchakka lieven Deewiant _flow_ sivs
    fiddlerwoaroof puffnfresh exio4 carbolymer coldpress Aleksejs [df]
    lurkless exferenceBot Reisen lortabac connrs- deni hexagoxel gambpang t36s
    blackdog ammar2 locallycompact Eliel scivola
*** Users on #haskell: Jonno_FTW connrs_ PHO scal mrd hodapp flogfr abbe jmsx
    Peter_Storm ecx86 gsingh93 michalrus Tspoon__ c-rog dredozubov MasseR
    runawayfive haveo Phyx- noctux AJTJ RoguePointer bcoppens diginet apeyeoux
    orzo exarkun _guios suzu
*** #haskell URL: http://www.haskell.org/
*** #haskell modes: +CLnt
*** #haskell was created on 2006-11-26 14:42:48
*** pqzx (~pqzx@unaffiliated/pqzx) has joined channel #haskell          [09:30]
*** Tops2 (~Tobias@dyndsl-095-033-016-018.ewe-ip-backbone.de) has joined
    channel #haskell                                                    [09:31]
*** sword865 (uid208942@gateway/web/irccloud.com/x-hgohopzkptpupbhn) has
    joined channel #haskell
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    joined channel #haskell                                             [09:32]
*** jluttine (~jluttine@109.204.147.177) has quit: Ping timeout: 268 seconds
                                                                        [09:35]
*** MoarSpaceFi (~Forgot_my@65.155.84.20) has quit: Read error: Connection
    reset by peer                                                       [09:36]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Ping timeout: 245 seconds                                     [09:37]
*** jluttine (~jluttine@109.204.147.177) has joined channel #haskell
<dmwit> M2en[m]: Not necessarily. Bool is a type constructor with a very
        simple kind.
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    quit: Ping timeout: 272 seconds                                     [09:38]
<dmwit> Maybe is a type constructor of kind * -> *; its order is 1. Whether
        that qualifies as "higher-kinded" depends on whether your "higher"
        means "higher than 0" or "higher than 1" (and different people choose
        differently here).                                              [09:39]
<dmwit> N.B. `Either Int` is not a type constructor, even though it has an
        order-1 kind.
<jle`> M2en[m]: a type constructor is a syntactic construct, that can
       represent something higher-kinded or not higher-kinded
<dmwit> (or, spelling that sentence differently: ...even though it has an
        arrow in its kind.)                                             [09:40]
*** porrifolius (~porrifoli@115-189-88-185.mobile.spark.co.nz) has joined
    channel #haskell                                                    [09:42]
*** gbowen (~gregb@101.164.163.88) has left channel #haskell: #haskell  [09:44]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell
*** merijn (~merijn@83-160-49-249.ip.xs4all.nl) has joined channel #haskell
                                                                        [09:46]
*** fryguybo1 (~fryguybob@173-243-161-100.tvc-ip.com) has quit: Remote host
    closed the connection
*** falafel (~falafel@static-176-185-149-136.axione.abo.bbox.fr) has quit:
    Ping timeout: 245 seconds                                           [09:48]
*** jao (~jao@pdpc/supporter/professional/jao) has quit: Remote host closed
    the connection                                                      [09:49]
*** nous1024 (~nous1024@2405:6586:4040:800:a1c3:3b63:4e81:c315) has quit:
    Quit: Leaving
<M2en[m]> jle`: Right, like a type constant or unary type constructor are not
          higher-kinded.                                                [09:50]
*** Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has quit: Ping timeout:
    246 seconds
*** gbowen (~hyponoia@101.164.163.88) has joined channel #haskell
*** merijn (~merijn@83-160-49-249.ip.xs4all.nl) has quit: Ping timeout: 268
    seconds
*** spew (uid195861@gateway/web/irccloud.com/x-nbeeznzakvypimsq) has quit:
    Quit: Connection closed for inactivity                              [09:51]
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    joined channel #haskell                                             [09:52]
*** j2j (~Thunderbi@ool-18be11a0.dyn.optonline.net) has joined channel
    #haskell
*** porrifolius (~porrifoli@115-189-88-185.mobile.spark.co.nz) has quit: Quit:
    Leaving                                                             [09:53]
*** jao (~jao@pdpc/supporter/professional/jao) has joined channel #haskell
*** porrifolius (~porrifoli@115-189-88-185.mobile.spark.co.nz) has joined
    channel #haskell
*** jao (~jao@pdpc/supporter/professional/jao) is now known as Guest64353
*** jeltsch (~wolfgang@6558-df23-fa74-c9da-3e80-82b2-07d0-2001.dyn.estpak.ee)
    has quit: Ping timeout: 250 seconds                                 [09:56]
*** Guest64353 (~jao@pdpc/supporter/professional/jao) has quit: Remote host
    closed the connection                                               [09:57]
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    quit: Ping timeout: 244 seconds                                     [09:58]
*** jao- (~jao@pdpc/supporter/professional/jao) has joined channel #haskell
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Ping timeout: 272 seconds
*** jao- (~jao@pdpc/supporter/professional/jao) is now known as jao     [09:59]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell                                             [10:00]
*** porrifolius (~porrifoli@115-189-88-185.mobile.spark.co.nz) has quit: Quit:
    Leaving
*** fphilipe (~phil@2a02:168:f6c3:0:dd91:460c:c933:c41a) has quit: Ping
    timeout: 252 seconds
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    joined channel #haskell
*** dmitri (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has joined channel
    #haskell                                                            [10:01]
* ski wouldn't call `not' higher-order, but would so call `interact'
*** dyl (~dylukes@169.228.189.219) has quit: Quit: My MacBook has gone to
    sleep. ZZZzzz…
<ski> (and ditto for `Maybe' vs. `Fix')
*** dyl (~dylukes@169.228.189.219) has joined channel #haskell          [10:03]
*** gbowen (~hyponoia@101.164.163.88) has left channel #haskell: #haskell
                                                                        [10:04]
*** dmitri (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has quit: Client Quit
                                                                        [10:05]
*** dmitri (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has joined channel
    #haskell                                                            [10:07]
*** antsmartian (~antsmarti@171.78.172.181) has joined channel #haskell
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    quit: Ping timeout: 245 seconds
<dmwit> ski: I'd like to briefly play devil's advocate and provide a point in
        favor of "`Maybe` is higher-kinded".                            [10:08]
*** dyl (~dylukes@169.228.189.219) has quit: Quit: My MacBook has gone to
    sleep. ZZZzzz…
<dmwit> ski: We don't think of order-1 functions as higher-order, because
        pretty much every language from C up has order-1 functions.     [10:09]
<dmwit> But most of the languages that were popular at the time the
        terminology were forming didn't have order-2 functions. So those
        qualify as higher-order.
<dmwit> Now at the type level, C and many of the other popular languages of
        the time didn't even have order-1 types.
<dmwit> So for a lot of people, making it to order 1 was already higher-kinded
        than they were used to.                                         [10:10]
*** theDon (~td@94.134.91.3) has quit: Ping timeout: 244 seconds
<dmwit> e.g. it was a big innovation when Java started allowing types to be
        parameterized; C++ was a big deal in part because of its
        parameterization; it was a time when that was an exciting innovation,
        not a background idea that every language just had by default.  [10:11]
*** gabiruh_ (~gabiruh@179.177.178.0.dynamic.adsl.gvt.net.br) has joined
    channel #haskell
*** nfd (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has joined channel
    #haskell
*** aarvar (~foewfoiew@50.35.43.33) has joined channel #haskell
*** renzhi (~renzhi@142.184.127.224) has quit: Ping timeout: 272 seconds
*** hyponoia (~hyponoia@101.164.163.88) has joined channel #haskell
*** gabiruh (~gabiruh@2804:7f7:a5ac:4f05:91f0:4d2a:6b7b:f412) has quit: Ping
    timeout: 264 seconds                                                [10:12]
*** theDon (~td@muedsl-82-207-238-081.citykom.de) has joined channel #haskell
                                                                        [10:13]
*** hyponoia (~hyponoia@101.164.163.88) has left channel #haskell: #haskell
*** hyponoia (~hyponoia@101.164.163.88) has joined channel #haskell     [10:14]
*** cpup (~cpup@24-151-32-148.dhcp.nwtn.ct.charter.com) has joined channel
    #haskell                                                            [10:15]
*** Kundry_Wag (~Kundry_Wa@179.113.136.18) has quit: Remote host closed the
    connection                                                          [10:16]
*** Kundry_Wag (~Kundry_Wa@179.113.136.18) has joined channel #haskell  [10:17]
*** fryguybob (~fryguybob@173-243-161-100.tvc-ip.com) has joined channel
    #haskell                                                            [10:18]
*** nshepperd (~nshepperd@185.212.170.227) has quit: Quit: bye          [10:19]
*** porrifolius (~porrifoli@115-189-88-185.mobile.spark.co.nz) has joined
    channel #haskell                                                    [10:20]
*** Kundry_Wag (~Kundry_Wa@179.113.136.18) has quit: Remote host closed the
    connection
*** Thra11 (Thra11@gateway/vpn/protonvpn/thra11) has quit: Ping timeout: 258
    seconds
*** atraii (~atraii@c-24-2-89-23.hsd1.ut.comcast.net) has quit: Quit: ZNC
    1.7.4 - https://znc.in                                              [10:22]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell                                                    [10:24]
*** atraii (~atraii@c-24-2-89-23.hsd1.ut.comcast.net) has joined channel
    #haskell
*** xff0x (~fox@softbank126114183029.bbtec.net) has quit: Quit: xff0x   [10:25]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has joined
    channel #haskell
*** fphilipe (~phil@2a02:168:f6c3:0:dd91:460c:c933:c41a) has joined channel
    #haskell                                                            [10:31]
*** Kiruwa (kiruwa@gateway/shell/blinkenshell.org/x-uuiriliuqwpojucm) has
    quit: Ping timeout: 248 seconds                                     [10:32]
*** machinedgod (~machinedg@134.41.46.111) has joined channel #haskell  [10:33]
*** ddellacosta (~dd@2001:978:2305:42::a13e) has quit: Ping timeout: 264
    seconds                                                             [10:35]
*** j2j (~Thunderbi@ool-18be11a0.dyn.optonline.net) has quit: Quit: j2j
                                                                        [10:36]
*** machinedgod (~machinedg@134.41.46.111) has quit: Quit: Lost terminal
                                                                        [10:38]
*** Kiruwa (kiruwa@gateway/shell/blinkenshell.org/x-drfpjrzytoyowhyo) has
    joined channel #haskell                                             [10:39]
<porrifolius> Hi, I'm trying to understand practical application of category
              theory, so... questions!                                  [10:40]
<porrifolius> A category is partly defined by the class Ob(C) of objects it
              contains.  Naively I think in terms of a set of objects, but it
              could be a proper class
<porrifolius> I don't think I understand 'proper class'... so the same object
              could be in the category twice?  With different morphisms
              to/from each occurrence?  What is an example of a category over
              a proper class?
*** merijn (~merijn@83-160-49-249.ip.xs4all.nl) has joined channel #haskell
                                                                        [10:41]
<jusss> what is an action?
<jusss> what is a context which related with monad?                     [10:42]
<heatsink> An action isn't Haskell terminology, but some people use "action"
           as a metaphor                                                [10:43]
*** dbmikus__ (~dbmikus@2601:645:8202:32ac:b830:5308:930e:a986) has quit: Ping
    timeout: 252 seconds                                                [10:44]
<heatsink> It is helpful to think about values of some monad types, such as
           IO, as actions that can be executed.
<heatsink> For example, when 'getLine' runs, it reads a string and returns it.
           You could call getLine an IO action.                         [10:45]
*** merijn (~merijn@83-160-49-249.ip.xs4all.nl) has quit: Ping timeout: 245
    seconds
<jusss> heatsink: why not just call it a function?
*** lagothrix (~lagothrix@unaffiliated/lagothrix) is now known as Guest91376
                                                                        [10:46]
*** lagothrix (~lagothrix@unaffiliated/lagothrix) has joined channel #haskell
<heatsink> getLine is not a function
<heatsink> You can't pass arguments to it
<heatsink> This is an error:
<heatsink> > getLine "hello"
<lambdabot>  error:
<lambdabot>      • Couldn't match expected type ‘[Char] -> t’
<lambdabot>                    with actual type ‘IO String’
<jusss> :t getLine                                                      [10:47]
<lambdabot> IO String
*** hyponoia (~hyponoia@101.164.163.88) has left channel #haskell: #haskell
                                                                        [10:48]
<jusss> heatsink: if it's not a function then why it can run?
*** tabemann (~tabemann@2600:1700:7990:24e0:e806:660e:3766:21c9) has joined
    channel #haskell
*** Guest91376 (~lagothrix@unaffiliated/lagothrix) has quit: Ping timeout: 245
    seconds
*** chalkmon1 (~chalkmons@unaffiliated/chalkmonster) has joined channel
    #haskell                                                            [10:49]
*** chalkmonster (~chalkmons@unaffiliated/chalkmonster) has quit: Ping
    timeout: 246 seconds
<jusss> :t (Just 3)
<lambdabot> Num a => Maybe a
<jusss> :t (Just Int)                                                   [10:50]
<lambdabot> error:
<lambdabot>     • Data constructor not in scope: Int
<lambdabot>     • Perhaps you meant one of these:
<heatsink> Why can't it run?  We have lots of things that aren't functions but
           can run.  SQL queries, regular expressions, shell commands...
                                                                        [10:51]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Remote host closed the connection                             [10:52]
<jusss> heatsink: but that's not in a language, they're in a system
*** nineonine (~nineonine@msp-vpn.calabrio.com) has joined channel #haskell
*** nbloomf (~nbloomf@2600:1700:83e0:1f40:5dfd:e507:ef51:353c) has quit: Quit:
    My MacBook has gone to sleep. ZZZzzz…                              [10:53]
<jusss> heatsink: function can return Int, String, they can't return String in
        the system
<heatsink> Think of IO as a system like that                            [10:54]
<jusss> a program in the system can not return String or any other types, they
        can only return 0~255
*** Saukk (~Saukk@2001:998:e4:4a03:1c59:9bb5:b94c:3) has joined channel
    #haskell
<heatsink> The Haskell language doesn't have any built-in ability to do IO,
           but it has a standard library that can construct IO commands and
           ask them to run
<heatsink> I should say, it can construct IO actions and ask them to run
                                                                        [10:55]
*** ndesai (~ndesai@2607:fea8:3160:6bf:48af:e5c:4256:fc3d) has quit: Ping
    timeout: 264 seconds
<jusss> ok
*** nbloomf (~nbloomf@2600:1700:83e0:1f40:5dfd:e507:ef51:353c) has joined
    channel #haskell                                                    [10:56]
*** dmitri (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has quit: Quit: This
    computer has gone to sleep                                          [10:57]
*** pi__ (~pi@dslb-094-221-122-125.094.221.pools.vodafone-ip.de) has joined
    channel #haskell                                                    [10:58]
*** liberiga (~liberiga@gateway/tor-sasl/liberiga) has joined channel #haskell
                                                                        [10:59]
*** |Kin| (~|Kin|@178.162.204.238) has quit:                            [11:00]
*** mkoenig (~mkoenig@ip-176-198-201-117.hsi05.unitymediagroup.de) has quit:
    Ping timeout: 245 seconds
*** mkoenig (~mkoenig@ip-176-198-201-117.hsi05.unitymediagroup.de) has joined
    channel #haskell                                                    [11:01]
*** pi_ (~pi@dslb-178-006-080-218.178.006.pools.vodafone-ip.de) has quit: Ping
    timeout: 248 seconds
<dmwit> porrifolius: "proper class" doesn't mean "two copies of a thing", it
        means "a bigger collection than standard set theory is prepared to
        describe"
<dmwit> porrifolius: There's foundational issues with talking about the "set
        of all sets". So you need another meta-level. You can talk about the
        "proper class of all sets".                                     [11:02]
<dmwit> porrifolius: And indeed one standard category that people talk about
        is traditionally named SET, and its objects is the proper class of
        sets. Arrows in this category or normal set-theoretic functions;
        composition is standard function composition.
*** KeyJoo (~KeyJoo@37.1.12.166) has quit: Quit: KeyJoo
<dmwit> jusss: If I write down a definition of the list of Fibonacci numbers,
        can it "run"? I say yes. But it is not a function.              [11:03]
<dmwit> jusss: "function" and "can it run" are just separate properties. Not
        related.
*** dfeuer (~dfeuer@wikimedia/Dfeuer) has joined channel #haskell       [11:06]
*** nineonine (~nineonine@msp-vpn.calabrio.com) has quit: Read error:
    Connection reset by peer
*** fosterite (~fosterite@2601:445:447f:dd14:31e2:f611:9ec0:f2fe) has quit:
    Remote host closed the connection                                   [11:10]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell
*** fosterite (~fosterite@2601:445:447f:dd14:31e2:f611:9ec0:f2fe) has joined
    channel #haskell
*** fosterite (~fosterite@2601:445:447f:dd14:31e2:f611:9ec0:f2fe) has quit:
    Remote host closed the connection
*** fosterite (~fosterite@2601:445:447f:dd14:31e2:f611:9ec0:f2fe) has joined
    channel #haskell                                                    [11:11]
*** fosterite (~fosterite@2601:445:447f:dd14:31e2:f611:9ec0:f2fe) has quit:
    Remote host closed the connection
*** fosterite (~fosterite@c-68-46-86-159.hsd1.mn.comcast.net) has joined
    channel #haskell                                                    [11:12]
*** fosterite (~fosterite@c-68-46-86-159.hsd1.mn.comcast.net) has quit: Remote
    host closed the connection
*** ndesai (~ndesai@2607:fea8:3160:6bf:48af:e5c:4256:fc3d) has joined channel
    #haskell
*** wroathe_ (~msgnickse@2607:fb90:17d0:666:373:9a2f:9d90:3146) has joined
    channel #haskell                                                    [11:13]
*** CSP-SOFTWARE (~uwx@172.245.163.218) has quit: Ping timeout: 248 seconds
                                                                        [11:14]
*** Lears (~leary@122-57-138-132-adsl.sparkbb.co.nz) has quit: Ping timeout:
    245 seconds
*** wroathe (~msgnickse@74-94-87-126-Minnesota.hfc.comcastbusiness.net) has
    quit: Ping timeout: 248 seconds
*** fphilipe (~phil@2a02:168:f6c3:0:dd91:460c:c933:c41a) has quit: Ping
    timeout: 252 seconds                                                [11:17]
*** keepLearning512 (~keepLearn@106.51.235.188) has joined channel #haskell
                                                                        [11:19]
*** phillip (~phillip@195.206.169.238) has joined channel #haskell
*** wroathe_ (~msgnickse@2607:fb90:17d0:666:373:9a2f:9d90:3146) has quit: Read
    error: Connection reset by peer
*** otto_s_ (~user@p4FF27DEA.dip0.t-ipconnect.de) has joined channel #haskell
                                                                        [11:20]
*** wroathe (~msgnickse@c-68-54-25-135.hsd1.mn.comcast.net) has joined channel
    #haskell                                                            [11:21]
*** otto_s (~user@p4FF27D08.dip0.t-ipconnect.de) has quit: Ping timeout: 245
    seconds                                                             [11:23]
*** wroathe_ (~msgnickse@c-68-54-25-135.hsd1.mn.comcast.net) has joined
    channel #haskell
*** wroathe (~msgnickse@c-68-54-25-135.hsd1.mn.comcast.net) has quit: Read
    error: Connection reset by peer
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Ping timeout: 245 seconds                                     [11:25]
*** DTZUZU (~DTZUZU@S0106bcd165662a4d.vs.shawcable.net) has joined channel
    #haskell                                                            [11:26]

[周二 8月 20 2019]
*** You have joined channel #haskell                                    [11:39]
*** Topic for #haskell: https://www.haskell.org |
    https://wiki.haskell.org/IRC_channel | Paste code/errors:
    https://gist.github.com/ | Logs:
    http://tunes.org/~nef/logs/haskell/?C=M;O=D |
    https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic:
    #haskell-offtopic | https://downloads.haskell.org
*** #haskell: topic set by glguy, 2019-01-05 23:21:52
*** Users on #haskell: jusss wroathe DTZUZU wroathe_ otto_s_ phillip
    keepLearning512 ndesai dfeuer mkoenig liberiga pi__ Saukk chalkmon1
    tabemann lagothrix Kiruwa ___laika atraii heatsink porrifolius fryguybob
    cpup theDon aarvar nfd gabiruh_ antsmartian jao jluttine sword865 Tops2
    pqzx cybai_ pfurla drbean freeman[w]__ doublex nowhereman shafox eiGHttt
    threewood MonkeyNOS klntsky dansho jedws ktonga poljar1 ziyourenxiang
    rubik plutoniix keep_learning M2en[m] Foritus mreh
*** Users on #haskell: m1dnight_ nullifidian_ laem ltriant petersen DTZUZO
    davr0s__ sektor vicfred khisanth_ mmfood s00pcan cchalmers gentauro
    inkbottle Lord_of_Life chirpsalot Chobbes remexre cheers Sgeo_
    phanimahesh[m] darjeeli1 tabaqui Wizek albertus1 texasmynsted Anthaas
    epicallan alicemaz nahra gienah dale rruizt ohko henriksod pierreimmo t7
    carlomagno subttle sudden Lowl3v3l Kaivo pavonia lastmanstanding ahri
    xplat wonko7 pie_ ystael saml xlogan[m] tombusby mimi_vx
*** Users on #haskell: Putonlalla ravenousmoose ericsagnes dddddd cyberlard
    tomboy64 catsup smakarov Wuzzy theophil893 jgt MarcelineVQ sphalerite
    MindlessDrone dennisb Stanley00 DwarfMaster alx741 rsoeldner amiri Axman6
    zaquest howdoi day reorder_ kispocok dqd kori davex32[m] bydo atk jlamothe
    linduxed phreedom noumenon revprez_stg hpc moldybits wildlander infinisil
    acarrico _dga nyuszika7h Sheilong tuxsoy tsaka_ PlasmaStar pyan sukbeom
    nesqi typedrat and_pete Remy^ nil Niamkik
*** Users on #haskell: justanotheruser xelxebar_ kuttifunk pingiun thunderrd
    yushyin S007 obfusk__ Jaxan cynick ManiacTwister s4msung jle` dolio TMA
    sagax a7250ag noCheese Unhammer jonatan cantstanya Surgeon[m] Boarders
    Blkt jamestmartin chin-tastic Sose_ sw1nn jb55 blankhart dopplergange
    amosbird unlink2 datajerk phaul jrm revprez_anzio notzmv null14[m]
    eacameron nisstyre aearnus[m] ephemera_ ctag_ hive-mind jorj mjuad
    sghir_med[m] danielemarsella[ inflationova[m] spion seliopou
*** Users on #haskell: Digit tabaqui1 mountaingoat marek kark equbit[m] oleks
    mnrmnaugh thjread NinjaTrappeur recj monochrom tinwood _ashbreeze_
    drewbarbs SCHAPiE ClaudiusMaximus leothrix mwelt boj bbear shutdown_-h_now
    erikd drewr rembo10 johnw polman greymalkin ysangkok jix Tesseraction yitz
    sim590 lihram giraffe cjwelborn Bish relrod PtxDK seanparsons jchia andyo
    dave_uy ab9rf raek robogoat dTal cp kjak tv lassulus ziman andreas303
    m4lvin javjarfer[m] NightA Tuplanolla zzz
*** Users on #haskell: treehaqr Arahael acro Natch dmwit infandum nicoulaj
    raatiniemi Ckat miseenplace[m] cgfbee mniip yahb maralorn sdx23 markus1189
    i7c tessier Vtec234 PragCypher xarian unclechu vimto thaumavorio reggie_
    Bergle_1 valdyn jdt delYsid ozychhi aldum cyphase peel srnty oeblink
    telser bgamari wraithm jophish Taneb feuerbach_ Cthalupa bvad mccoyc kraem
    c_wraith jameekim yaroot hodlwave forell crtschin copypasteque jwynn6
    cheshircat theNeuron dibblego tumdedum rosalux
*** Users on #haskell: RecursiveG rann glowcoil megaTherion sm[m] banjiewen
    saurik bwe ambrosia_ SegFaultAX intelux matheus mikeplus64 Forkk milli
    arsdragonfly Hotbees Enigmagic bspar lexi-lambda haroldwu Guest39039
    cyjiao__ PoliticsII ajmcmiddlin xyggos mankyKitty verlet64 mujx[m4
    potato44[m] d1mur4tdj[m] stepnem cepxuo imposs[m] eyenx[m] mmynsted[m]
    dongcarl tejok[m] sellout- nybble41[m] Lermex nlofaro bradparker georgew
    yrid[m] kumarbis[m] joenase[m] excel_gate[m] Nascha dxtr
*** Users on #haskell: benwr_ akermu hifutakiko[m] nikivi scheming_around
    miklcct grumble tnks mpickering net4all laniusfnv[m] meck cods Nikotiini
    zmlww[m] rajivr___ Klumben gilbertw1 quarters xorpse Bigcheese alanz
    Pete[m] Guy[m]1 Lite[m] foxadee[m] GhostofaConsole[ yi[m] adaizen[m]
    alibabzo kerru[m] jesusvega[m] pqwy[m] hogarth[m] beatricejensen[m
    afontain[m] gmips[m] charliebucket[m] kylos[m] dustyp[m] matrixyz[m]
    JoGoSi[m] glowpelt alex[m]14 wrunt[m] jak[m] MerlinGttlinger[
*** Users on #haskell: pineapple[m] Grgoire[m] MartinKlimi[m] WeiTang[m]
    GNULambda[m] alexfmpe[m] bkl[m] jeeg[m] MonsieurArcher[m dag[m]
    apurvapavaskar Majiir ad5twoknebor[m] spacekitteh[m] atopuzov[m]
    mobile_x[m] josiah_sama sergiotarxz[m] seventh__ buggeas40d[m]
    haskelllisp[m] glguy michaelpj angerman interruptinuse gluegadget TimWolla
    PyroLagus sarahzrf fiddeldibu[m] beaky Adluc zabracks nuxdie a3f Randy
    stux|RC edwel[m] ryzokuken feepo unsymbol morgib dukedave nbouscal duncan
*** Users on #haskell: Jabbslad joel135 mingc elvishjerricco sebhoss sgraf
    simony AfC billstclair DrDuck ephemeron fingerzam rslima___ xnyhps heyj
    datapup_ w1d3m0d3 steshaw[m] mycroftiv nckx jwaksbaum[m] dmiles clog
    Fubar^ Vq opqdonut sqrt2 noexcept hegge APic rzmt sicklorkin Rudd0 aesi
    irclogger_com devopsdeluxe cocreature Profpatsch sterni dminuoso bind
    lkurusa vaibhavsagar xalek[m] vikraman tmallard[m] Tom[m]7 reconmaster[m]
    ovigren[m] mattia[m] jochens[m] krhubert[m] jumzi[m]
*** Users on #haskell: jwerner[m] jhgarner[m] Kenneth[m] vorbex[m]
    wildtrees[m] sudorebootsudor4 midi[m] sayukimans[m] sriehl[m] ldesgoui[m]
    luisjira[m] nartir[m] josef[m] vkleen jibby[m]1 intellection3to3 patonw[m]
    neat72[m] krowlan3[m] Vincent[m]2 Jonathan[m]2 corin[m]1 somni[m] rowan[m]
    M|GNUisnotLinux[ lmolr[m] imp0s5ible contrun[m] jonreeve[m] ghastfilms[m]
    gandi[m] glothit7ok[m] PotatoRick[m] eckt[m] deikatsuo[m] dxml[m]
    pothyurf[m] godva[m] pschooom[m] dice[m]1 arianvp[m]
*** Users on #haskell: LasEspuelas asayers[m]1 adziahel[m] lapav[m] cbg[m]
    abc123zzz[m] brandon123[m] cosson[m] corin[m] JoelMcCracken[m] fulgjon
    Ericson2314 sujeet siraben sielicki jonge[m] stan[m] macerbi[m] maigel[m]
    simbergm kadoban GregKNicholson[m iceychris[m] lierdakil[m] kaychaks[m]
    fgaz ClownMaster[m] EuAndreh[m] hdurer[m] domenkozar[m] giuseppe[m]
    gmind[m] aloiscochard[m] humanwire[m] M0ddba11[m] whoops dequbed Ewout
    haasn RusAlex vk3wtf glamas Nik05 abra0 winny
*** Users on #haskell: metalrain albel727 Chousuke sis7 ruffy_ dustinm- dazage
    uberj divVerent mceier thonkpod riatre Twey jlpeters troydm higherorder
    cheater entel avn Firedancer raoulb kAworu kapilp raoul tdammers
    enragedjam enemeth79 devurandom vin-ivar hiptobecubic theorbtwo sms
    bolverkr zmlww xcthulhu xstill ftop devalot mikolaj Ornedan maerwald tms_
    abrar dixie_ Robin_Jadoul amx phaazon clynamen_ kav Ranhir rom1504 Tourist
    SquidDev aplainzetakind duairc moocow_ AWizzArd
*** Users on #haskell: micro betawaffle andreabedini shadowdaemon srid rizary_
    Konehaltia dpn` rodlogic jonrh monad_cat hsiktas scav pent eruditass
    Shun131 coot alexknvl sebastianrkg alunduil NemesisD Neuromancer Folkol
    bartavelle Clint bbear_ jfredett hackage DDR UserOO7 tomku daissgr pcoutin
    niklasb_ tazjin spamlessj vqrs jzl casdr_ carter tsahyt_ sethetter
    EduardoBautista gonz_ caasih bjs alexelcu iravid spinda alextes jstolarek
    ixian rotty fionnan juri_ Remavas joehillen
*** Users on #haskell: defanor Geekingfrog obiwahn hvr Ferdirand Someguy123
    strangeglyph nkaretnikov coius__ Paks mulk ZoFLo J_Arcane jrslepak
    milessabin malthe adadelta Ring0` Mon_Ouie yorick Entroacceptor _ht jonge
    Mo0O noko_ bollu mjlee scinawa fliife artem bendo arw SrPx liquorice
    cemerick AndreasK d0liver ebutleriv reyu [exa] bandali e2 michalisko
    pingu_ mjrosenb Jacoby6000 wadadli fantasti` Adeon violeta lowryder edwtjo
    urdh sea-gull dyl_ gspia dcoutts gregberns paf31_
*** Users on #haskell: edmundnoble leah2 MatrixBot3 ap5 infinity0 dan64
    systemfault natim87 earthy wagle hjozwiak sdrodge teej flebron nurupo
    waskell styledash trebuh Deadhand bengt_ alp kaol Seich phlym beka
    lachenmayer otulp ByronJohnson Tene sandman13 Cale monokrome nibbling_
    saidinwot1 xtsee abuss bsima hiredman mtjmullen jdevlieghere brisbin
    umachan wtw hc statusbot Hijiri vzdraz ion pdxleif dilinger dashkal
    charukiewicz w1gz nivpgir_ polux7 xacktm SolarAquarion mudri
*** Users on #haskell: petermw totte mupf xante aveltras petercommand
    hongminhee int-e lambdabot habbah ft swalladge ycheng tomjaguarpaw
    christopher jackdk Moyst jesyspa tolt nshepperd1 Madars_ cjh` Unode ekleog
    Tristan-Speccy Jello_Raptor amuck tstat implementation aristid VSpike
    arkeet aib dsal kip srhb Drezil fiQ2 thebnq liff bjobjo stylewarning
    bitonic averell arianvp quaestor Ke spoonm DustyDingo fredcy- Ulrar mxf
    TallerGhostWalt lispy a3Dman cjay- qzo topos stilgart lukelau
*** Users on #haskell: twk- catern no-n jackhill raid lpsmith vjoki pierrot
    bananagram `slikts myme affinespaces mitchellsalad mstruebing nitrix
    dolanbatar sbrg sud0 rootnode Cathy Netwolf nshepperd2 pong azahi rotaerk
    kqr chindy Ankhers pdgwien madnight dysfigured atomi freeside jol TommyC
    andromeda-galaxy dexterfoo zerokarmaleft PierreM heath lugh jvanbure luite
    dstolfa swater Kamuela jsatk DigitalKiwi comboy nekomune teehemkay Arguggi
    qz statusfailed oats Athas linoge
*** Users on #haskell: Intensity Dykam dmj` wildsebastian amatecha thi
    newhoggy_ nh2 integral edwardk dumptruckman ibloom roflik tsani asm89
    Franciman sm codedmart agrif marble_visions yumh ski e bdw Philonous
    mikolaj_ thallada _janne daGrevis mrus h30 dxld vktec zymurgy SlashLife
    Patternmaster Logio nyaomi epta tristanC fr33domlover Meanirelli ent
    CindyLinz srk GGMethos canta digia __4matter_ jtcs silverneedle Squarism
    tehidiot stiell griddle cpape @Sigyn Firedancer_ tA- Igloo
*** Users on #haskell: bcmiller restrictedchoice bitemyapp noan tureba hsyl20
    zenzike lemald evilmonads AkhILman phadej absence greeny__ deu
    krystianbajno @shapr __name__ gothos klugez gargawel_ aidecoe uwap_
    terrorjack__ dgpratt koankeeper Flonk mrsbear loc kini wayne Annihitek
    ynyounuo rkrishnan vodkaInferno bs lyxia zxrf graingert adius @ChanServ
    ereu benl23 echoreply Heffalump chivay travv0 simon elcaro stefan-__ koz_
    sigmundv- Maxdamantus johnstein n3t pacak Batholith esph
*** Users on #haskell: wrengr_away stvc bob_twinkles nemesit|znc steell_
    Zemyla lavalike cross JSharp drdo kipras`away zv ullbeking jbetz d6e dh
    freusque apoc andjjj23 Jon rootmos Rembane lstdgtfp joeyh m-renaud sclv
    Nevoic Ekho dfordivam subfacto1 newhoggy kyagrd__ ocharles Guillaum immae
    nopf kubrat adamse mmaruseacph2 cbarrett lightandlight jetpack_joe pasukon
    nonzen Sparadox energizer_ M2tias johs so suzu _guios exarkun orzo
    apeyeoux diginet bcoppens RoguePointer AJTJ noctux
*** Users on #haskell: Phyx- haveo runawayfive MasseR dredozubov c-rog
    Tspoon__ michalrus gsingh93 ecx86 Peter_Storm jmsx abbe flogfr hodapp mrd
    scal PHO connrs_ Jonno_FTW scivola Eliel locallycompact ammar2 blackdog
    t36s gambpang hexagoxel deni connrs- lortabac Reisen exferenceBot lurkless
    [df] Aleksejs coldpress carbolymer exio4 puffnfresh fiddlerwoaroof sivs
    _flow_ Deewiant lieven tchakka kosmikus barrucadu rodgzilla koala_man
    eldritch geal luigy furnost adamCS joeytwiddle
*** Users on #haskell: kloeri iron_houzi davean idupree markhuge jinblack
    solarus djanatyn anderson _6a68 avp Kneiva sssilver pharaun fiatjaf wz1000
    Xandaros eagleflo adarshaj d3lxa crooked EvanR
*** #haskell URL: http://www.haskell.org/
*** #haskell modes: +CLnt
*** #haskell was created on 2006-11-26 14:42:48
<maerwald> technically you can also run with your arms (although more
           challenging)                                                 [11:41]
*** xff0x (~fox@210.57.57.162) has joined channel #haskell              [11:42]
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    joined channel #haskell                                             [11:43]
<MarcelineVQ> monochrom: my computer has no nose                        [11:44]
*** albertus11 (~seb@x4dbda723.dyn.telefonica.de) has joined channel #haskell
*** albertus1 (~seb@x4db5bf1f.dyn.telefonica.de) has quit: Ping timeout: 268
    seconds                                                             [11:45]
<monochrom> That's good news, because "code smell" cannot exist without a
            computer nose!                                              [11:46]
*** chalkmon1 (~chalkmons@unaffiliated/chalkmonster) has quit: Ping timeout:
    245 seconds
<porrifolius> Ok, I get the necessity of the meta-level.  So a distinction
              would be drawn between the category SET (which is a large
              category?) and a category Some_Sets whose Ob(C) was a (possibly
              infinite?) set of sets but not all of them?  There would
              probably be different morphisms and functors for each category,
              even though they sort of look similar.                    [11:47]
<porrifolius> So, in practical terms, and especially given how limited my
              mathematical knowledge is, when I'm trying to use categories to
              help me write software I'm probably going to be dealing with an
              Ob(C) which is a set?  But a strength of category theory is that
              the fundamental techniques work for proper classes as well.
*** unlink2 (~unlink2@p200300EBCBED660086844AF5772CB115.dip0.t-ipconnect.de)
    has quit: Ping timeout: 264 seconds                                 [11:49]
*** Sgeo__ (~Sgeo@ool-18b98995.dyn.optonline.net) has joined channel #haskell
                                                                        [11:50]
*** nfd (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has quit: Ping timeout:
    268 seconds
<jusss> dmwit: how you can write a fibonacci definition without a function?
                                                                        [11:51]
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    quit: Ping timeout: 272 seconds
*** fphilipe (~phil@2a02:168:f6c3:0:dd91:460c:c933:c41a) has joined channel
    #haskell
<jusss> the definition itself is a function
<glguy> jusss: If fibs :: [Int], then it's not a function               [11:52]
<jusss> glguy: yeah, that is a normal value, how you can run it then?
*** Sgeo_ (~Sgeo@ool-18b98995.dyn.optonline.net) has quit: Ping timeout: 245
    seconds
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell                                             [11:53]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has quit:
    Ping timeout: 272 seconds                                           [11:54]
*** aleator (~aleator@85.76.105.113) has joined channel #haskell        [11:55]
<monochrom> Depends on what you want to observe when you run it?        [11:56]
*** gentauro (~gentauro@port-87-193-132-138.static.qsc.de) has quit: Quit:
    leaving
*** dima__ (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has joined channel
    #haskell                                                            [11:58]
*** dddddd (~dddddd@unaffiliated/dddddd) has quit: Remote host closed the
    connection                                                          [11:59]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Ping timeout: 246 seconds
*** liberiga (~liberiga@gateway/tor-sasl/liberiga) has quit: Ping timeout: 260
    seconds
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has joined
    channel #haskell
*** antsmartian (~antsmarti@171.78.172.181) has quit: Ping timeout: 268
    seconds                                                             [12:00]
*** hyponoia (~hyponoia@101.164.163.88) has joined channel #haskell     [12:01]
*** Saukk (~Saukk@2001:998:e4:4a03:1c59:9bb5:b94c:3) has quit: Remote host
    closed the connection                                               [12:03]
<dmwit> jusss: "how you can run it then?" By typing `fibs` into ghci.   [12:05]
*** mariatsji (~mariatsji@2a02:a18:894a:401:10:f0d1:425a:2c71) has joined
    channel #haskell
<jusss> dmwit: fibs::[Int] is not a expression, it's just type signature
                                                                        [12:06]
*** threewood (~threewood@cpe-24-55-6-224.austin.res.rr.com) has quit: Ping
    timeout: 246 seconds
<jusss> dmwit: so I dont think `By typing `fibs` into ghci.` will get an
        proper result                                                   [12:07]
*** nowhereman (~pierre@2a01:e35:2fb8:7200:7df1:aa60:3c95:97c4) has quit:
    Remote host closed the connection
<monochrom> I think we're done.                                         [12:08]
*** teardown (~user@unaffiliated/mrush) has joined channel #haskell
*** pavonia (~user@unaffiliated/siracusa) has quit: Quit: Bye!
*** nowhereman (~pierre@2a01:e35:2fb8:7200:7df1:aa60:3c95:97c4) has joined
    channel #haskell                                                    [12:09]
*** corney (~waite@121.165.250.205) has joined channel #haskell         [12:10]
*** mariatsji (~mariatsji@2a02:a18:894a:401:10:f0d1:425a:2c71) has quit: Ping
    timeout: 252 seconds
* dmwit squints
<porrifolius> dmwit:  Another thing I'm struggling with is trying to envisage
              morphisms that aren't functions.  I've just learned (I think!)
              that category theory is stricter in it's definitions in that a
              function is defined in part by it's domain and codomain rather
              than just... umm... image and preimage?  In any event, that's
              helping me see that two different morphisms in the category
              between different pairs of objects are different things   [12:11]
<porrifolius> even though they may be, for me, the same thing conceptually.
<dmwit> porrifolius: All of that sounds basically right to me.
*** aleator (~aleator@85.76.105.113) has quit: Ping timeout: 245 seconds
*** fosterite (~fosterite@2601:445:447f:dd14:457b:8cc0:5d5:3efe) has joined
    channel #haskell
<dmwit> Whoops, didn't see your latest message yet. "All of that" refers to
        the messages beginning "Ok, I get the necessity of the meta-level."
        and "So, in practical terms...".
<porrifolius> dmwit: But I still can't get my head around a morphism between
              two objects not actually being a function.                [12:12]
<porrifolius> dmwit: Hmmm... lightbulb.  I was going to ask for an example
              where the morphisms are not functions, but... how about the
              Monoid category?  The morphisms are not functions, they are the
              pieces of data being appended?  And the object is the function?
<porrifolius> dmwit: In that case, am I right and thinking that it's not just
              that a conceptually 'equivalent' thing has
              different... um... occurrences when it's represented by
              morphisms between different pairs of objects, it can also have
              different occurrences when it's represented by the same single
              morphism?  And that's because it can have multiple positions in
              the composition path.  For example, 5 is conceptually a single
              thing for me, 
<porrifolius> but in the (+) Monoid category it can appear in multiple places
              in a composition path and each occurrence is, in some sense, a
              different thing.
<porrifolius> dmwit: Am I even remotely close to thinking about this the
              correct way?
<porrifolius> dmwit:  Haha, I understand.  Sorry to dump such a lot of message
              on you at once!
*** fosterit_ (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has joined
    channel #haskell                                                    [12:13]
<dmwit> Hm. If you're familiar with the standard way of turning any given
        monoid into a category with a single object, that seems like a pretty
        good example of a category whose arrows are not functions.
*** styledash (~styledash@157.230.173.136) has quit: Quit: WeeChat 2.5
<dmwit> So I'm with you on that.
<porrifolius> dmwit: Understand the accidental interleaving of your response
              that is.  Not category theory, unfortunately.
<dmwit> I think I'm not with you on "5 can appear in multiple places and each
        occurrence is different", though.                               [12:14]
<dmwit> In the one-object category whose arrows are numbers and whose arrow
        composition is addition, the composition 5 . 7 *is* the arrow
        12. There is no way to distinguish between the arrow 12 and the arrow
        5.7                                                             [12:15]
*** unlink2 (~unlink2@p200300EBCBED660086844AF5772CB115.dip0.t-ipconnect.de)
    has joined channel #haskell
<dmwit> (s/numbers/integers/ so that we don't need to wonder if 5.7 means
        5+7/10 or 5 compose 7, hah!)
*** corney (~waite@121.165.250.205) has left channel #haskell: #haskell
                                                                        [12:16]
*** fosterite (~fosterite@2601:445:447f:dd14:457b:8cc0:5d5:3efe) has quit:
    Ping timeout: 264 seconds
*** fosterit_ (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has quit:
    Ping timeout: 250 seconds                                           [12:17]
*** styledash (~styledash@157.230.173.136) has joined channel #haskell
<mjrosenb> Is there anything like zipWith, but for Arrays?              [12:18]
*** wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit: Quit:
    leaving                                                             [12:19]
<dmwit> Huh! Not that I know of. But you can build it out of listArray and
        indexing, I guess.
<dmwit> Possibly a bit annoying to fix up the bounds right...           [12:20]
<mjrosenb> yeah.  that is what I was stumbling over.                    [12:21]
<dmwit> Let's see...
<mjrosenb> also, unless fusion is doing something very clever, I suspect it'll
           be slower than a good implementation that has access to the
           library.
<jackdk> the class Semialign from package semialign has a zipWith as one of
         its methods but does not provide an instance for Arrays
<jackdk> it does provide an instance for Vector, if that's any help     [12:22]
<mjrosenb> also, if it helps, I'm already using lenses, and suspect they can
           be made to do something like this.
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell                                             [12:23]
<dmwit> mjrosenb: I guess you should be able to write, like `if inRange
        (lo',hi') lo then lo else lo'` to choose the new lower bound, and
        similarly for the new higher bound. Then `range` will get you the
        indices that are in range for both bounds.                      [12:24]
<dmwit> You should be able to use the accessors that don't do bounds checks
        after that for a small speed boost compared to plain (!).       [12:25]
*** fphilipe (~phil@2a02:168:f6c3:0:dd91:460c:c933:c41a) has quit: Ping
    timeout: 250 seconds
<dmwit> hrm, no longer so certain I believe my previous claim about how to
        compute the new lower bound                                     [12:26]
<dmwit> I'd want to do a bit of pencil-and-paper work.
<dmwit> How annoying!
<dmwit> Ah, yeah, that can't possibly work right; e.g. if the indices are
        tuples, we might have to pick the first part of one lower bound and
        the second part of the other.                                   [12:27]
<dmwit> Okay, now I think it's not possible to do in general. You'll have to
        make a new class or pick a specific Ix instance if you want to do
        this.
<dmwit> class IntersectionIx a where intersect :: (a,a) -> (a,a) -> (a,a) --
        or something                                                    [12:28]
*** Tops2 (~Tobias@dyndsl-095-033-016-018.ewe-ip-backbone.de) has quit: Read
    error: Connection reset by peer
*** nullifidian__ (~nullifidi@unaffiliated/nullifidian) has joined channel
    #haskell                                                            [12:32]
<porrifolius> dmwit: Ok, 5 . 7 *is* the arrow 12 is because of path
              equivalence, right?  I didn't feel good about saying the
              'multiple occurrence' stuff... I think I was resorting to it to
              try and clarify the difference between a morphism and a standard
              function over haskell data types.
<porrifolius> dmwit: A morphism is between two particular objects in the
              category, not a function from type to type, right?  I was/am
              struggling to keep that separation.
<porrifolius> dmwit: A category where Ob(C) is a set of Strings might have
              multiple arrows labelled "append 'x'" between different String
              elements of the set Ob(C)... naively it looks like there is one
              function to me.  But a functor would be mapping _different_
              "append 'x'" morphisms with (co)domains of :X->Y, :A->B, etc
              onto (potentially) different morphisms in a target category.  Is
              that reasonably correct?
<mjrosenb> are you sure that 5 . 7 isn't 35?                            [12:34]
*** nullifidian_ (~nullifidi@unaffiliated/nullifidian) has quit: Ping timeout:
    248 seconds                                                         [12:35]
<monochrom> I think they're working in a monoid or category in which
            composition becomes addition.
<porrifolius> mjrosenb: 5 . 7 we're talking about composition in a monoid
              category with (+) as the operator.                        [12:36]
*** ht_ (~Thunderbi@2a02:a210:9501:ad80:d49a:d9a:b8ed:3001) has joined channel
    #haskell
*** Wizek (uid191769@gateway/web/irccloud.com/x-kpyvbtkppkbcxiga) has quit:
    Quit: Connection closed for inactivity
*** acidjnk (~acid@i577BCADD.versanet.de) has joined channel #haskell   [12:37]
*** acidjnk (~acid@i577BCADD.versanet.de) has left channel #haskell: #haskell
*** acidjnk (~acid@i577BCADD.versanet.de) has joined channel #haskell
*** pfurla_ (~pfurla@ool-182ed2e2.dyn.optonline.net) has joined channel
    #haskell
*** pfurla (~pfurla@ec2-18-208-170-161.compute-1.amazonaws.com) has quit: Ping
    timeout: 246 seconds                                                [12:38]
*** lastmanstanding (~arjoonn@111.92.51.255) has quit: Ping timeout: 244
    seconds                                                             [12:40]
<ullbeking> hi all                                                      [12:41]
<ullbeking> is anybody here working from hudak's "the haskell school of
            expression"?
<ullbeking> i just started reading it and i'm going to have to hunt around for
            the multimedia libraries, they have probably suffered bitrot, etc
                                                                        [12:42]
<mjrosenb> there are probably better resources for learning haskell. (was that
           even haskell 98?)                                            [12:43]
*** fjellfras (~fjellfras@223.229.244.146) has joined channel #haskell
*** vlatkoB (~IRC_clien@unaffiliated/vlatkob) has joined channel #haskell
*** Vikfret (~Vikfret@189.216.85.255) has joined channel #haskell       [12:44]
*** day__ (~Unknown@unaffiliated/day) has joined channel #haskell       [12:46]
*** keepLearning512 (~keepLearn@106.51.235.188) has quit: Remote host closed
    the connection                                                      [12:48]
<ullbeking> mjrosenb: i already learned it in 98.  i'm not refreshing my
            knnowledge.  i always wanted to read this book :-)          [12:49]
*** day (~Unknown@unaffiliated/day) has quit: Ping timeout: 258 seconds
*** day__ (~Unknown@unaffiliated/day) is now known as day
<kosmikus> ullbeking: HGL claims to have a School of Expression compatibility
           module Graphics.SOE and looks like it would probably still build on
           current GHCs.                                                [12:51]
<ullbeking> kosmikus: what is HGL?                                      [12:52]
<kosmikus> ullbeking: a package
<kosmikus> http://hackage.haskell.org/package/HGL
*** fphilipe (~phil@2a02:168:f6c3:0:dd91:460c:c933:c41a) has joined channel
    #haskell                                                            [12:53]
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has joined
    channel #haskell
<ullbeking> ty kosmikus 
<kosmikus> ullbeking: for music, there's also the much more recent book "The
           Haskell School of Music" which is based on
           http://hackage.haskell.org/package/Euterpea
*** verement (~anonymous@cpe-76-167-227-46.san.res.rr.com) has joined channel
    #haskell
<ullbeking> is hackage different to cabal, or do they both do complementary
            things on the same package collections?                     [12:54]
<kosmikus> ullbeking: see http://euterpea.com/haskell-school-of-music/
<ullbeking> ooooh!
<ullbeking> wow
<sclv> hackage is a package repository
<sclv> cabal is a tool that uses it
<ullbeking> gotcha
<ullbeking> last time i learned haskell it was on hugs 98               [12:55]
<kosmikus> nice. I started with hugs as well, because ghci did not exist at
           the time :)
<heatsink> How many times have you learned haskell so far?
<ullbeking> once
<ullbeking> this is the second time                                     [12:56]
*** tsaka_ (~torstein@dslb-178-004-036-111.178.004.pools.vodafone-ip.de) has
    quit: Ping timeout: 268 seconds
<ullbeking> it's not like c++ where i've tried lots of times but i can't find
            a project interesting enough to keep me sticking to it :-(
<heatsink> Haskell distribution has changed since I learned it.  It had cabal,
           but now there's also stack and ghcup                         [12:57]
<ullbeking> eeek.  hope it doesn't turn into the packaging mess that python
            did
*** lastmanstanding (~arjoonn@103.79.223.74) has joined channel #haskell
*** keepLearning512 (~keepLearn@106.51.235.188) has joined channel #haskell
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has quit:
    Ping timeout: 264 seconds                                           [12:58]
<ullbeking> ok, this is all great, and enough to get my unstuck and moving
<heatsink> C++ is more tedious to deal with, which makes it less fun to learn
<sclv> ghcup is just a way to install ghc and cabal\
<sclv> its just an install script
<ullbeking> heatsink: it's just that i can't find anything about it to keep me
            glued to it
*** nshepperd (~nshepperd@185.212.170.227) has joined channel #haskell  [12:59]
<sclv> once you're using things, you can stick to ghc and cabal just like
       before -- no changes!
<heatsink> oh, ok
*** freeman[w]_ (~freeman42@193.189.67.82) has joined channel #haskell
<sclv> (well, cabal has changed a bunch and improved the workflow, but... you
       know :-))                                                        [13:00]
*** chalkmonster (~chalkmons@unaffiliated/chalkmonster) has joined channel
    #haskell                                                            [13:02]
*** keepLearning512 (~keepLearn@106.51.235.188) has quit: Ping timeout: 248
    seconds                                                             [13:03]
<heatsink> Cabal is easier to use offline than several other programming
           languages
<heatsink> It's surprising how many package managers just won't work if you're
           not connected to the internet
*** freeman[w]__ (~freeman42@193.189.67.82) has quit: Ping timeout: 268
    seconds
<sclv> the v2/new stuff still isn't as good as the old style in that regard
                                                                        [13:04]
<sclv> though its better in almost any other
<sclv> (you can do it with v2 but its not seamless still -- there's some
       tickets on it)
*** ht_ (~Thunderbi@2a02:a210:9501:ad80:d49a:d9a:b8ed:3001) has quit: Remote
    host closed the connection                                          [13:05]
* hackage conferer 0.1.0.0 - Configuration management library
  https://hackage.haskell.org/package/conferer-0.1.0.0 (ludat)          [13:07]
*** freedman (~temple@218.147.182.82) has joined channel #haskell       [13:08]
*** kori (~kori@arrowheads/kori) has quit: Ping timeout: 252 seconds    [13:09]
*** abhixec (~abhixec@73.92.49.6) has joined channel #haskell           [13:11]
*** aleator (~aleator@85-76-105-113-nat.elisa-mobile.fi) has joined channel
    #haskell                                                            [13:13]
*** freedman (~temple@218.147.182.82) has left channel #haskell: #haskell
*** chalkmonster (~chalkmons@unaffiliated/chalkmonster) has quit: Quit:
    WeeChat 2.5
*** keepLearning512 (~keepLearn@106.51.235.188) has joined channel #haskell
                                                                        [13:14]
*** laem (~laem@unaffiliated/laem) has quit: Ping timeout: 244 seconds  [13:15]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell
*** jchia1 (~jchia@58.32.69.34) has joined channel #haskell             [13:16]
*** freeman[w]__ (~freeman42@193.189.67.82) has joined channel #haskell
                                                                        [13:17]
*** jchia (~jchia@58.32.33.75) has quit: Ping timeout: 246 seconds
*** subttle (~anonymous@unaffiliated/subttle) has quit: Quit: leaving   [13:18]
*** mariatsji (~mariatsji@138.62.237.157) has joined channel #haskell   [13:20]
*** freeman[w]_ (~freeman42@193.189.67.82) has quit: Ping timeout: 245 seconds
*** laem (~laem@unaffiliated/laem) has joined channel #haskell
*** ndesai (~ndesai@2607:fea8:3160:6bf:48af:e5c:4256:fc3d) has quit: Ping
    timeout: 252 seconds                                                [13:22]
*** Wuzzy (~Wuzzy@p5790EDDD.dip0.t-ipconnect.de) has quit: Quit: Wuzzy
*** Sheilong (uid293653@gateway/web/irccloud.com/x-tygvrftdbmfmulho) has quit: 
*** MoarSpaceFi (~Forgot_my@65.155.84.20) has joined channel #haskell   [13:27]
*** fphilipe (~phil@2a02:168:f6c3:0:dd91:460c:c933:c41a) has quit: Ping
    timeout: 250 seconds                                                [13:28]
*** dima__ (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has quit: Quit: This
    computer has gone to sleep
*** dale (~dale@unaffiliated/dale) has quit: Quit: My computer has gone to
    sleep                                                               [13:29]
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has joined
    channel #haskell                                                    [13:32]
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has quit: Ping
    timeout: 246 seconds                                                [13:33]
*** tromp (~tromp@2a02:a210:1585:3200:5d4a:2029:f374:a2d7) has joined channel
    #haskell
*** equbit[m] (equazenmat@gateway/shell/matrix.org/x-ljdouraissohnlsj) has
    left channel #haskell: "User left"                                  [13:34]
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has joined channel
    #haskell                                                            [13:35]
*** aleator (~aleator@85-76-105-113-nat.elisa-mobile.fi) has quit: Ping
    timeout: 245 seconds                                                [13:36]
*** mariatsji (~mariatsji@138.62.237.157) has quit: Remote host closed the
    connection                                                          [13:37]
*** tromp (~tromp@2a02:a210:1585:3200:5d4a:2029:f374:a2d7) has quit: Ping
    timeout: 252 seconds
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has quit:
    Ping timeout: 250 seconds                                           [13:39]
*** kori (~kori@arrowheads/kori) has joined channel #haskell            [13:41]
*** chalkmonster (~chalkmons@unaffiliated/chalkmonster) has joined channel
    #haskell                                                            [13:42]
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has joined channel
    #haskell
*** nowhereman (~pierre@2a01:e35:2fb8:7200:7df1:aa60:3c95:97c4) has quit: Read
    error: Connection reset by peer                                     [13:43]
*** hyponoia (~hyponoia@101.164.163.88) has left channel #haskell: #haskell
                                                                        [13:44]
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has quit: Read error:
    Connection reset by peer                                            [13:45]
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has joined channel
    #haskell
*** danvet (~Daniel@2a02:168:569e:0:3106:d637:d723:e855) has joined channel
    #haskell
*** gioyik (~gioyik@186.112.240.224) has joined channel #haskell        [13:49]
*** osa1 (~omer@haskell/developer/osa1) has joined channel #haskell     [13:50]
<ullbeking> ty sclv heatsink kosmikus :D                                [13:51]
*** pqzx (~pqzx@unaffiliated/pqzx) has quit: Ping timeout: 244 seconds  [13:54]
*** shafox_ (~shafox@49.205.220.105) has joined channel #haskell        [13:58]
*** shafox (~shafox@49.205.220.105) has quit: Ping timeout: 248 seconds
*** phillip (~phillip@195.206.169.238) has quit:                        [14:00]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Remote host closed the connection
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell
*** Patternmaster (~georg@li1192-118.members.linode.com) has left channel
    #haskell: #haskell                                                  [14:02]
*** phreedom (~quassel@gateway/tor-sasl/phreedom) has quit: Ping timeout: 260
    seconds
*** phreedom (~quassel@gateway/tor-sasl/phreedom) has joined channel #haskell
                                                                        [14:03]
*** aarvar (~foewfoiew@50.35.43.33) has quit: Ping timeout: 245 seconds
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has quit:
    Ping timeout: 246 seconds                                           [14:04]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Ping timeout: 264 seconds                                           [14:05]
*** wroathe_ (~msgnickse@c-68-54-25-135.hsd1.mn.comcast.net) has quit: Ping
    timeout: 246 seconds                                                [14:06]
*** nowhereman (~pierre@2a01:e35:2fb8:7200:7df1:aa60:3c95:97c4) has joined
    channel #haskell                                                    [14:07]
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has joined
    channel #haskell                                                    [14:08]
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has quit: Ping timeout:
    245 seconds                                                         [14:10]
* hackage yesod-core 1.6.15 - Creation of type-safe, RESTful web applications.
  https://hackage.haskell.org/package/yesod-core-1.6.15 (MichaelSnoyman)
*** dansho (~dansho4@71-84-161-204.dhcp.astr.or.charter.com) has quit: Ping
    timeout: 245 seconds                                                [14:12]
*** dansho (~dansho4@71-84-161-204.dhcp.astr.or.charter.com) has joined
    channel #haskell                                                    [14:13]
*** nowhereman (~pierre@2a01:e35:2fb8:7200:7df1:aa60:3c95:97c4) has quit: Read
    error: Connection reset by peer                                     [14:15]
*** pierreimmo (~pierre@lfbn-1-16578-183.w86-243.abo.wanadoo.fr) has quit:
    Ping timeout: 258 seconds                                           [14:16]
*** sicklorkin (~adsf@eighteen.broker.haus) has quit: Ping timeout: 272
    seconds                                                             [14:19]
*** ravenous_
    (~ravenousm@ptr-cud5aqfxstflj3lvfff.18120a2.ip6.access.telenet.be) has
    joined channel #haskell
*** mariatsji (~mariatsji@80.91.33.151) has joined channel #haskell
*** xrogaan1 (~xrogaan@185.103.96.147) has joined channel #haskell      [14:21]
* hackage yesod-test 1.6.6.2 - integration testing for WAI/Yesod Applications
  https://hackage.haskell.org/package/yesod-test-1.6.6.2 (MichaelSnoyman)
*** ctag_ (~ctag@24.42.183.214) has quit: Read error: Connection reset by peer
                                                                        [14:23]
*** mariatsji (~mariatsji@80.91.33.151) has quit: Ping timeout: 258 seconds
                                                                        [14:24]
*** ctag_ (~ctag@24.42.183.214) has joined channel #haskell
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has joined channel
    #haskell
*** ravenous_
    (~ravenousm@ptr-cud5aqfxstflj3lvfff.18120a2.ip6.access.telenet.be) has
    quit: Ping timeout: 264 seconds
*** oish (~charlie@228.25.169.217.in-addr.arpa) has joined channel #haskell
                                                                        [14:26]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Remote host closed the connection
* hackage search-algorithms 0.3.1 - Common graph search algorithms
  https://hackage.haskell.org/package/search-algorithms-0.3.1 (devonhollowood)
                                                                        [14:27]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has quit: Ping timeout:
    245 seconds                                                         [14:28]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [14:29]
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has quit:
    Quit: My MacBook has gone to sleep. ZZZzzz…
*** radsmoo (~androirc@213.87.225.40) has joined channel #haskell
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has quit: Read
    error: Connection reset by peer                                     [14:30]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [14:31]
*** mariatsji (~mariatsji@vpn-managed.schibsted.no) has joined channel
    #haskell                                                            [14:34]
*** vlatkoB_ (~IRC_clien@unaffiliated/vlatkob) has joined channel #haskell
*** radsmoo (~androirc@213.87.225.40) has quit: Ping timeout: 244 seconds
*** xff0x (~fox@210.57.57.162) has quit: Remote host closed the connection
                                                                        [14:36]
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has joined channel
    #haskell
*** dmitri (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has joined channel
    #haskell                                                            [14:38]
*** vlatkoB (~IRC_clien@unaffiliated/vlatkob) has quit: Ping timeout: 268
    seconds
*** Ariakenom (~Ariakenom@h-208-40.A163.corp.bahnhof.se) has joined channel
    #haskell                                                            [14:40]
*** mikolaj (~mikon@duch.mimuw.edu.pl) has quit: Ping timeout: 272 seconds
                                                                        [14:44]
*** tromp (~tromp@ip-213-127-58-74.ip.prioritytelecom.net) has joined channel
    #haskell                                                            [14:45]
*** Thra11 (Thra11@gateway/vpn/protonvpn/thra11) has joined channel #haskell
*** linarcx (~linarcx@151.242.187.239) has joined channel #haskell      [14:47]
*** encod3 (~encod3@89.20.162.146.static.ef-service.nl) has joined channel
    #haskell                                                            [14:51]
*** mikolaj (~mikon@duch.mimuw.edu.pl) has joined channel #haskell      [14:52]
*** keepLearning512 (~keepLearn@106.51.235.188) has quit: Remote host closed
    the connection                                                      [14:54]
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has quit: Remote host closed the
    connection
*** revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net)
    has quit: Ping timeout: 244 seconds                                 [14:55]
*** jackzhang (~zhen.zhan@114.242.122.145) has joined channel #haskell
*** v01d4lph4 (~v01d4lph4@125.16.234.60) has joined channel #haskell    [14:56]
*** revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net)
    has joined channel #haskell
*** keepLearning512 (~keepLearn@106.51.235.188) has joined channel #haskell
                                                                        [14:58]
*** gioyik (~gioyik@186.112.240.224) has quit: Quit: WeeChat 2.5
*** ktonga (~quassel@2001:8003:300c:aa00:70f1:a7f1:ac5b:b74c) has quit: Ping
    timeout: 250 seconds
*** hackage (mniip@haskell/bot/hackage) has quit: Read error: Connection reset
    by peer                                                             [14:59]
*** hackage (mniip@haskell/bot/hackage) has joined channel #haskell     [15:00]
*** Thra11 (Thra11@gateway/vpn/protonvpn/thra11) has quit: Quit: WeeChat 2.5
                                                                        [15:01]
*** slomo (~slomo@unaffiliated/slomo) has joined channel #haskell
*** fphilipe (~phil@46-127-142-222.dynamic.hispeed.ch) has joined channel
    #haskell
*** therisen (~therisen@165.225.72.105) has joined channel #haskell     [15:02]
*** aleator (~aleator@85-76-105-113-nat.elisa-mobile.fi) has joined channel
    #haskell                                                            [15:03]
*** sicklorkin (~adsf@eighteen.broker.haus) has joined channel #haskell
                                                                        [15:05]
*** pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit: Ping timeout: 252
    seconds
<dmwit> porrifolius: Yes, that's correct!                               [15:06]
<dmwit> porrifolius: Indeed, it is relatively common for a careful
        formalization of "arrow" to need to include the domain and codomain in
        the "data structure" that represents the arrow.
<dmwit> Not in every category, but in many, and in particular in the one
        you're describing where objects are strings and there is an arrow
        labeled T from the string S to the string S++T.                 [15:07]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has joined
    channel #haskell
<dmwit> Then the "data structure" representing that arrow needs to at least
        store S, too (though it need not store S++T, since that's recoverable
        from the data (S,T)).                                           [15:08]
*** cynick (~worm@ec2-52-206-86-1.compute-1.amazonaws.com) has quit: Ping
    timeout: 272 seconds                                                [15:11]
*** ltriant (~ltriant@210-10-238-100.cust.static-ipl.aapt.com.au) has quit:
    Quit: leaving
*** oish (~charlie@228.25.169.217.in-addr.arpa) has quit: Ping timeout: 244
    seconds                                                             [15:13]
*** xff0x (~fox@210.57.57.162) has joined channel #haskell              [15:14]
*** cynick (~worm@ec2-52-206-86-1.compute-1.amazonaws.com) has joined channel
    #haskell                                                            [15:16]
*** philipp10 (3e9d67c4@62.157.103.196) has joined channel #haskell
*** tomsen (~tomsen@2a02:908:1862:49e0::2) has joined channel #haskell
*** MoarSpaceFi (~Forgot_my@65.155.84.20) has quit: Ping timeout: 268 seconds
<philipp10> hello haskellers! newbie question: is the `$` operator "just"
            syntactic sugar to avoid cluttering code with parentheses - or
            does he have any additional feature I'm not aware of? thx   [15:17]
<Axman6> that's pretty much it really
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell                                             [15:18]
<Axman6> it lets you write f . g . h $ x instead of (f . g . h) x
<philipp10> Axman6, thx
<dminuoso> philipp10: Its better than syntactic sugar! It's a regular
           operator! :)
*** keepLearning512 (~keepLearn@106.51.235.188) has quit: Remote host closed
    the connection
<Axman6> It's just a function D:
<dminuoso> philipp10: It's a function/operator that is simply defined using
           plain Haskell!
*** raichoo (~raichoo@office02.saltation.de) has joined channel #haskell
<Axman6> @src ($)
<lambdabot> f $ x = f x
*** sicklorkin (~adsf@eighteen.broker.haus) has quit: Ping timeout: 248
    seconds                                                             [15:19]
<philipp10> dminuoso, yeah it's full grown function/operator of course. sorry
            for messing up ;-)  
<dminuoso> infixr 0 $
<dminuoso> philipp10: ^- the trick about that operator is merely its fixity
           declaration. :)
<Axman6> yeah that's the important bit
*** wateridris55 (2f4bc1e0@47.75.193.224) has joined channel #haskell
<dminuoso> philipp10: That fixity declaration just says "it's right
           associative, and it has the lowest precedence possible"      [15:20]
<philipp10> dminuoso, another newbie question: function composition with `.`
            is being evaluated from right -> left, innit?               [15:21]
<dminuoso> philipp10: Evaluation order works different in Haskell.
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Ping timeout: 246 seconds                                     [15:22]
<dminuoso> philipp10: Evaluation happens on demand, not according to rigid
           "from left to right" specifications.
<mjrosenb> and composition is associative, so you can't really say that it
           "starts" at one side or the other.
*** aleator (~aleator@85-76-105-113-nat.elisa-mobile.fi) has quit: Ping
    timeout: 244 seconds                                                [15:23]
*** wateridris55 (2f4bc1e0@47.75.193.224) has quit: Remote host closed the
    connection
*** johnw (~johnw@haskell/developer/johnw) has quit: Ping timeout: 250 seconds
                                                                        [15:26]
<EvanR> on one hand, associativity makes it easier to reason semantically
        about function chains
*** merijn (~merijn@145.100.116.11) has joined channel #haskell
<EvanR> on the other hand, now it's not immediately obvious "what happens
        first"                                                          [15:27]
<philipp10> dminuoso, as an example of function composition: `interact $ show
            . sum . map read . words ` can you elaborate how this's is being
            evaluated? 
*** petersen (~petersen@redhat/juhp) has quit: Ping timeout: 268 seconds
<dminuoso> philipp10: Im assuming that this is the definition of ⌜main⌝, is
           that correct?
*** xff0x (~fox@210.57.57.162) has quit: Remote host closed the connection
                                                                        [15:28]
*** tsaka_ (~torstein@dslb-178-004-036-111.178.004.pools.vodafone-ip.de) has
    joined channel #haskell                                             [15:29]
*** ggVGc (~ggVGc@unaffiliated/walt) has joined channel #haskell        [15:30]
*** johnw (~johnw@haskell/developer/johnw) has joined channel #haskell
*** qianyin01 (~qianyin01@59.111.198.56) has joined channel #haskell    [15:31]
*** asheshambasta
    (~user@ptr-e1lysaxtoafxrhyztxz.18120a2.ip6.access.telenet.be) has joined
    channel #haskell                                                    [15:32]
*** dmitri (~dima14@ppp-58-11-29-1.revip2.asianet.co.th) has quit: Quit: This
    computer has gone to sleep
<jusss> dminuoso: the tasks you left yesterday, I don't understand what it
        means... "Write an ⌜instance Applicative f => ApplicativeAlt f⌝ and an
        ⌜instance ApplicativeAlt f => Applicative f⌝ - such that  Applicative
        is implemented in terms of ApplicativeAlt and vice  versa." you want
        me make Maybe as their instance?                                [15:33]
<dminuoso> jusss: No.
*** sQVe (~sQVe@unaffiliated/sqve) has joined channel #haskell
*** asheshambasta
    (~user@ptr-e1lysaxtoafxrhyztxz.18120a2.ip6.access.telenet.be) has quit:
    Remote host closed the connection
<lavalike> mjrosenb: that seems misleading, it is right associative in hs
                                                                        [15:34]
*** xff0x (~fox@210.57.57.162) has joined channel #haskell
<philipp10> dminuoso, yes, correct
<dminuoso> jusss: I want you to write "plus" in terms of "<*> and pure" (do
           you need both? figure it out!), and "unit" in terms of "<*> and
           pure" (do you too need both? figure it out!)
<philipp10> dminuoso, sorry for not pasting the whole block, so it goes: `
            main = interact $ show . sum . map read . words`            [15:35]
<dminuoso> % :t interact $ show . sum . map read . words                [15:36]
<yahb> dminuoso: IO ()
<dminuoso> % :t show . sum . map read . words                           [15:37]
<yahb> dminuoso: String -> String
<EvanR> > (length . group . undefined . const 9) "flooz"
<lambdabot>  *Exception: Prelude.undefined
<EvanR> > (((length . group) . undefined) . const 9) "flooz"
<lambdabot>  *Exception: Prelude.undefined
<dminuoso> philipp10: Give me a moment to gather my thoughts how to best
           explain this                                                 [15:38]
*** xkapastel (uid17782@gateway/web/irccloud.com/x-ioeuliotvkewzlqx) has
    joined channel #haskell
<merijn> dminuoso: Simple, you just link Heinrich Apfelmus's site :p    [15:39]
<philipp10> dminuoso, sure, of course. don't hurry ;-)  
<dminuoso> merijn: Perfect, do you have the link at hand?
<merijn> No, I always google it >.>
*** giraffe (skarn@gateway/shell/firrre/x-nceqiitudybsropy) has quit: Excess
    Flood                                                               [15:40]
<merijn> mmm, looks like the site broke, that's a bummer
<merijn> Well bollocks
*** giraffe (skarn@gateway/shell/firrre/x-grmucstilopejrxr) has joined channel
    #haskell
*** sicklorkin (~adsf@eighteen.broker.haus) has joined channel #haskell
*** governor (~governor@41.217.100.204) has joined channel #haskell
<EvanR> google? unsurprised
<dminuoso> philipp10:
           https://web.archive.org/web/20170430095057/https://hackhands.com/lazy-evaluation-works-haskell/
                                                                        [15:41]
*** dfeuer (~dfeuer@wikimedia/Dfeuer) has quit: Read error: Connection reset
    by peer
<merijn> dminuoso: The individual sublinks don't work
*** dfeuer (~dfeuer@wikimedia/Dfeuer) has joined channel #haskell       [15:42]
<merijn> Ah, wait, that's the archive
*** Arahael (~arahael@202.92.118.9) has quit: Ping timeout: 245 seconds
<merijn> I just found a broken github mirror :)
*** xff0x (~fox@210.57.57.162) has quit: Ping timeout: 258 seconds
<EvanR> > (const 9 . undefined . length . group) "flooz"
<lambdabot>  9
<merijn> Should probably ask Heinrich permision to mirror that article on the
         wiki or something. It's a pretty good simple intro             [15:43]
*** Arahael (~arahael@202.92.118.9) has joined channel #haskell
*** doublex (~doublex@2601:542:c480:6ee0:34c1:a892:98f3:92e9) has quit: Ping
    timeout: 264 seconds
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has joined
    channel #haskell                                                    [15:44]
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    joined channel #haskell                                             [15:46]
*** laem (~laem@unaffiliated/laem) has quit: Quit: quit                 [15:47]
*** laem (~laem@unaffiliated/laem) has joined channel #haskell          [15:48]
*** Guest_43 (9eae0a36@h-158-174-10-54.NA.cust.bahnhof.se) has joined channel
    #haskell                                                            [15:49]
*** Guest_43 (9eae0a36@h-158-174-10-54.NA.cust.bahnhof.se) has left channel
    #haskell: #haskell                                                  [15:50]
*** rtfm (~rtfm@unaffiliated/rtfm) has joined channel #haskell          [15:51]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has quit:
    Ping timeout: 244 seconds
<philipp10> thanks for the link, dminuoso                               [15:52]
*** eiGHttt (~eiGHttt@115.231.100.106) has quit: Ping timeout: 248 seconds
*** sQVe (~sQVe@unaffiliated/sqve) has quit: Quit: Bye!                 [15:55]
*** kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has joined
    channel #haskell                                                    [15:56]
*** thc202 (~thc202@unaffiliated/thc202) has joined channel #haskell
*** kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has quit:
    Client Quit                                                         [15:57]
*** kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has joined
    channel #haskell
*** sQVe (~sQVe@unaffiliated/sqve) has joined channel #haskell          [15:59]
*** keep_learning
    (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has quit:
    Quit: Ping timeout (120 seconds)
*** Nik05 (~Nik05@unaffiliated/nik05) has quit: Ping timeout: 264 seconds
                                                                        [16:00]
*** rtfm (~rtfm@unaffiliated/rtfm) has quit: Quit: leaving              [16:01]
*** t7 (~tommo@2a00:23c5:1284:fc00:2531:30ec:ed7c:f7af) has quit: Quit:
    Konversation terminated!
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell
*** keep_learning
    (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
    channel #haskell                                                    [16:02]
*** nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit: Ping timeout:
    264 seconds                                                         [16:03]
*** eiGHttt (~eiGHttt@115.231.100.106) has joined channel #haskell      [16:04]
*** scheming_around (~butterthe@btb.powered.by.lunarbnc.net) has quit: Ping
    timeout: 250 seconds
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has joined channel
    #haskell
<jusss> dminuoso: https://paste.ubuntu.com/p/zjWFMtSJXj/                [16:05]
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Ping timeout: 250 seconds                                           [16:06]
<dminuoso> jusss: I invite you to write them as actual instances.
<dminuoso> jusss: Your type checker will help you.
*** Sk01 (~sky3@144.122.52.81) has joined channel #haskell              [16:07]
*** qianyin01 (~qianyin01@59.111.198.56) has left channel #haskell: "WeeChat
    2.5"
<jusss> dminuoso: I don't the transformer about (a,b)                   [16:08]
<jusss> know
*** chalkmonster (~chalkmons@unaffiliated/chalkmonster) has quit: Quit:
    WeeChat 2.5
*** reactormonk (~tass@ip5f5bf766.dynamic.kabel-deutschland.de) has joined
    channel #haskell                                                    [16:09]
<dminuoso> jusss: If you already knew the solution, it wouldn't be a
           challenge. :)
<dminuoso> jusss: There is too much pseudo annotation that I cant understand
           in that paste.                                               [16:10]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has joined
    channel #haskell
*** mikolaj (~mikon@duch.mimuw.edu.pl) has quit: Ping timeout: 272 seconds
                                                                        [16:13]
<jusss> dminuoso: https://paste.ubuntu.com/p/Fj3gR6SfQW/
*** mikolaj (~mikon@duch.mimuw.edu.pl) has joined channel #haskell
<jusss> dminuoso: this is ok?                                           [16:14]
*** xff0x (~fox@210.57.57.162) has joined channel #haskell              [16:16]
<dminuoso> jusss: That looks wrong.
<dminuoso> jusss: What are ⌜get⌝ and ⌜g⌝ exactly?                       [16:17]
*** qwertytest (~fig314@37.120.6.207) has joined channel #haskell
*** ktonga (~quassel@2001:8003:300c:aa00:70f1:a7f1:ac5b:b74c) has joined
    channel #haskell
*** housecarpenter (uid306022@gateway/web/irccloud.com/x-prqjstosleaptoqh) has
    joined channel #haskell                                             [16:18]
<jusss> dminuoso: g::a->(a,b); get::(a,b)->b
*** keepLearning512 (~keepLearn@49.204.75.26) has joined channel #haskell
                                                                        [16:19]
<jusss> I just made it up
*** sicklork1n (~adsf@eighteen.broker.haus) has joined channel #haskell
                                                                        [16:20]
<jackzhang> H
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell                                                            [16:21]
*** sicklorkin (~adsf@eighteen.broker.haus) has quit: Ping timeout: 246
    seconds                                                             [16:23]
*** doublex (~doublex@2601:542:c480:6ee0:34c1:a892:98f3:92e9) has joined
    channel #haskell                                                    [16:25]
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout:
    245 seconds
*** xff0x (~fox@210.57.57.162) has quit: Ping timeout: 245 seconds
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has joined channel #haskell
                                                                        [16:26]
* hackage tidal 1.4.0 - Pattern language for improvised music
  https://hackage.haskell.org/package/tidal-1.4.0 (AlexMcLean)
*** kuribas (~user@ip-188-118-57-242.reverse.destiny.be) has joined channel
    #haskell                                                            [16:27]
*** Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit: Ping
    timeout: 272 seconds
*** esp32_prog (~esp32_pro@250-131-190-109.isp.overthebox.ovh) has joined
    channel #haskell                                                    [16:28]
*** Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined
    channel #haskell
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has quit:
    Ping timeout: 244 seconds                                           [16:32]
*** doublex (~doublex@2601:542:c480:6ee0:34c1:a892:98f3:92e9) has quit: Ping
    timeout: 264 seconds                                                [16:34]
*** pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined channel #haskell
*** freeman[w]_ (~freeman42@193.189.67.82) has joined channel #haskell  [16:36]
*** wonko7 (~wonko7@lfbn-1-12367-net.w90-91.abo.wanadoo.fr) has quit: Quit:
    See You Space Cowboy..
<Ariakenom> Hey #haskell. What is Haskell's biggest weakness, to you?   [16:37]
*** natim87 (sid286962@gateway/web/irccloud.com/x-zpcrelfazxkslrml) has quit: 
                                                                        [16:38]
*** natim87 (sid286962@gateway/web/irccloud.com/x-nykiltynnfwysjsd) has joined
    channel #haskell
*** RusAlex (~Chel@unaffiliated/rusalex) has quit: Remote host closed the
    connection
*** freeman[w]__ (~freeman42@193.189.67.82) has quit: Ping timeout: 268
    seconds                                                             [16:39]
<merijn> Ariakenom: Messy Num hierarchy, unchecked exceptions, async
         exceptions being ultra-hard to reason about (see also,
         Control.Exception's bracket & co still being broken as pointed out by
         me an Peaker years ago)...                                     [16:41]
<merijn> Ariakenom: Also v2-build having broken all editor integration for the
         near future >.>                                                [16:42]
<tdammers> Ariakenom: I would have to say "performance"
<tdammers> not in the "it's not fast enough" sense, but in the "it's too
           difficult to reason about performance" sense, and also in the "it's
           too difficult to make informed decisions wrt performance tradeoffs"
                                                                        [16:43]
<merijn> I was about to say, because usually it is more than fast enough for
         me :p
<Ariakenom> merijn: interesting, how's bracket broken?
*** RusAlex (~Chel@unaffiliated/rusalex) has joined channel #haskell
<tdammers> it is more than fast enough in terms of throughput, but sometimes,
           you want to favor latency (particularly in realtime applications),
           and the current stop-the-world GC makes that very difficult  [16:44]
<merijn> Ariakenom: It uses interruptible mask for cleanup, so if you do a
         blocking operation in cleanup you can be async exceptioned during
         cleanup and not complete it
<tdammers> granted, this is probably in large part a matter of implementation
           more than language spec
<merijn> Since blocking operations explicitly unmask anything except
         uninterruptible mask
*** stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined channel
    #haskell
<merijn> tdammers: That's why the new GC is in development, no? :)      [16:45]
<AWizzArd> merijn: link?
<tdammers> merijn: yes.
*** petersen (~petersen@redhat/juhp) has joined channel #haskell
<merijn> AWizzArd: To what?
<AWizzArd> merijn: I would like to know more about that new GC.
*** ilikeheaps (~sushi@cbx161.neoplus.adsl.tpnet.pl) has joined channel
    #haskell                                                            [16:46]
<dminuoso> jusss: If you make up functions, implement them.             [16:47]
<dminuoso> jusss: How would ⌜g :: a -> (a, b)⌝ be implemented, exactly?
<tdammers> AWizzArd: https://www.youtube.com/watch?v=7_ig6r2C-d4 - this is Ben
           Gamari, the main guy behind the new GC (and also one of the secret
           main people behind GHC) explaining how it works
<merijn> AWizzArd: Work in progress for 8.10
         https://github.com/pepeiborra/gc-benchmarks/blob/1b24c5c0a06c004740caabe4776af0bf21b6f6ee/README.md
                                                                        [16:48]
*** albertus11 (~seb@x4dbda723.dyn.telefonica.de) has quit: Ping timeout: 272
    seconds
<Ariakenom> GC discussions confuse me. afaict pretty much every GC has
            unbounded stop-the-world, even though it is short for those that
            claim to not have it.
*** stef204 (~stef204@unaffiliated/stef-204/x-384198) has quit: Client Quit
*** rsoeldner (~rsoeldner@195.145.101.20) has quit: Ping timeout: 244 seconds
<dminuoso> Ariakenom: Nope.                                             [16:49]
*** Nik05 (~Nik05@unaffiliated/nik05) has joined channel #haskell
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has quit: Ping
    timeout: 245 seconds
<AWizzArd> Ariakenom: also Go’s GC?
<Ariakenom> AWizzArd: yeah, from what I remember                        [16:50]
*** oish (~charlie@228.25.169.217.in-addr.arpa) has joined channel #haskell
<dminuoso> Is there an equivalent of hspec's around/around_ for tasty?  [16:52]
*** rsoeldner (~rsoeldner@195.145.101.20) has joined channel #haskell
<merijn> dminuoso: It'd probably help to say what those functions do?
<merijn> Ariakenom: No? Why would you *need* stop-the-world?            [16:53]
<dminuoso> merijn: Ah it's basically a bracket_ around each individual test.
<merijn> dminuoso: withResource ?
<Ariakenom> also reference counting seems popular to me. but in the little
            testing I've found it's not the greatest
            https://www.hpl.hp.com/techreports/2003/HPL-2003-215.pdf    [16:54]
<dminuoso> merijn: That doesn't wrap each individual leaf, but only the entire
           tree
<merijn> dminuoso: You'd have to apply it for each leaf, sure
<Ariakenom> merijn: some step in the mark of mark-sweep always does it iirc
                                                                        [16:55]
*** jose_zap (~jose_zap@176-20-96-236-dynamic.dk.customer.tdc.net) has quit:
    Quit: My MacBook has gone to sleep. ZZZzzz…
<Ariakenom> tdammers: very interesting. do you have ideas on what's needed to
            solve those performance issues? in what situations is it a
            problem?                                                    [16:57]
*** oish (~charlie@228.25.169.217.in-addr.arpa) has quit: Ping timeout: 246
    seconds
*** iuno (~iuno@212.51.158.235) has joined channel #haskell             [16:59]
*** xrogaan1 (~xrogaan@185.103.96.147) has quit:                        [17:00]
<jusss> dminuoso: oops, there's no g::a->(a,b)...
<jusss> g:: a b ->(a,b) should be ok
<jusss> g x y = (x,y)                                                   [17:01]
*** btbuddha (~butterthe@btb.powered.by.lunarbnc.net) has joined channel
    #haskell
<dminuoso> jusss: I recommend you dont write in notepad/gist, write your code
           using an editor and try it with GHC.
<dminuoso> jusss: You would have noticed that error immediately.
<dminuoso> jusss: By the way, that function already exists! It's called (,) :)
<dminuoso> % :t (,)
<yahb> dminuoso: a -> b -> (a, b)
*** mmfood (~mmfood@178.73.202.251) has quit: Ping timeout: 245 seconds
                                                                        [17:02]
*** ravenous_
    (~ravenousm@ptr-cud5aqfxstflj3lvfff.18120a2.ip6.access.telenet.be) has
    joined channel #haskell
<jusss> dminuoso: aha, I found a function which is already existed!
<tdammers> Ariakenom: it's a problem, usually, when latency is important, so
           that's typically realtime applications: games, multimedia,
           industrial control, etc.                                     [17:03]
<dminuoso> Ariakenom: Matthew did a nice presentation last year on munihac:
           https://www.youtube.com/watch?v=7_ig6r2C-d4                  [17:04]
*** albertus1 (~seb@77.247.85.102) has joined channel #haskell
<Ariakenom> dminuoso: yes I've seen it
*** rsoeldner (~rsoeldner@195.145.101.20) has quit: Remote host closed the
    connection                                                          [17:05]
<Ariakenom> tdammers: ah yeah. I was thinking of examples where you had run
            into it yourself
*** rsoeldner (~rsoeldner@195.145.101.20) has joined channel #haskell   [17:06]
* hackage salak 0.3.4.1 - Configuration (re)Loader and Parser.
  https://hackage.haskell.org/package/salak-0.3.4.1 (leptonyu)
*** nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined channel
    #haskell
*** yoneda (~mike@193.206.102.122) has joined channel #haskell
*** ktonga (~quassel@2001:8003:300c:aa00:70f1:a7f1:ac5b:b74c) has quit: Ping
    timeout: 250 seconds
*** mmfood (~mmfood@178.73.202.156) has joined channel #haskell         [17:07]
*** ravenous_
    (~ravenousm@ptr-cud5aqfxstflj3lvfff.18120a2.ip6.access.telenet.be) has
    quit: Ping timeout: 264 seconds
* hackage salak-toml 0.3.4.1, salak-yaml 0.3.4.1 (leptonyu):
  https://qbin.io/gays-fonts-ullh
*** qwertytest (~fig314@37.120.6.207) has quit: Ping timeout: 245 seconds
*** lemmih (~lemmih@202.133.195.149) has joined channel #haskell
*** dfeuer_ (~dfeuer@wikimedia/Dfeuer) has joined channel #haskell      [17:09]
*** Zer0xp (~chr15@106.51.73.242) has joined channel #haskell
<jusss> dminuoso: can you give out the left part of '=' ?
<jusss> give                                                            [17:10]
<dminuoso> jusss: What do you mean?
*** sword865 (uid208942@gateway/web/irccloud.com/x-hgohopzkptpupbhn) has quit:
    Quit: Connection closed for inactivity                              [17:11]
<jusss> dminuoso: plus x y z =?
<dminuoso> jusss: Look at the type signature, you can see how many arguments.
                                                                        [17:12]
<jusss> dminuoso: three?
*** dfeuer (~dfeuer@wikimedia/Dfeuer) has quit: Ping timeout: 245 seconds
*** keepLearning512 (~keepLearn@49.204.75.26) has quit: Remote host closed the
    connection
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    joined channel #haskell
<dminuoso> jusss: What is the type signature?                           [17:13]
<jusss> or how do you know what is the number of arguments based on the type
        signature?
<dminuoso> jusss: What else would tell you?
<dminuoso> jusss: If that is really your question, then we should stop this
           excercise.
<dminuoso> I clearly misjudged your progress in Haskell.                [17:14]
<jusss> two                                                             [17:15]
<dminuoso> jusss: You shouldn't be dabbling with these sort of excercises if
           you aren't sure how many arguments a given function has when
           looking at its type signature. :)
<dminuoso> It may be more effective to return to simpler excercises.    [17:16]
*** nineonine (~nineonine@h184-60-2-159.bendor.broadband.dynamic.tds.net) has
    quit: Ping timeout: 245 seconds                                     [17:17]
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has joined channel
    #haskell                                                            [17:19]
*** albertus1 (~seb@77.247.85.102) has quit: Ping timeout: 272 seconds
<jgt> jusss: f :: a -> a                                                [17:20]
*** ralejs (~ralejs@port-87-193-132-138.static.qsc.de) has joined channel
    #haskell
<jgt> jusss: how many arguments?
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has quit: Read
    error: Connection reset by peer                                     [17:22]
*** ralejs (~ralejs@port-87-193-132-138.static.qsc.de) has quit: Client Quit
                                                                        [17:23]
<jusss> jgt: that's one, what make me confused is the applicative f, should it
        be an argument?                                                 [17:25]
*** sQVe (~sQVe@unaffiliated/sqve) has quit: Quit: Bye!
<jusss> or Monad m, should it be an argument?
<dminuoso> jusss: It's not an argument.                                 [17:26]
<jusss> dminuoso: ok
*** o1lo01ol1o (~o1lo01ol1@152.80.136.95.rev.vodafone.pt) has quit: Remote
    host closed the connection
<Ariakenom> . o O (f f 1)
<dminuoso> jusss: The thing to the left of a => is called the context and
           contains multiple so-called constraints.
<dminuoso> jusss: "Applicative f" is a constraint that says "Whateve the
           choice of f, there must be an instance Applicatie f"         [17:27]
*** jose_zap (~jose_zap@office.expressional.com) has joined channel #haskell
*** btbuddha (~butterthe@btb.powered.by.lunarbnc.net) has quit: Quit: Free ZNC
    ~ Powered by LunarBNC: https://LunarBNC.net
*** nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit: Quit: Free ZNC ~
    Powered by LunarBNC: https://LunarBNC.net
<dminuoso> jusss: So remember that when calling/using/consuming a polymorphic
           thing containing type variables, that the consumer can pick what
           those type variables can be?                                 [17:28]
<jusss> dminuoso: then what is "context" here?
<dminuoso> jusss: Constraints acts as limits to those choices. So when you
           have "f :: a -> a", you can pick any type for ⌜a⌝ without any
           limitation.
<dminuoso> If however you have: ⌜g :: Applicative f => a -> f a⌝, then you can
           pick any type you want for ⌜a⌝, but the choice for ⌜f⌝ is limited
           by the constraint.                                           [17:29]
<dminuoso> That type signature reads:
*** MarcelineVQ (~anja@xplr-104-249-247-127.xplornet.com) has joined channel
    #haskell                                                            [17:30]
<Phyx-> ysangkok: what exactly is the problem with compiling the library?
<dminuoso> "For every choice of some types ⌜a⌝ and ⌜f⌝, in which there must be
           an ⌜instance Applicative f⌝, g has the type "a -> f a"
*** keepLearning512 (~keepLearn@49.204.75.26) has joined channel #haskell
<dminuoso> jusss: Does this make sense?
<jusss> dminuoso: and Applicative f has to have <*> and pure two methods,
*** btbuddha (~butterthe@btb.powered.by.lunarbnc.net) has joined channel
    #haskell                                                            [17:31]
*** andrybak (~andrybak@2001:a61:2414:6001:b1bf:2e5f:f6cb:f861) has joined
    channel #haskell
<dminuoso> jusss: Yes! So from the perspective of the *caller* its just
           important that "instance Applicative f" is satisfied.
*** nfd9001 (~nfd9001@c-67-183-33-240.hsd1.wa.comcast.net) has joined channel
    #haskell
<jusss> dminuoso: and g may to connect with <*> and pure?
<jgt> I'm losing track of exactly what jusss is confused about
<jusss> jgt: applicative f in f a or monad m in m a should have arguments or
        not, they shouldn't                                             [17:32]
*** inkbottle (~inkbottle@aaubervilliers-654-1-222-110.w90-61.abo.wanadoo.fr)
    has quit: Ping timeout: 268 seconds
<jusss> 'cause f a is the type who has value, and f is a type who hasn't value
*** nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined channel
    #haskell                                                            [17:33]
<dminuoso> jusss: We could, in spirit, think of "Applicative f" as a
           dictionary containing the class methods
<dminuoso> jusss: But again, this is just in spirit.
*** xff0x (~fox@210.57.57.162) has joined channel #haskell
*** inkbottle (~inkbottle@aaubervilliers-654-1-213-87.w90-61.abo.wanadoo.fr)
    has joined channel #haskell
<jusss> dminuoso: ok, what is "context" now?
<jusss> or computation
<jusss> I don't understand why there're so many terms in haskell which are not
        in other languages                                              [17:34]
<dminuoso> jusss: Context has multiple meanings. The meaning Im referring to,
           is that in a type signature "f :: Ctxt f => ..." the stuff to the
           left of the => is called context.
<jusss> for example, exceptions, in other language it means runtime
        exceptions, but in haskell it may not, reference to Either
<jgt> I'd call that a constraint, not a context
<jgt> I mean, it _is_ a context
<dminuoso> jgt: Constraints are the individual parts of the context.    [17:35]
*** rsoeldner (~rsoeldner@195.145.101.20) has quit: Ping timeout: 272 seconds
<jgt> but constraint seems a little more specific
<jgt> fair enough
<dminuoso> jgt: ⌜Eq :: * -> Constraint⌝ if that makes sense to you :)
<jusss> dminuoso: namespace or envrionment, or context are same thing in other
        languages, so I don't know if they're in haskell?
<jgt> jusss: in English, a single word can have multiple meanings       [17:36]
<jgt> jusss: this is often the case with generic words like "context"
<dminuoso> jusss: Dont worry too much about the word "context". It's just what
           we call that thing to the left of => :)
*** catsup (d@ps38852.dreamhostps.com) has quit: Read error: Connection reset
    by peer
<dminuoso> jusss: we have to call it something, dont we?
<jusss> jgt: but namespace is specific
<dminuoso> jusss: In English context is a rather generic term, honestly.
                                                                        [17:37]
<jgt> jusss: are we talking about "namespace" or "context"?
<jusss> it's where the values stored
*** catsup (d@ps38852.dreamhostps.com) has joined channel #haskell
<jusss> dminuoso: what is the specific name for context in haskell? or near?
<dminuoso> jusss: A context is the stuff/surroundings/additional bits of
           something.
<dminuoso> jusss: context is a generic English word.                    [17:38]
<jusss> dminuoso: no definition in math?
<porrifolius> dmwit: Ah, great, good to know I'm at least in the ballpark! :)
              Thanks for the help... time for some more reading, and
              digestion, I think.
<jusss> dminuoso: ok, 
<dminuoso> jusss: It probably isnt too helpful to look into math for meaning,
           because math frequently reuses terminology for other things  [17:39]
<dminuoso> jusss: Merely accept that, in a type signature, when you have a
           double arrow =>, the thing to left is called context.
<jusss> dminuoso: and computation?
<dminuoso> jusss: The word context is used multiple times, confusingly. ;)
<dminuoso> And they have unrelated meanings.                            [17:40]
<no-n> oh, so context means something else under a different context
<dminuoso> jusss: If you prefer we can simply say "constraints in a type
           signature" instead.
<jgt> dminuoso: I also want to say that "in Haskell, the number of arguments a
      function takes is exactly equal to the number of times you see `->` in
      the type signature"
<dminuoso> jgt: That doest work.
<jusss> dminuoso: that's ok, I can take the left part of => as "context"
<dminuoso> jusss: Alright. :)
<jgt> dminuoso: this is of course ignoring the fact that every function only
      actually takes one argument
<dminuoso> jgt: Sure, but its still false                               [17:41]
<yushyin> wow, first time seeing that the left part of => is called context,
          but I just checked the haskellreport and of course dminuoso is
          right. TIL I guess ;P
<dminuoso> jgt: How many arguments does ⌜f :: (a -> a) -> a⌝ take? ;)
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has quit: Ping
    timeout: 244 seconds
<jusss> dminuoso: wait, what's a double arrow?
<jgt> dminuoso: oh, bollocks. Yes, that's pretty much exactly what I realised
      right before you wrote it :)
<dminuoso> jusss: =>
<jusss> dminuoso: ok
<jgt> dminuoso: but ignoring the arrows inside parens, it's true then isn't
      it?                                                               [17:42]
*** aleator (~aleator@85-76-105-113-nat.elisa-mobile.fi) has joined channel
    #haskell
<dminuoso> jgt: ⌜f :: a -> (a -> a)⌝ ?
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has joined channel
    #haskell
<jusss> dminuoso: then "computation" and "action" what're they meaning?
<jgt> dminuoso: I'd count that as "arrows inside parens"                [17:43]
<jusss> dminuoso: jgt one
<jgt> and also I'm wondering if some extension like DataKinds would also
      falsify my statement
<dminuoso> jgt: So according to your logic ⌜f :: a -> (a -> a)⌝ takes a
           different number of arugments than ⌜g :: a -> a -> a⌝ ?
<dminuoso> Interesting.
<jgt> dminuoso: yeah I think my statement was just wrong :)             [17:44]
<jgt> sometimes this simplified summaries work; sometimes not
<jgt> this time I failed
<jgt> these*
*** m0rphism (~m0rphism@149.172.82.115) has joined channel #haskell
<dminuoso> jusss: Honesty I dont know how to formally define these words.
                                                                        [17:45]
*** mmfood (~mmfood@178.73.202.156) has quit: Ping timeout: 258 seconds
                                                                        [17:49]
<jusss> dminuoso: wait a sec, >=>::(a->e->b)->(b->e->c)->a->e->c there would
        be four arguments, right?
<jusss> >=> f g x y = g (f x y) y                                       [17:50]
<jgt> jusss: for practical purposes, yes
<jusss> and >=> :: (a->m b) -> (b->m c) -> (a->m c) would have ?
<jgt> two                                                               [17:51]
<jgt> but technically, alll functions in Haskell take exactly one argument
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has joined
    channel #haskell                                                    [17:52]
<jusss> :t fmap
<lambdabot> Functor f => (a -> b) -> f a -> f b
<jgt> "fmap takes some function from a to b, and a functor of a, and produces
      a functor of b"                                                   [17:53]
*** petersen (~petersen@redhat/juhp) has quit: Ping timeout: 268 seconds
<jgt> that's how I'd read that
<jusss> the numbers of arguments depends its result I think             [17:54]
<jusss> :t (.)
<lambdabot> (b -> c) -> (a -> b) -> a -> c
<jgt> …?
<maerwald> jgt: that's not really useful to talk about functions (except
           reminding people about what currying is) and afais the haskell
           report doesn't use it that way either
<jgt> maerwald: which isn't useful? Saying that every function takes exactly
      one argument?
*** fog (b9ccd47f@185.204.212.127) has joined channel #haskell
<jusss> jgt: what the number of arugments of （.)?                      [17:55]
<maerwald> yes
<jusss> you give (.) two and (.) give you (a->c), you give (.) three and (.)
        give you c                                                      [17:56]
<jgt> jusss: I'd say three, but I think my explanations just aren't helping
      today, so I give up
<fog> nothing seems to be able to get haskoin to build with stack... but
      adding the flag ./configure --host=x86_64-w64-mingw32
*** ravenous_
    (~ravenousm@ptr-cud5aqfxstflj3lvfff.18120a2.ip6.access.telenet.be) has
    joined channel #haskell
*** fog (b9ccd47f@185.204.212.127) has quit: Remote host closed the connection
                                                                        [17:57]
<jusss> why there's no rules that explein about this...
*** olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has
    quit: Ping timeout: 245 seconds
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has quit:
    Ping timeout: 250 seconds
<dminuoso> There's in the end multiple intuitions.
<dminuoso> The technically correct way to put it, is that (.) takes a single
           argument.
<jgt> jusss: well yes, but the distinction is in whether or not you want your
      function to be fully applied
<dminuoso> The intuitively useful way to think of it, is that (.) takes two
           arguments on the idea that (.) composes two functions together to
           form a third.                                                [17:58]
<jgt> or at least, that's the distinction I _thought_ you were after
<jusss> dminuoso: but we can give three, right?
<davean> you can keep giving arguments to the thing (.) returns         [17:59]
<dminuoso> jusss: Sure.
*** rsoeldner (~rsoeldner@195.145.101.20) has joined channel #haskell
<dminuoso> jusss: It's just a matter of perspective, really. Its useful to be
           able to recognize all three perspectives as sort of "valid"
*** radsmoo (~radsmoo@193.218.138.34) has joined channel #haskell
<dminuoso> jusss: And be able to instantly switch them to understand your code
           better.
*** nous1024 (~nous1024@2405:6586:4040:800:f926:31fc:fed4:2fb) has joined
    channel #haskell                                                    [18:00]
*** merijn (~merijn@145.100.116.11) has quit: Ping timeout: 248 seconds
<davean> jusss: you could supply a 4th argument if c is a function too
<jusss> dminuoso: so how you're sure how many arguments a given function has
        when looking at its type signature?
<davean> jusss: how many is it useful to give?
*** ravenous_
    (~ravenousm@ptr-cud5aqfxstflj3lvfff.18120a2.ip6.access.telenet.be) has
    quit: Ping timeout: 264 seconds                                     [18:01]
<dminuoso> ^- that :)
<jusss> davean: how you know what is "useful" ?
*** nous1024 (~nous1024@2405:6586:4040:800:f926:31fc:fed4:2fb) has quit:
    Client Quit
<dminuoso> jusss: Good question, that depends on the code and what you are
           doing.
<davean> jusss: Well you have to know what you want to accomplish
<dminuoso> jusss: Take (+) for example. Its a function
<dminuoso> There's a notion in which it takes just one argument:        [18:02]
*** hiroaki (~hiroaki@p5B147D17.dip0.t-ipconnect.de) has joined channel
    #haskell
<dminuoso> (1+) creates an 1-adder function. so we could think of + as
           creating adder functions.
*** nous1024 (~nous1024@2405:6586:4040:800:f926:31fc:fed4:2fb) has joined
    channel #haskell
*** o1lo01ol1o (~o1lo01ol1@a109-49-167-181.cpe.netcabo.pt) has joined channel
    #haskell
<dminuoso> (1+2) can be thought as "adding two numbers together", or perhaps
           as "creating a 1-adder function, and applying that to two"
<MarcelineVQ> If I want to write specifically (.) why might 3 arguments be a
              good place to start? What hints do I have that this is the case?
                                                                        [18:03]
<dminuoso> They are operationally the same, which perspective is better
           depends on how you look at your code.
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has joined
    channel #haskell
*** mmfood (~mmfood@178.73.202.158) has joined channel #haskell
<davean> jusss: I'll note some "functions" when you're viewing them as the
         multiargument form, you can't tell how many they take untill you stop
         giving them (printf)                                           [18:04]
<jusss> dminuoso: ok, 
*** eiGHttt (~eiGHttt@115.231.100.106) has quit: Ping timeout: 268 seconds
<davean> jusss:
         http://hackage.haskell.org/package/base-4.12.0.0/docs/Text-Printf.html
<davean> takes as many arguements as you give it
<MarcelineVQ> it's all well and good that some functions can take more than I,
              such as if c is also a function type, but does that change how I
              write (.) ?                                               [18:05]
<MarcelineVQ> *more than I expect
<jusss> dminuoso: I still want to know "compustation" and "action" in haskell
        would like? and why those terms "computation" "action" and "context"
        always come with monad?
<dminuoso> jusss: That's a good question, actually.
<davean> MarcelineVQ: I'm not sure what you're asking
*** jeltsch (~wolfgang@6558-df23-fa74-c9da-3e80-82b2-07d0-2001.dyn.estpak.ee)
    has joined channel #haskell
<dminuoso> jusss: I can, at least, talk about why "context" is frequently used
<davean> MarcelineVQ: are you talking about implimenting (.)?
<jusss> sometimes, it not the term monad make people confused, it's the way
        you describe it
<dminuoso> jusss: To do that, we need to explore linguistics a bit. Do you
           know what context is in linguistics?
<dminuoso> jusss: Yes! I fully agree.                                   [18:06]
*** cur8or_ (~cur8or@72canterbury.cybersmart.co.za) has joined channel
    #haskell
<jusss> dminuoso: my mother lanagues is not English...                  [18:07]
<MarcelineVQ> Yes, because earlier before I dc'd the confusion on jusss end
              was understanding how a type sig informs you what your argument
              are, so I assume it still is
<dminuoso> jusss: That's fine.
*** heatsink (~heatsink@2600:1700:bef1:5e10:2597:6b1f:a313:ca81) has quit:
    Ping timeout: 264 seconds
<dminuoso> jusss: If you are reading some historical article about world war
           II, then context is all that extra stuff/knowledge in your head,
           that allows you to understand the text.
<dminuoso> jusss: Its the stuff not in the text, but relevant to the meaning
           of the text.                                                 [18:08]
<jusss> dminuoso: yes
<dminuoso> jusss: This is a relatively lose notion
*** aleator (~aleator@85-76-105-113-nat.elisa-mobile.fi) has quit: Ping
    timeout: 248 seconds
*** cur8or (~cur8or@72canterbury.cybersmart.co.za) has quit: Ping timeout: 258
    seconds
*** Vikfret (~Vikfret@189.216.85.255) has quit: Quit: Leaving           [18:09]
<jusss> dminuoso: and "computation " "action"?                          [18:11]
<dminuoso> jusss: The issue at the end is, that they are just mind models that
           people have developed after understanding monad.             [18:12]
<dminuoso> jusss: They are not vessels to explain it, they are individual
           mental models.
<jusss> dminuoso: so monad is still unspeakable?
<dminuoso> jusss: It's just highly abstract, which is why people seem to like
           using abstract terms for it.
*** xff0x (~fox@210.57.57.162) has quit: Quit: xff0x                    [18:13]
*** governor (~governor@41.217.100.204) has quit: Read error: Connection reset
    by peer
*** governor (~governor@41.190.31.251) has joined channel #haskell
<dminuoso> jusss: There's a simple way to approach it, and that's "its an
           interface consisting of two functions" 
<maerwald> dminuoso: so monads are world war 2?
<maerwald> :D
*** governor_ (~governor@154.120.93.83) has joined channel #haskell     [18:14]
<jusss> dminuoso: and how you know your abstract term and his abstract term
        are the same thing? 'cause they're all abstract :)
<maerwald> I think this is the best monad metaphor so far
*** doublex (~doublex@2601:542:c480:6ee0:34c1:a892:98f3:92e9) has joined
    channel #haskell
<dminuoso> jusss: Sometimes they are not.                               [18:15]
<jusss> dminuoso: I feel it like something like the zen...              [18:16]
<dminuoso> jusss:
           https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/
<dminuoso> jusss: This is a useful read. It wont explain what Monad is, but it
           sort of explores why people like you are having so many troubles.
<jusss> I saw this before, “Monads are Burritos,”                     [18:17]
*** jackzhang (~zhen.zhan@114.242.122.145) has quit: Quit: WeeChat 1.9.1
<jusss> time is abstract, can we make time concret?                     [18:18]
<jusss> 1 is abstract, can we make 1 concret?
*** governor (~governor@41.190.31.251) has quit: Ping timeout: 272 seconds
*** cybai_ (~cybai@240d:1b:42:7800:f9f7:66d3:4ef1:92f8) has quit: Remote host
    closed the connection                                               [18:19]
*** AstroDroid (~AstroDroi@185.204.1.185) has joined channel #haskell
<dminuoso> jusss: Numbers are also a good example. 
<dminuoso> jusss: In the peano construction 1 is defined to be the successor
           (whatever a successor is, we dont know) of 0.
<dminuoso> And 0 is just defined to exist.                              [18:20]
<jusss> dminuoso: I think we can back to your tasks...
<davean> he mental models more represent how those people are using monads
         than even their understanding of a monad really IMO
<dminuoso> davean: The deepest truth I found in that joke.. but that joke is
           not a means of arriving at understanding, it's rather the goal.
                                                                        [18:21]
*** cosimone (~cosimone@2001:b07:ae5:db26:9520:741c:a5e9:2223) has joined
    channel #haskell                                                    [18:24]
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has joined
    channel #haskell                                                    [18:25]
<MarcelineVQ> <dminuoso> jusss: There's a simple way to approach it, and
              that's "its an interface consisting of two functions"
*** noumenon (~daemon@127.51-175-198.customer.lyse.net) has quit: Remote host
    closed the connection                                               [18:26]
<MarcelineVQ> feel like that was missed
*** noumenon (~daemon@127.51-175-198.customer.lyse.net) has joined channel
    #haskell
<jusss> dminuoso: the transformation about (a,b), how I can get (a,b) through
        <*> and pure's type, 'cause (a,b) doesn't existed between them
<dminuoso> jusss: No parse. Can you rephrase?                           [18:27]
<jusss> :t <*>                                                          [18:28]
<lambdabot> error: parse error on input ‘<*>’
<jusss> :t (<*>)
<lambdabot> Applicative f => f (a -> b) -> f a -> f b
<jusss> :t pure
<lambdabot> Applicative f => a -> f a                                   [18:29]
*** ___laika (~laika@99-0-83-18.lightspeed.sntcca.sbcglobal.net) has joined
    channel #haskell
<jusss> plus :: f a -> f b -> f (a, b)
<dminuoso> jusss: That signature is missing a context. :)
<jusss> dminuoso: there's no such thing like (a,b) in <*> and pure's type
<dminuoso> jusss: Indeed!
<jusss> dminuoso: oh, context again!
*** merijn (~merijn@145.100.116.11) has joined channel #haskell         [18:30]
<jusss> this is the term I heard lots of
*** fosterite (~fosterite@2601:445:447f:dd14:7c45:40ec:e72b:2a2b) has quit:
    Ping timeout: 252 seconds
<jusss> read
<dminuoso> jusss: I did that intentionally. I just meant that the type
           signature of plus is missing a constraint Applicative f.
<jusss> dminuoso: and you suppose I give it a function which has that type?
                                                                        [18:31]
<dminuoso> jusss: What do you think a constraint is?
*** Synthetica (uid199651@gateway/web/irccloud.com/x-zbcfcwdoaqpkxfvp) has
    joined channel #haskell
<dminuoso> jusss: What do you mean by "I give it a function which has that
           type"
<jusss> dminuoso: Int, so it must be -xx to + xx, x is the number I forget
                                                                        [18:32]
<jusss> dminuoso: complete the missing (a,b)
<dminuoso> jusss: There are no values of type "Applicative f" because
           "Applicative f" is a constraint, it's not a type.
<dminuoso> jusss: What do you mean "complete the missing (a,b)"
<jusss> dminuoso: and?
<dminuoso> jusss: Do you understand how typeclasses work, at all?       [18:33]
<jusss> dminuoso: make the them equal
<jusss> dminuoso: an instance of a typeclass which it must implement those
        functions which defined in the typeclass
<jusss> like object and class, every object should have the method which
        defined in the class                                            [18:35]
*** merijn (~merijn@145.100.116.11) has quit: Ping timeout: 258 seconds
<jusss> but it's polymorphic here in haskell
<jusss> dminuoso: right?
<dminuoso> jusss: Typeclasses have no relationship to objects/classes from
           traditional OOP languages.
<jusss> I said "like"                                                   [18:36]
<dminuoso> jusss: They are very much different.
<jusss> interface in Java
<dminuoso> jusss: Right, typeclasses are closer to interfaces
*** jose_zap (~jose_zap@office.expressional.com) has quit: Quit: My MacBook
    has gone to sleep. ZZZzzz…
<jusss> @abstractmethod in python
<lambdabot> Unknown command, try @list
<dminuoso> jusss: And what we call typeclass instances, is similar to an
           interface implementation in Java.
<lavalike> remind me an applicative that is not a monad?                [18:37]
<dminuoso> lavalike: ZipList
<dminuoso> lavalike: Haxl
<MarcelineVQ> lavalike: Const, iirc
<jusss> lavalike: applicative f has no >>= function                     [18:38]
<dminuoso> MarcelineVQ: Depends. ⌜Const ()⌝ should work, no?
<davean> jusss: the Applicative type has no Monad (>>=) but many things that
         are Applicative have a Monad (>>=), they were asking for things that
         were Applicative and could not have a Monad (>>=)              [18:39]
<jusss> davean: you confused me                                         [18:40]
<dminuoso> lavalike: Ah ignore Haxl, ZipList is always my go-to "not-a-monad"
           :)
<lavalike> jusss: every monad is applicative, but not every applicative is a
           monad, looking for examples of the latter
<lavalike> dminuoso: aye
<Taneb> lavalike: Concurrently from the async package
<dminuoso> lavalike: Control.Applicative.Free -- does that count?       [18:41]
<jusss> dminuoso: let's back to ...
* dminuoso chuckles
<jusss> to your tasks, it seems I misunderstand or don't understand what are
        your tasks...                                                   [18:42]
<jusss> sorry, my English is not good...
*** ericsagnes (~ericsagne@2400:7800:4def:9800:124a:7dff:feb2:75fa) has quit:
    Ping timeout: 250 seconds
<dminuoso> jusss: I recommend you dial it back and take easier
           excercises. Perhaps approach them later when you have more
           experience.
*** dansho (~dansho4@71-84-161-204.dhcp.astr.or.charter.com) has quit: Remote
    host closed the connection                                          [18:43]
<lavalike> Taneb: never seen that before, nice
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has quit: Ping
    timeout: 245 seconds
<jusss> dminuoso: haha, I remember I come here with a monad transformer
        concepts, and now I have lots of I-don't-know concepts          [18:44]
<jusss> the more I know, the more I don't know
*** rruizt (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl) has joined channel
    #haskell
<dminuoso> lavalike: ⌜data P a = Nil | P a a⌝                           [18:45]
<[exa]> dminuoso: is there a compose shortcut for the ⌜⌝ brackets?
<dminuoso> [exa]: For me? Yes.                                          [18:46]
*** Zer0xp (~chr15@106.51.73.242) has quit: Quit: WeeChat 2.4
<dminuoso> [exa]: I use XCompose.
<dminuoso> lavalike: Parser from optparse-applicative
*** cybai (~cybai@210.160.37.90) has joined channel #haskell
<[exa]> dminuoso: so I guess it's not in the default xcompose config?
<dminuoso> [exa]: No idea, I have my own XCompose config. :)            [18:47]
<dminuoso> [exa]: ⊥ ∀ ∃ ≃ ⌜ ⌝ and all the greek letters is what I have
                                                                        [18:48]
*** Zer0xp (~chr15@106.51.73.242) has joined channel #haskell
<davean> Why do you do ⌜ ⌝?                                             [18:49]
<[exa]> dminuoso: anyway what's your shortcut for the brackets? I'm in fact
        trying to invent a good one :D
<MarcelineVQ> cause it's not confused for code :>
*** pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit: Quit: pie_
<dminuoso> [exa]: So I use US layout, it made sense to use Capslock and []
*** acidjnk (~acid@i577BCADD.versanet.de) has quit: Ping timeout: 272 seconds
                                                                        [18:50]
*** cybai (~cybai@210.160.37.90) has quit: Ping timeout: 245 seconds
<dminuoso> davean: ski introduced it a while ago, and I liked it as an
           alternative to separate between metalanguage and some other
           language of interest.
*** rsoeldner_ (~rsoeldner@195.145.101.20) has joined channel #haskell  [18:52]
<[exa]> oh ⌜yes⌝
<lavalike> error: Variable not in scope: yes
*** merijn (~merijn@145.100.116.11) has joined channel #haskell         [18:53]
<[exa]> :'(
*** dddddd (~dddddd@unaffiliated/dddddd) has joined channel #haskell
<dminuoso> [exa]: My only issue is that with XCompose you cant seem to hold
           the multikey and then issue multiple sequences.
<dminuoso> You have to release and repress the multikey between two sequence.s
                                                                        [18:54]
<[exa]> I use it in sequence, multikey -> key -> key, without holding
<[exa]> (I thought that's the standard way)
<davean> MarcelineVQ: how is it not confused for code? Thats a valid Haskell
         identifier                                                     [18:55]
<dminuoso> [exa]: No I mean: I'd love to press the multikey, hold it, and then
           press [ followed by ]
<dminuoso> [exa]: And then end up with ⌜⌝
<dminuoso> Such that the multikey acts like a modifier key
<aveltras> anyone having problems with cabal right now ? it can't find warp as
           a dependency (and other packages too)
<[exa]> davean: lavalike: guys stop :D
<dminuoso> aveltras: Did you run ⌜cabal v2-update⌝ ?
*** ericsagnes (~ericsagne@2400:7800:4def:9800:124a:7dff:feb2:75fa) has joined
    channel #haskell
<[exa]> dminuoso: this works for me: <Multi_key> <bracketleft> <bracketright>
        : "⌜⌝"                                                          [18:56]
<aveltras> i did now, but it's to be used with hie which doesn't support v2 i
           think
<dminuoso> [exa]: !!!
*** acidjnk (~acid@i577BCADD.versanet.de) has joined channel #haskell
*** acidjnk (~acid@i577BCADD.versanet.de) has left channel #haskell: #haskell
*** acidjnk (~acid@i577BCADD.versanet.de) has joined channel #haskell
<dminuoso> [exa]: Oh man. It took me half a year to not arrive at that idea.
<merijn> aveltras: v2-update just updates the package index (just like
         "update" does)                                                 [18:57]
<dminuoso> [exa]: Thanks for that tip. :)
*** xkapastel (uid17782@gateway/web/irccloud.com/x-ioeuliotvkewzlqx) has quit:
    Quit: Connection closed for inactivity
<[exa]> dminuoso: it would be cool to place the cursor in the middle of those
        right                                                           [18:58]
<dminuoso> [exa]: You can do that by inserting the appropriate ANSI sequence
           probably
*** dddddd (~dddddd@unaffiliated/dddddd) has quit: Ping timeout: 248 seconds
<[exa]> dminuoso: that's gonna break non-terminal stuff, I recall there was a
        way even with Xcompose                                          [18:59]
<merijn> dminuoso: You used v2-run for running executables, right? Have you
         come up with a convenient workflow to switch between running
         profiled/unprofiled?
<jusss>  /quit
ERC> 

class Functor f => Applicative f where
  (<*>) :: f (a -> b) -> f a -> f b
  pure :: a -> f a
  
  
class Functor f => ApplicativeAlt f where
  plus :: f a -> f b -> f (a, b)
unit :: f ()